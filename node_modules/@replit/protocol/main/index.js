/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["./main/index"] || ($protobuf.roots["./main/index"] = {});
    
    $root.replit = (function() {
    
        /**
         * Namespace replit.
         * @exports replit
         * @namespace
         */
        var replit = {};
    
        replit.goval = (function() {
    
            /**
             * Namespace goval.
             * @memberof replit
             * @namespace
             */
            var goval = {};
    
            goval.api = (function() {
    
                /**
                 * Namespace api.
                 * @memberof replit.goval
                 * @namespace
                 */
                var api = {};
    
                api.Command = (function() {
    
                    /**
                     * Properties of a Command.
                     * @memberof replit.goval.api
                     * @interface ICommand
                     * @property {number|null} [channel] Command channel
                     * @property {number|null} [session] Command session
                     * @property {replit.goval.api.OpenChannel|replit.goval.api.IOpenChannel|null} [openChan] Command openChan
                     * @property {replit.goval.api.OpenChannelRes|replit.goval.api.IOpenChannelRes|null} [openChanRes] Command openChanRes
                     * @property {replit.goval.api.CloseChannel|replit.goval.api.ICloseChannel|null} [closeChan] Command closeChan
                     * @property {replit.goval.api.CloseChannelRes|replit.goval.api.ICloseChannelRes|null} [closeChanRes] Command closeChanRes
                     * @property {replit.goval.api.ContainerState|replit.goval.api.IContainerState|null} [containerState] Command containerState
                     * @property {replit.goval.api.PortOpen|replit.goval.api.IPortOpen|null} [portOpen] Command portOpen
                     * @property {replit.goval.api.PortClose|replit.goval.api.IPortClose|null} [portClose] Command portClose
                     * @property {replit.goval.api.Toast|replit.goval.api.IToast|null} [toast] Command toast
                     * @property {replit.goval.api.ProtocolError|replit.goval.api.IProtocolError|null} [protocolError] Command protocolError
                     * @property {replit.goval.api.Redirect|replit.goval.api.IRedirect|null} [redirect] Command redirect
                     * @property {replit.goval.api.AlwaysOn|replit.goval.api.IAlwaysOn|null} [alwaysOn] Command alwaysOn
                     * @property {replit.goval.api.RunMain|replit.goval.api.IRunMain|null} [runMain] Command runMain
                     * @property {replit.goval.api.Clear|replit.goval.api.IClear|null} [clear] Command clear
                     * @property {string|null} ["eval"] Command eval
                     * @property {string|null} [result] Command result
                     * @property {string|null} [input] Command input
                     * @property {string|null} [output] Command output
                     * @property {string|null} [error] Command error
                     * @property {string|null} [stderr] Command stderr
                     * @property {string|null} [log] Command log
                     * @property {string|null} [record] Command record
                     * @property {replit.goval.api.SaneTerm|replit.goval.api.ISaneTerm|null} [saneTerm] Command saneTerm
                     * @property {replit.goval.api.ResizeTerm|replit.goval.api.IResizeTerm|null} [resizeTerm] Command resizeTerm
                     * @property {replit.goval.api.State|null} [state] Command state
                     * @property {replit.goval.api.OK|replit.goval.api.IOK|null} [ok] Command ok
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [persist] Command persist
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [persistMirror] Command persistMirror
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [write] Command write
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [remove] Command remove
                     * @property {replit.goval.api.Move|replit.goval.api.IMove|null} [move] Command move
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [tryRemove] Command tryRemove
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [mkdir] Command mkdir
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [stat] Command stat
                     * @property {replit.goval.api.StatResult|replit.goval.api.IStatResult|null} [statRes] Command statRes
                     * @property {replit.goval.api.TransferStart|replit.goval.api.ITransferStart|null} [transferStart] Command transferStart
                     * @property {replit.goval.api.TransferChunk|replit.goval.api.ITransferChunk|null} [transferChunk] Command transferChunk
                     * @property {replit.goval.api.TransferComplete|replit.goval.api.ITransferComplete|null} [transferComplete] Command transferComplete
                     * @property {replit.goval.api.Transfer|replit.goval.api.ITransfer|null} [transferCancel] Command transferCancel
                     * @property {replit.goval.api.Transfer|replit.goval.api.ITransfer|null} [transfer] Command transfer
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [read] Command read
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [readdir] Command readdir
                     * @property {replit.goval.api.Files|replit.goval.api.IFiles|null} [files] Command files
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] Command file
                     * @property {replit.goval.api.CheckChanges|replit.goval.api.ICheckChanges|null} [checkChanges] Command checkChanges
                     * @property {replit.goval.api.Files|replit.goval.api.IFiles|null} [changedFiles] Command changedFiles
                     * @property {replit.goval.api.LintResults|replit.goval.api.ILintResults|null} [lintResults] Command lintResults
                     * @property {replit.goval.api.ContainedTest|replit.goval.api.IContainedTest|null} [runContainedTest] Command runContainedTest
                     * @property {replit.goval.api.TestResult|replit.goval.api.ITestResult|null} [testResult] Command testResult
                     * @property {string|null} [debuggerStart] Command debuggerStart
                     * @property {replit.goval.api.RunMain|replit.goval.api.IRunMain|null} [debuggerStep] Command debuggerStep
                     * @property {replit.goval.api.DebugStatus|replit.goval.api.IDebugStatus|null} [debuggerStatus] Command debuggerStatus
                     * @property {replit.goval.api.EnsurePackages|replit.goval.api.IEnsurePackages|null} [ensurePackages] Command ensurePackages
                     * @property {replit.goval.api.Ping|replit.goval.api.IPing|null} [ping] Command ping
                     * @property {replit.goval.api.Pong|replit.goval.api.IPong|null} [pong] Command pong
                     * @property {replit.goval.api.Hello|replit.goval.api.IHello|null} [hello] Command hello
                     * @property {replit.goval.api.Goodbye|replit.goval.api.IGoodbye|null} [goodbye] Command goodbye
                     * @property {replit.goval.api.ProxyGoingAway|replit.goval.api.IProxyGoingAway|null} [proxyGoingAway] Command proxyGoingAway
                     * @property {replit.goval.api.Hint|replit.goval.api.IHint|null} [hint] Command hint
                     * @property {replit.goval.api.Connect|replit.goval.api.IConnect|null} [connect] Command connect
                     * @property {replit.goval.api.Send|replit.goval.api.ISend|null} [send] Command send
                     * @property {replit.goval.api.Recv|replit.goval.api.IRecv|null} [recv] Command recv
                     * @property {replit.goval.api.Disconnect|replit.goval.api.IDisconnect|null} [disconnect] Command disconnect
                     * @property {replit.goval.api.FileAuthReq|replit.goval.api.IFileAuthReq|null} [fileAuthReq] Command fileAuthReq
                     * @property {replit.goval.api.FileAuthRes|replit.goval.api.IFileAuthRes|null} [fileAuthRes] Command fileAuthRes
                     * @property {replit.goval.api.MultiFileAuthRes|replit.goval.api.IMultiFileAuthRes|null} [mutliFileAuthRes] Command mutliFileAuthRes
                     * @property {replit.goval.api.ListObjects|replit.goval.api.IListObjects|null} [listObjects] Command listObjects
                     * @property {replit.goval.api.ListObjectsResp|replit.goval.api.IListObjectsResp|null} [listObjectsResp] Command listObjectsResp
                     * @property {replit.goval.api.OTPacket|replit.goval.api.IOTPacket|null} [ot] Command ot
                     * @property {replit.goval.api.OTStatus|replit.goval.api.IOTStatus|null} [otstatus] Command otstatus
                     * @property {replit.goval.api.OTLinkFile|replit.goval.api.IOTLinkFile|null} [otLinkFile] Command otLinkFile
                     * @property {replit.goval.api.OTLinkFileResponse|replit.goval.api.IOTLinkFileResponse|null} [otLinkFileResponse] Command otLinkFileResponse
                     * @property {replit.goval.api.OTCursor|replit.goval.api.IOTCursor|null} [otNewCursor] Command otNewCursor
                     * @property {replit.goval.api.OTCursor|replit.goval.api.IOTCursor|null} [otDeleteCursor] Command otDeleteCursor
                     * @property {replit.goval.api.OTFetchRequest|replit.goval.api.IOTFetchRequest|null} [otFetchRequest] Command otFetchRequest
                     * @property {replit.goval.api.OTFetchResponse|replit.goval.api.IOTFetchResponse|null} [otFetchResponse] Command otFetchResponse
                     * @property {replit.goval.api.OTTransformSelectionRequest|replit.goval.api.IOTTransformSelectionRequest|null} [otTransformSelectionRequest] Command otTransformSelectionRequest
                     * @property {replit.goval.api.OTTransformSelectionResponse|replit.goval.api.IOTTransformSelectionResponse|null} [otTransformSelectionResponse] Command otTransformSelectionResponse
                     * @property {replit.goval.api.Flush|replit.goval.api.IFlush|null} [flush] Command flush
                     * @property {replit.goval.api.Debug|replit.goval.api.IDebug|null} [debug] Command debug
                     * @property {replit.goval.api.StartVCR|replit.goval.api.IStartVCR|null} [startVCR] Command startVCR
                     * @property {replit.goval.api.ReadVCR|replit.goval.api.IReadVCR|null} [readVCR] Command readVCR
                     * @property {replit.goval.api.VCRLog|replit.goval.api.IVCRLog|null} [VCRLog] Command VCRLog
                     * @property {replit.goval.api.Auth|replit.goval.api.IAuth|null} [auth] Command auth
                     * @property {replit.goval.api.ExecInfo|replit.goval.api.IExecInfo|null} [execInfo] Command execInfo
                     * @property {replit.goval.api.SubscribeFile|replit.goval.api.ISubscribeFile|null} [subscribeFile] Command subscribeFile
                     * @property {replit.goval.api.FileEvent|replit.goval.api.IFileEvent|null} [fileEvent] Command fileEvent
                     * @property {replit.goval.api.Roster|replit.goval.api.IRoster|null} [roster] Command roster
                     * @property {replit.goval.api.User|replit.goval.api.IUser|null} [join] Command join
                     * @property {replit.goval.api.User|replit.goval.api.IUser|null} [part] Command part
                     * @property {replit.goval.api.OpenFile|replit.goval.api.IOpenFile|null} [openFile] Command openFile
                     * @property {replit.goval.api.FileOpened|replit.goval.api.IFileOpened|null} [fileOpened] Command fileOpened
                     * @property {replit.goval.api.FollowUser|replit.goval.api.IFollowUser|null} [followUser] Command followUser
                     * @property {replit.goval.api.UnfollowUser|replit.goval.api.IUnfollowUser|null} [unfollowUser] Command unfollowUser
                     * @property {replit.goval.api.UpdateSessionTimestamp|replit.goval.api.IUpdateSessionTimestamp|null} [updateSessionTimestamp] Command updateSessionTimestamp
                     * @property {replit.goval.api.SessionTimestampUpdated|replit.goval.api.ISessionTimestampUpdated|null} [sessionTimestampUpdated] Command sessionTimestampUpdated
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [exec] Command exec
                     * @property {replit.goval.api.PackageSearch|replit.goval.api.IPackageSearch|null} [packageSearch] Command packageSearch
                     * @property {replit.goval.api.PackageSearchResp|replit.goval.api.IPackageSearchResp|null} [packageSearchResp] Command packageSearchResp
                     * @property {replit.goval.api.PackageInfo|replit.goval.api.IPackageInfo|null} [packageInfo] Command packageInfo
                     * @property {replit.goval.api.PackageInfoResp|replit.goval.api.IPackageInfoResp|null} [packageInfoResp] Command packageInfoResp
                     * @property {replit.goval.api.PackageAdd|replit.goval.api.IPackageAdd|null} [packageAdd] Command packageAdd
                     * @property {replit.goval.api.PackageRemove|replit.goval.api.IPackageRemove|null} [packageRemove] Command packageRemove
                     * @property {replit.goval.api.PackageInstall|replit.goval.api.IPackageInstall|null} [packageInstall] Command packageInstall
                     * @property {replit.goval.api.PackageListSpecfile|replit.goval.api.IPackageListSpecfile|null} [packageListSpecfile] Command packageListSpecfile
                     * @property {replit.goval.api.PackageListSpecfileResp|replit.goval.api.IPackageListSpecfileResp|null} [packageListSpecfileResp] Command packageListSpecfileResp
                     * @property {replit.goval.api.PackageCacheSave|replit.goval.api.IPackageCacheSave|null} [packageCacheSave] Command packageCacheSave
                     * @property {replit.goval.api.ChatMessage|replit.goval.api.IChatMessage|null} [chatMessage] Command chatMessage
                     * @property {replit.goval.api.ChatTyping|replit.goval.api.IChatTyping|null} [chatTyping] Command chatTyping
                     * @property {replit.goval.api.ChatScrollback|replit.goval.api.IChatScrollback|null} [chatScrollback] Command chatScrollback
                     * @property {replit.goval.api.FSSnapshot|replit.goval.api.IFSSnapshot|null} [fsSnapshot] Command fsSnapshot
                     * @property {replit.goval.api.FSSnapshotEvent|replit.goval.api.IFSSnapshotEvent|null} [fsSnapshotEvent] Command fsSnapshotEvent
                     * @property {replit.goval.api.FSLock|replit.goval.api.IFSLock|null} [fsTakeLock] Command fsTakeLock
                     * @property {replit.goval.api.FSLock|replit.goval.api.IFSLock|null} [fsReleaseLock] Command fsReleaseLock
                     * @property {boolean|null} [hasCap] Command hasCap
                     * @property {replit.goval.api.SnapshotEvent|replit.goval.api.ISnapshotEvent|null} [snapshotEvent] Command snapshotEvent
                     * @property {boolean|null} [NoninteractiveFSChangeEvent] Command NoninteractiveFSChangeEvent
                     * @property {replit.goval.api.Pid1Config|replit.goval.api.IPid1Config|null} [pid1Config] Command pid1Config
                     * @property {replit.goval.api.Metrics|replit.goval.api.IMetrics|null} [metrics] Command metrics
                     * @property {replit.goval.api.BootStatus|replit.goval.api.IBootStatus|null} [bootStatus] Command bootStatus
                     * @property {replit.goval.api.ReadMetaRequest|replit.goval.api.IReadMetaRequest|null} [readMetaRequest] Command readMetaRequest
                     * @property {replit.goval.api.ReadMetaResponse|replit.goval.api.IReadMetaResponse|null} [readMetaResponse] Command readMetaResponse
                     * @property {replit.goval.api.WriteMetaRequest|replit.goval.api.IWriteMetaRequest|null} [writeMetaRequest] Command writeMetaRequest
                     * @property {replit.goval.api.WriteMetaResponse|replit.goval.api.IWriteMetaResponse|null} [writeMetaResponse] Command writeMetaResponse
                     * @property {replit.goval.api.AppendMetaRequest|replit.goval.api.IAppendMetaRequest|null} [appendMetaRequest] Command appendMetaRequest
                     * @property {replit.goval.api.AppendMetaResponse|replit.goval.api.IAppendMetaResponse|null} [appendMetaResponse] Command appendMetaResponse
                     * @property {replit.goval.api.Audio|replit.goval.api.IAudio|null} [audio] Command audio
                     * @property {replit.goval.api.PprofRequest|replit.goval.api.IPprofRequest|null} [pprofRequest] Command pprofRequest
                     * @property {replit.goval.api.PprofResponse|replit.goval.api.IPprofResponse|null} [pprofResponse] Command pprofResponse
                     * @property {replit.goval.api.Audio2|replit.goval.api.IAudio2|null} [audio2] Command audio2
                     * @property {replit.goval.api.PTYConfig|replit.goval.api.IPTYConfig|null} [PTYConfig] Command PTYConfig
                     * @property {replit.goval.api.DebugMain|replit.goval.api.IDebugMain|null} [debugMain] Command debugMain
                     * @property {replit.goval.api.DebugState|replit.goval.api.IDebugState|null} [debugState] Command debugState
                     * @property {replit.goval.api.DebugMainReply|replit.goval.api.IDebugMainReply|null} [debugMainReply] Command debugMainReply
                     * @property {replit.goval.api.DebugInput|replit.goval.api.IDebugInput|null} [debugInput] Command debugInput
                     * @property {replit.goval.api.DebugOutput|replit.goval.api.IDebugOutput|null} [debugOutput] Command debugOutput
                     * @property {replit.goval.api.DebugStop|replit.goval.api.IDebugStop|null} [debugStop] Command debugStop
                     * @property {replit.goval.api.DebugLeave|replit.goval.api.IDebugLeave|null} [debugLeave] Command debugLeave
                     * @property {replit.goval.api.DebugSessions|replit.goval.api.IDebugSessions|null} [debugSessions] Command debugSessions
                     * @property {replit.goval.api.DebugAddBreakpointRequest|replit.goval.api.IDebugAddBreakpointRequest|null} [debugAddBreakpointRequest] Command debugAddBreakpointRequest
                     * @property {replit.goval.api.DebugUpdateBreakpointRequest|replit.goval.api.IDebugUpdateBreakpointRequest|null} [debugUpdateBreakpointRequest] Command debugUpdateBreakpointRequest
                     * @property {replit.goval.api.DebugRemoveBreakpointRequest|replit.goval.api.IDebugRemoveBreakpointRequest|null} [debugRemoveBreakpointRequest] Command debugRemoveBreakpointRequest
                     * @property {replit.goval.api.DebugBreakpointEvent|replit.goval.api.IDebugBreakpointEvent|null} [debugBreakpointEvent] Command debugBreakpointEvent
                     * @property {replit.goval.api.DotReplitGetRequest|replit.goval.api.IDotReplitGetRequest|null} [dotReplitGetRequest] Command dotReplitGetRequest
                     * @property {replit.goval.api.DotReplitGetResponse|replit.goval.api.IDotReplitGetResponse|null} [dotReplitGetResponse] Command dotReplitGetResponse
                     * @property {replit.goval.api.RunConfigGetRequest|replit.goval.api.IRunConfigGetRequest|null} [runConfigGetRequest] Command runConfigGetRequest
                     * @property {replit.goval.api.RunConfigGetResponse|replit.goval.api.IRunConfigGetResponse|null} [runConfigGetResponse] Command runConfigGetResponse
                     * @property {replit.goval.api.DotReplitUpdateRequest|replit.goval.api.IDotReplitUpdateRequest|null} [dotReplitUpdateRequest] Command dotReplitUpdateRequest
                     * @property {replit.goval.api.DotReplitUpdateResponse|replit.goval.api.IDotReplitUpdateResponse|null} [dotReplitUpdateResponse] Command dotReplitUpdateResponse
                     * @property {replit.goval.api.StartLSP|replit.goval.api.IStartLSP|null} [startLSP] Command startLSP
                     * @property {replit.goval.api.FirewallDenied|replit.goval.api.IFirewallDenied|null} [firewallDenied] Command firewallDenied
                     * @property {replit.goval.api.NixPackageAddRequest|replit.goval.api.INixPackageAddRequest|null} [nixPackageAddRequest] Command nixPackageAddRequest
                     * @property {replit.goval.api.NixPackageAddResponse|replit.goval.api.INixPackageAddResponse|null} [nixPackageAddResponse] Command nixPackageAddResponse
                     * @property {replit.goval.api.NixPackageRemoveRequest|replit.goval.api.INixPackageRemoveRequest|null} [nixPackageRemoveRequest] Command nixPackageRemoveRequest
                     * @property {replit.goval.api.NixPackageRemoveResponse|replit.goval.api.INixPackageRemoveResponse|null} [nixPackageRemoveResponse] Command nixPackageRemoveResponse
                     * @property {replit.goval.api.NixPackageListRequest|replit.goval.api.INixPackageListRequest|null} [nixPackageListRequest] Command nixPackageListRequest
                     * @property {replit.goval.api.NixPackageListResponse|replit.goval.api.INixPackageListResponse|null} [nixPackageListResponse] Command nixPackageListResponse
                     * @property {replit.goval.api.NixChannelsRequest|replit.goval.api.INixChannelsRequest|null} [nixChannelsRequest] Command nixChannelsRequest
                     * @property {replit.goval.api.NixChannelsResponse|replit.goval.api.INixChannelsResponse|null} [nixChannelsResponse] Command nixChannelsResponse
                     * @property {replit.goval.api.NixChannelLatestStableRequest|replit.goval.api.INixChannelLatestStableRequest|null} [nixChannelLatestStableRequest] Command nixChannelLatestStableRequest
                     * @property {replit.goval.api.NixChannelLatestStableResponse|replit.goval.api.INixChannelLatestStableResponse|null} [nixChannelLatestStableResponse] Command nixChannelLatestStableResponse
                     * @property {replit.goval.api.NixPackageSearchRequest|replit.goval.api.INixPackageSearchRequest|null} [nixPackageSearchRequest] Command nixPackageSearchRequest
                     * @property {replit.goval.api.NixPackageSearchResponse|replit.goval.api.INixPackageSearchResponse|null} [nixPackageSearchResponse] Command nixPackageSearchResponse
                     * @property {replit.goval.api.UserEvent|replit.goval.api.IUserEvent|null} [userEvent] Command userEvent
                     * @property {replit.goval.api.ReplspaceApiOpenFile|replit.goval.api.IReplspaceApiOpenFile|null} [replspaceApiOpenFile] Command replspaceApiOpenFile
                     * @property {replit.goval.api.ReplspaceApiCloseFile|replit.goval.api.IReplspaceApiCloseFile|null} [replspaceApiCloseFile] Command replspaceApiCloseFile
                     * @property {replit.goval.api.ReplspaceApiGetGitHubToken|replit.goval.api.IReplspaceApiGetGitHubToken|null} [replspaceApiGetGitHubToken] Command replspaceApiGetGitHubToken
                     * @property {replit.goval.api.ReplspaceApiGitHubToken|replit.goval.api.IReplspaceApiGitHubToken|null} [replspaceApiGitHubToken] Command replspaceApiGitHubToken
                     * @property {string|null} [ref] Command ref
                     * @property {Object.<string,string>|null} [traceInfo] Command traceInfo
                     */
    
                    /**
                     * Constructs a new Command.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Command.
                     * @constructor
                     * @param {replit.goval.api.ICommand=} [properties] Properties to set
                     */
                    function Command(properties) {
                        this.traceInfo = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Command channel.
                     * @member {number} channel
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.channel = 0;
    
                    /**
                     * Command session.
                     * @member {number} session
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.session = 0;
    
                    /**
                     * Command openChan.
                     * @member {replit.goval.api.OpenChannel|null|undefined} openChan
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.openChan = null;
    
                    /**
                     * Command openChanRes.
                     * @member {replit.goval.api.OpenChannelRes|null|undefined} openChanRes
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.openChanRes = null;
    
                    /**
                     * Command closeChan.
                     * @member {replit.goval.api.CloseChannel|null|undefined} closeChan
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.closeChan = null;
    
                    /**
                     * Command closeChanRes.
                     * @member {replit.goval.api.CloseChannelRes|null|undefined} closeChanRes
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.closeChanRes = null;
    
                    /**
                     * Command containerState.
                     * @member {replit.goval.api.ContainerState|null|undefined} containerState
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.containerState = null;
    
                    /**
                     * Command portOpen.
                     * @member {replit.goval.api.PortOpen|null|undefined} portOpen
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.portOpen = null;
    
                    /**
                     * Command portClose.
                     * @member {replit.goval.api.PortClose|null|undefined} portClose
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.portClose = null;
    
                    /**
                     * Command toast.
                     * @member {replit.goval.api.Toast|null|undefined} toast
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.toast = null;
    
                    /**
                     * Command protocolError.
                     * @member {replit.goval.api.ProtocolError|null|undefined} protocolError
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.protocolError = null;
    
                    /**
                     * Command redirect.
                     * @member {replit.goval.api.Redirect|null|undefined} redirect
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.redirect = null;
    
                    /**
                     * Command alwaysOn.
                     * @member {replit.goval.api.AlwaysOn|null|undefined} alwaysOn
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.alwaysOn = null;
    
                    /**
                     * Command runMain.
                     * @member {replit.goval.api.RunMain|null|undefined} runMain
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.runMain = null;
    
                    /**
                     * Command clear.
                     * @member {replit.goval.api.Clear|null|undefined} clear
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.clear = null;
    
                    /**
                     * Command eval.
                     * @member {string|null|undefined} eval
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype["eval"] = null;
    
                    /**
                     * Command result.
                     * @member {string|null|undefined} result
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.result = null;
    
                    /**
                     * Command input.
                     * @member {string|null|undefined} input
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.input = null;
    
                    /**
                     * Command output.
                     * @member {string|null|undefined} output
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.output = null;
    
                    /**
                     * Command error.
                     * @member {string|null|undefined} error
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.error = null;
    
                    /**
                     * Command stderr.
                     * @member {string|null|undefined} stderr
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.stderr = null;
    
                    /**
                     * Command log.
                     * @member {string|null|undefined} log
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.log = null;
    
                    /**
                     * Command record.
                     * @member {string|null|undefined} record
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.record = null;
    
                    /**
                     * Command saneTerm.
                     * @member {replit.goval.api.SaneTerm|null|undefined} saneTerm
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.saneTerm = null;
    
                    /**
                     * Command resizeTerm.
                     * @member {replit.goval.api.ResizeTerm|null|undefined} resizeTerm
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.resizeTerm = null;
    
                    /**
                     * Command state.
                     * @member {replit.goval.api.State|null|undefined} state
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.state = null;
    
                    /**
                     * Command ok.
                     * @member {replit.goval.api.OK|null|undefined} ok
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.ok = null;
    
                    /**
                     * Command persist.
                     * @member {replit.goval.api.File|null|undefined} persist
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.persist = null;
    
                    /**
                     * Command persistMirror.
                     * @member {replit.goval.api.File|null|undefined} persistMirror
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.persistMirror = null;
    
                    /**
                     * Command write.
                     * @member {replit.goval.api.File|null|undefined} write
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.write = null;
    
                    /**
                     * Command remove.
                     * @member {replit.goval.api.File|null|undefined} remove
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.remove = null;
    
                    /**
                     * Command move.
                     * @member {replit.goval.api.Move|null|undefined} move
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.move = null;
    
                    /**
                     * Command tryRemove.
                     * @member {replit.goval.api.File|null|undefined} tryRemove
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.tryRemove = null;
    
                    /**
                     * Command mkdir.
                     * @member {replit.goval.api.File|null|undefined} mkdir
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.mkdir = null;
    
                    /**
                     * Command stat.
                     * @member {replit.goval.api.File|null|undefined} stat
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.stat = null;
    
                    /**
                     * Command statRes.
                     * @member {replit.goval.api.StatResult|null|undefined} statRes
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.statRes = null;
    
                    /**
                     * Command transferStart.
                     * @member {replit.goval.api.TransferStart|null|undefined} transferStart
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.transferStart = null;
    
                    /**
                     * Command transferChunk.
                     * @member {replit.goval.api.TransferChunk|null|undefined} transferChunk
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.transferChunk = null;
    
                    /**
                     * Command transferComplete.
                     * @member {replit.goval.api.TransferComplete|null|undefined} transferComplete
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.transferComplete = null;
    
                    /**
                     * Command transferCancel.
                     * @member {replit.goval.api.Transfer|null|undefined} transferCancel
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.transferCancel = null;
    
                    /**
                     * Command transfer.
                     * @member {replit.goval.api.Transfer|null|undefined} transfer
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.transfer = null;
    
                    /**
                     * Command read.
                     * @member {replit.goval.api.File|null|undefined} read
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.read = null;
    
                    /**
                     * Command readdir.
                     * @member {replit.goval.api.File|null|undefined} readdir
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.readdir = null;
    
                    /**
                     * Command files.
                     * @member {replit.goval.api.Files|null|undefined} files
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.files = null;
    
                    /**
                     * Command file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.file = null;
    
                    /**
                     * Command checkChanges.
                     * @member {replit.goval.api.CheckChanges|null|undefined} checkChanges
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.checkChanges = null;
    
                    /**
                     * Command changedFiles.
                     * @member {replit.goval.api.Files|null|undefined} changedFiles
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.changedFiles = null;
    
                    /**
                     * Command lintResults.
                     * @member {replit.goval.api.LintResults|null|undefined} lintResults
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.lintResults = null;
    
                    /**
                     * Command runContainedTest.
                     * @member {replit.goval.api.ContainedTest|null|undefined} runContainedTest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.runContainedTest = null;
    
                    /**
                     * Command testResult.
                     * @member {replit.goval.api.TestResult|null|undefined} testResult
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.testResult = null;
    
                    /**
                     * Command debuggerStart.
                     * @member {string|null|undefined} debuggerStart
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debuggerStart = null;
    
                    /**
                     * Command debuggerStep.
                     * @member {replit.goval.api.RunMain|null|undefined} debuggerStep
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debuggerStep = null;
    
                    /**
                     * Command debuggerStatus.
                     * @member {replit.goval.api.DebugStatus|null|undefined} debuggerStatus
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debuggerStatus = null;
    
                    /**
                     * Command ensurePackages.
                     * @member {replit.goval.api.EnsurePackages|null|undefined} ensurePackages
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.ensurePackages = null;
    
                    /**
                     * Command ping.
                     * @member {replit.goval.api.Ping|null|undefined} ping
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.ping = null;
    
                    /**
                     * Command pong.
                     * @member {replit.goval.api.Pong|null|undefined} pong
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.pong = null;
    
                    /**
                     * Command hello.
                     * @member {replit.goval.api.Hello|null|undefined} hello
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.hello = null;
    
                    /**
                     * Command goodbye.
                     * @member {replit.goval.api.Goodbye|null|undefined} goodbye
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.goodbye = null;
    
                    /**
                     * Command proxyGoingAway.
                     * @member {replit.goval.api.ProxyGoingAway|null|undefined} proxyGoingAway
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.proxyGoingAway = null;
    
                    /**
                     * Command hint.
                     * @member {replit.goval.api.Hint|null|undefined} hint
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.hint = null;
    
                    /**
                     * Command connect.
                     * @member {replit.goval.api.Connect|null|undefined} connect
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.connect = null;
    
                    /**
                     * Command send.
                     * @member {replit.goval.api.Send|null|undefined} send
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.send = null;
    
                    /**
                     * Command recv.
                     * @member {replit.goval.api.Recv|null|undefined} recv
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.recv = null;
    
                    /**
                     * Command disconnect.
                     * @member {replit.goval.api.Disconnect|null|undefined} disconnect
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.disconnect = null;
    
                    /**
                     * Command fileAuthReq.
                     * @member {replit.goval.api.FileAuthReq|null|undefined} fileAuthReq
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fileAuthReq = null;
    
                    /**
                     * Command fileAuthRes.
                     * @member {replit.goval.api.FileAuthRes|null|undefined} fileAuthRes
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fileAuthRes = null;
    
                    /**
                     * Command mutliFileAuthRes.
                     * @member {replit.goval.api.MultiFileAuthRes|null|undefined} mutliFileAuthRes
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.mutliFileAuthRes = null;
    
                    /**
                     * Command listObjects.
                     * @member {replit.goval.api.ListObjects|null|undefined} listObjects
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.listObjects = null;
    
                    /**
                     * Command listObjectsResp.
                     * @member {replit.goval.api.ListObjectsResp|null|undefined} listObjectsResp
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.listObjectsResp = null;
    
                    /**
                     * Command ot.
                     * @member {replit.goval.api.OTPacket|null|undefined} ot
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.ot = null;
    
                    /**
                     * Command otstatus.
                     * @member {replit.goval.api.OTStatus|null|undefined} otstatus
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otstatus = null;
    
                    /**
                     * Command otLinkFile.
                     * @member {replit.goval.api.OTLinkFile|null|undefined} otLinkFile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otLinkFile = null;
    
                    /**
                     * Command otLinkFileResponse.
                     * @member {replit.goval.api.OTLinkFileResponse|null|undefined} otLinkFileResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otLinkFileResponse = null;
    
                    /**
                     * Command otNewCursor.
                     * @member {replit.goval.api.OTCursor|null|undefined} otNewCursor
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otNewCursor = null;
    
                    /**
                     * Command otDeleteCursor.
                     * @member {replit.goval.api.OTCursor|null|undefined} otDeleteCursor
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otDeleteCursor = null;
    
                    /**
                     * Command otFetchRequest.
                     * @member {replit.goval.api.OTFetchRequest|null|undefined} otFetchRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otFetchRequest = null;
    
                    /**
                     * Command otFetchResponse.
                     * @member {replit.goval.api.OTFetchResponse|null|undefined} otFetchResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otFetchResponse = null;
    
                    /**
                     * Command otTransformSelectionRequest.
                     * @member {replit.goval.api.OTTransformSelectionRequest|null|undefined} otTransformSelectionRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otTransformSelectionRequest = null;
    
                    /**
                     * Command otTransformSelectionResponse.
                     * @member {replit.goval.api.OTTransformSelectionResponse|null|undefined} otTransformSelectionResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.otTransformSelectionResponse = null;
    
                    /**
                     * Command flush.
                     * @member {replit.goval.api.Flush|null|undefined} flush
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.flush = null;
    
                    /**
                     * Command debug.
                     * @member {replit.goval.api.Debug|null|undefined} debug
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debug = null;
    
                    /**
                     * Command startVCR.
                     * @member {replit.goval.api.StartVCR|null|undefined} startVCR
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.startVCR = null;
    
                    /**
                     * Command readVCR.
                     * @member {replit.goval.api.ReadVCR|null|undefined} readVCR
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.readVCR = null;
    
                    /**
                     * Command VCRLog.
                     * @member {replit.goval.api.VCRLog|null|undefined} VCRLog
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.VCRLog = null;
    
                    /**
                     * Command auth.
                     * @member {replit.goval.api.Auth|null|undefined} auth
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.auth = null;
    
                    /**
                     * Command execInfo.
                     * @member {replit.goval.api.ExecInfo|null|undefined} execInfo
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.execInfo = null;
    
                    /**
                     * Command subscribeFile.
                     * @member {replit.goval.api.SubscribeFile|null|undefined} subscribeFile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.subscribeFile = null;
    
                    /**
                     * Command fileEvent.
                     * @member {replit.goval.api.FileEvent|null|undefined} fileEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fileEvent = null;
    
                    /**
                     * Command roster.
                     * @member {replit.goval.api.Roster|null|undefined} roster
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.roster = null;
    
                    /**
                     * Command join.
                     * @member {replit.goval.api.User|null|undefined} join
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.join = null;
    
                    /**
                     * Command part.
                     * @member {replit.goval.api.User|null|undefined} part
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.part = null;
    
                    /**
                     * Command openFile.
                     * @member {replit.goval.api.OpenFile|null|undefined} openFile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.openFile = null;
    
                    /**
                     * Command fileOpened.
                     * @member {replit.goval.api.FileOpened|null|undefined} fileOpened
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fileOpened = null;
    
                    /**
                     * Command followUser.
                     * @member {replit.goval.api.FollowUser|null|undefined} followUser
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.followUser = null;
    
                    /**
                     * Command unfollowUser.
                     * @member {replit.goval.api.UnfollowUser|null|undefined} unfollowUser
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.unfollowUser = null;
    
                    /**
                     * Command updateSessionTimestamp.
                     * @member {replit.goval.api.UpdateSessionTimestamp|null|undefined} updateSessionTimestamp
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.updateSessionTimestamp = null;
    
                    /**
                     * Command sessionTimestampUpdated.
                     * @member {replit.goval.api.SessionTimestampUpdated|null|undefined} sessionTimestampUpdated
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.sessionTimestampUpdated = null;
    
                    /**
                     * Command exec.
                     * @member {replit.goval.api.Exec|null|undefined} exec
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.exec = null;
    
                    /**
                     * Command packageSearch.
                     * @member {replit.goval.api.PackageSearch|null|undefined} packageSearch
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageSearch = null;
    
                    /**
                     * Command packageSearchResp.
                     * @member {replit.goval.api.PackageSearchResp|null|undefined} packageSearchResp
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageSearchResp = null;
    
                    /**
                     * Command packageInfo.
                     * @member {replit.goval.api.PackageInfo|null|undefined} packageInfo
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageInfo = null;
    
                    /**
                     * Command packageInfoResp.
                     * @member {replit.goval.api.PackageInfoResp|null|undefined} packageInfoResp
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageInfoResp = null;
    
                    /**
                     * Command packageAdd.
                     * @member {replit.goval.api.PackageAdd|null|undefined} packageAdd
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageAdd = null;
    
                    /**
                     * Command packageRemove.
                     * @member {replit.goval.api.PackageRemove|null|undefined} packageRemove
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageRemove = null;
    
                    /**
                     * Command packageInstall.
                     * @member {replit.goval.api.PackageInstall|null|undefined} packageInstall
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageInstall = null;
    
                    /**
                     * Command packageListSpecfile.
                     * @member {replit.goval.api.PackageListSpecfile|null|undefined} packageListSpecfile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageListSpecfile = null;
    
                    /**
                     * Command packageListSpecfileResp.
                     * @member {replit.goval.api.PackageListSpecfileResp|null|undefined} packageListSpecfileResp
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageListSpecfileResp = null;
    
                    /**
                     * Command packageCacheSave.
                     * @member {replit.goval.api.PackageCacheSave|null|undefined} packageCacheSave
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.packageCacheSave = null;
    
                    /**
                     * Command chatMessage.
                     * @member {replit.goval.api.ChatMessage|null|undefined} chatMessage
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.chatMessage = null;
    
                    /**
                     * Command chatTyping.
                     * @member {replit.goval.api.ChatTyping|null|undefined} chatTyping
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.chatTyping = null;
    
                    /**
                     * Command chatScrollback.
                     * @member {replit.goval.api.ChatScrollback|null|undefined} chatScrollback
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.chatScrollback = null;
    
                    /**
                     * Command fsSnapshot.
                     * @member {replit.goval.api.FSSnapshot|null|undefined} fsSnapshot
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fsSnapshot = null;
    
                    /**
                     * Command fsSnapshotEvent.
                     * @member {replit.goval.api.FSSnapshotEvent|null|undefined} fsSnapshotEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fsSnapshotEvent = null;
    
                    /**
                     * Command fsTakeLock.
                     * @member {replit.goval.api.FSLock|null|undefined} fsTakeLock
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fsTakeLock = null;
    
                    /**
                     * Command fsReleaseLock.
                     * @member {replit.goval.api.FSLock|null|undefined} fsReleaseLock
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.fsReleaseLock = null;
    
                    /**
                     * Command hasCap.
                     * @member {boolean|null|undefined} hasCap
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.hasCap = null;
    
                    /**
                     * Command snapshotEvent.
                     * @member {replit.goval.api.SnapshotEvent|null|undefined} snapshotEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.snapshotEvent = null;
    
                    /**
                     * Command NoninteractiveFSChangeEvent.
                     * @member {boolean|null|undefined} NoninteractiveFSChangeEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.NoninteractiveFSChangeEvent = null;
    
                    /**
                     * Command pid1Config.
                     * @member {replit.goval.api.Pid1Config|null|undefined} pid1Config
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.pid1Config = null;
    
                    /**
                     * Command metrics.
                     * @member {replit.goval.api.Metrics|null|undefined} metrics
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.metrics = null;
    
                    /**
                     * Command bootStatus.
                     * @member {replit.goval.api.BootStatus|null|undefined} bootStatus
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.bootStatus = null;
    
                    /**
                     * Command readMetaRequest.
                     * @member {replit.goval.api.ReadMetaRequest|null|undefined} readMetaRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.readMetaRequest = null;
    
                    /**
                     * Command readMetaResponse.
                     * @member {replit.goval.api.ReadMetaResponse|null|undefined} readMetaResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.readMetaResponse = null;
    
                    /**
                     * Command writeMetaRequest.
                     * @member {replit.goval.api.WriteMetaRequest|null|undefined} writeMetaRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.writeMetaRequest = null;
    
                    /**
                     * Command writeMetaResponse.
                     * @member {replit.goval.api.WriteMetaResponse|null|undefined} writeMetaResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.writeMetaResponse = null;
    
                    /**
                     * Command appendMetaRequest.
                     * @member {replit.goval.api.AppendMetaRequest|null|undefined} appendMetaRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.appendMetaRequest = null;
    
                    /**
                     * Command appendMetaResponse.
                     * @member {replit.goval.api.AppendMetaResponse|null|undefined} appendMetaResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.appendMetaResponse = null;
    
                    /**
                     * Command audio.
                     * @member {replit.goval.api.Audio|null|undefined} audio
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.audio = null;
    
                    /**
                     * Command pprofRequest.
                     * @member {replit.goval.api.PprofRequest|null|undefined} pprofRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.pprofRequest = null;
    
                    /**
                     * Command pprofResponse.
                     * @member {replit.goval.api.PprofResponse|null|undefined} pprofResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.pprofResponse = null;
    
                    /**
                     * Command audio2.
                     * @member {replit.goval.api.Audio2|null|undefined} audio2
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.audio2 = null;
    
                    /**
                     * Command PTYConfig.
                     * @member {replit.goval.api.PTYConfig|null|undefined} PTYConfig
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.PTYConfig = null;
    
                    /**
                     * Command debugMain.
                     * @member {replit.goval.api.DebugMain|null|undefined} debugMain
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugMain = null;
    
                    /**
                     * Command debugState.
                     * @member {replit.goval.api.DebugState|null|undefined} debugState
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugState = null;
    
                    /**
                     * Command debugMainReply.
                     * @member {replit.goval.api.DebugMainReply|null|undefined} debugMainReply
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugMainReply = null;
    
                    /**
                     * Command debugInput.
                     * @member {replit.goval.api.DebugInput|null|undefined} debugInput
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugInput = null;
    
                    /**
                     * Command debugOutput.
                     * @member {replit.goval.api.DebugOutput|null|undefined} debugOutput
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugOutput = null;
    
                    /**
                     * Command debugStop.
                     * @member {replit.goval.api.DebugStop|null|undefined} debugStop
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugStop = null;
    
                    /**
                     * Command debugLeave.
                     * @member {replit.goval.api.DebugLeave|null|undefined} debugLeave
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugLeave = null;
    
                    /**
                     * Command debugSessions.
                     * @member {replit.goval.api.DebugSessions|null|undefined} debugSessions
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugSessions = null;
    
                    /**
                     * Command debugAddBreakpointRequest.
                     * @member {replit.goval.api.DebugAddBreakpointRequest|null|undefined} debugAddBreakpointRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugAddBreakpointRequest = null;
    
                    /**
                     * Command debugUpdateBreakpointRequest.
                     * @member {replit.goval.api.DebugUpdateBreakpointRequest|null|undefined} debugUpdateBreakpointRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugUpdateBreakpointRequest = null;
    
                    /**
                     * Command debugRemoveBreakpointRequest.
                     * @member {replit.goval.api.DebugRemoveBreakpointRequest|null|undefined} debugRemoveBreakpointRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugRemoveBreakpointRequest = null;
    
                    /**
                     * Command debugBreakpointEvent.
                     * @member {replit.goval.api.DebugBreakpointEvent|null|undefined} debugBreakpointEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.debugBreakpointEvent = null;
    
                    /**
                     * Command dotReplitGetRequest.
                     * @member {replit.goval.api.DotReplitGetRequest|null|undefined} dotReplitGetRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.dotReplitGetRequest = null;
    
                    /**
                     * Command dotReplitGetResponse.
                     * @member {replit.goval.api.DotReplitGetResponse|null|undefined} dotReplitGetResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.dotReplitGetResponse = null;
    
                    /**
                     * Command runConfigGetRequest.
                     * @member {replit.goval.api.RunConfigGetRequest|null|undefined} runConfigGetRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.runConfigGetRequest = null;
    
                    /**
                     * Command runConfigGetResponse.
                     * @member {replit.goval.api.RunConfigGetResponse|null|undefined} runConfigGetResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.runConfigGetResponse = null;
    
                    /**
                     * Command dotReplitUpdateRequest.
                     * @member {replit.goval.api.DotReplitUpdateRequest|null|undefined} dotReplitUpdateRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.dotReplitUpdateRequest = null;
    
                    /**
                     * Command dotReplitUpdateResponse.
                     * @member {replit.goval.api.DotReplitUpdateResponse|null|undefined} dotReplitUpdateResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.dotReplitUpdateResponse = null;
    
                    /**
                     * Command startLSP.
                     * @member {replit.goval.api.StartLSP|null|undefined} startLSP
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.startLSP = null;
    
                    /**
                     * Command firewallDenied.
                     * @member {replit.goval.api.FirewallDenied|null|undefined} firewallDenied
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.firewallDenied = null;
    
                    /**
                     * Command nixPackageAddRequest.
                     * @member {replit.goval.api.NixPackageAddRequest|null|undefined} nixPackageAddRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageAddRequest = null;
    
                    /**
                     * Command nixPackageAddResponse.
                     * @member {replit.goval.api.NixPackageAddResponse|null|undefined} nixPackageAddResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageAddResponse = null;
    
                    /**
                     * Command nixPackageRemoveRequest.
                     * @member {replit.goval.api.NixPackageRemoveRequest|null|undefined} nixPackageRemoveRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageRemoveRequest = null;
    
                    /**
                     * Command nixPackageRemoveResponse.
                     * @member {replit.goval.api.NixPackageRemoveResponse|null|undefined} nixPackageRemoveResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageRemoveResponse = null;
    
                    /**
                     * Command nixPackageListRequest.
                     * @member {replit.goval.api.NixPackageListRequest|null|undefined} nixPackageListRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageListRequest = null;
    
                    /**
                     * Command nixPackageListResponse.
                     * @member {replit.goval.api.NixPackageListResponse|null|undefined} nixPackageListResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageListResponse = null;
    
                    /**
                     * Command nixChannelsRequest.
                     * @member {replit.goval.api.NixChannelsRequest|null|undefined} nixChannelsRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixChannelsRequest = null;
    
                    /**
                     * Command nixChannelsResponse.
                     * @member {replit.goval.api.NixChannelsResponse|null|undefined} nixChannelsResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixChannelsResponse = null;
    
                    /**
                     * Command nixChannelLatestStableRequest.
                     * @member {replit.goval.api.NixChannelLatestStableRequest|null|undefined} nixChannelLatestStableRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixChannelLatestStableRequest = null;
    
                    /**
                     * Command nixChannelLatestStableResponse.
                     * @member {replit.goval.api.NixChannelLatestStableResponse|null|undefined} nixChannelLatestStableResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixChannelLatestStableResponse = null;
    
                    /**
                     * Command nixPackageSearchRequest.
                     * @member {replit.goval.api.NixPackageSearchRequest|null|undefined} nixPackageSearchRequest
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageSearchRequest = null;
    
                    /**
                     * Command nixPackageSearchResponse.
                     * @member {replit.goval.api.NixPackageSearchResponse|null|undefined} nixPackageSearchResponse
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.nixPackageSearchResponse = null;
    
                    /**
                     * Command userEvent.
                     * @member {replit.goval.api.UserEvent|null|undefined} userEvent
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.userEvent = null;
    
                    /**
                     * Command replspaceApiOpenFile.
                     * @member {replit.goval.api.ReplspaceApiOpenFile|null|undefined} replspaceApiOpenFile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.replspaceApiOpenFile = null;
    
                    /**
                     * Command replspaceApiCloseFile.
                     * @member {replit.goval.api.ReplspaceApiCloseFile|null|undefined} replspaceApiCloseFile
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.replspaceApiCloseFile = null;
    
                    /**
                     * Command replspaceApiGetGitHubToken.
                     * @member {replit.goval.api.ReplspaceApiGetGitHubToken|null|undefined} replspaceApiGetGitHubToken
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.replspaceApiGetGitHubToken = null;
    
                    /**
                     * Command replspaceApiGitHubToken.
                     * @member {replit.goval.api.ReplspaceApiGitHubToken|null|undefined} replspaceApiGitHubToken
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.replspaceApiGitHubToken = null;
    
                    /**
                     * Command ref.
                     * @member {string} ref
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.ref = "";
    
                    /**
                     * Command traceInfo.
                     * @member {Object.<string,string>} traceInfo
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Command.prototype.traceInfo = $util.emptyObject;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Command body.
                     * @member {"openChan"|"openChanRes"|"closeChan"|"closeChanRes"|"containerState"|"portOpen"|"portClose"|"toast"|"protocolError"|"redirect"|"alwaysOn"|"runMain"|"clear"|"eval"|"result"|"input"|"output"|"error"|"stderr"|"log"|"record"|"saneTerm"|"resizeTerm"|"state"|"ok"|"persist"|"persistMirror"|"write"|"remove"|"move"|"tryRemove"|"mkdir"|"stat"|"statRes"|"transferStart"|"transferChunk"|"transferComplete"|"transferCancel"|"transfer"|"read"|"readdir"|"files"|"file"|"checkChanges"|"changedFiles"|"lintResults"|"runContainedTest"|"testResult"|"debuggerStart"|"debuggerStep"|"debuggerStatus"|"ensurePackages"|"ping"|"pong"|"hello"|"goodbye"|"proxyGoingAway"|"hint"|"connect"|"send"|"recv"|"disconnect"|"fileAuthReq"|"fileAuthRes"|"mutliFileAuthRes"|"listObjects"|"listObjectsResp"|"ot"|"otstatus"|"otLinkFile"|"otLinkFileResponse"|"otNewCursor"|"otDeleteCursor"|"otFetchRequest"|"otFetchResponse"|"otTransformSelectionRequest"|"otTransformSelectionResponse"|"flush"|"debug"|"startVCR"|"readVCR"|"VCRLog"|"auth"|"execInfo"|"subscribeFile"|"fileEvent"|"roster"|"join"|"part"|"openFile"|"fileOpened"|"followUser"|"unfollowUser"|"updateSessionTimestamp"|"sessionTimestampUpdated"|"exec"|"packageSearch"|"packageSearchResp"|"packageInfo"|"packageInfoResp"|"packageAdd"|"packageRemove"|"packageInstall"|"packageListSpecfile"|"packageListSpecfileResp"|"packageCacheSave"|"chatMessage"|"chatTyping"|"chatScrollback"|"fsSnapshot"|"fsSnapshotEvent"|"fsTakeLock"|"fsReleaseLock"|"hasCap"|"snapshotEvent"|"NoninteractiveFSChangeEvent"|"pid1Config"|"metrics"|"bootStatus"|"readMetaRequest"|"readMetaResponse"|"writeMetaRequest"|"writeMetaResponse"|"appendMetaRequest"|"appendMetaResponse"|"audio"|"pprofRequest"|"pprofResponse"|"audio2"|"PTYConfig"|"debugMain"|"debugState"|"debugMainReply"|"debugInput"|"debugOutput"|"debugStop"|"debugLeave"|"debugSessions"|"debugAddBreakpointRequest"|"debugUpdateBreakpointRequest"|"debugRemoveBreakpointRequest"|"debugBreakpointEvent"|"dotReplitGetRequest"|"dotReplitGetResponse"|"runConfigGetRequest"|"runConfigGetResponse"|"dotReplitUpdateRequest"|"dotReplitUpdateResponse"|"startLSP"|"firewallDenied"|"nixPackageAddRequest"|"nixPackageAddResponse"|"nixPackageRemoveRequest"|"nixPackageRemoveResponse"|"nixPackageListRequest"|"nixPackageListResponse"|"nixChannelsRequest"|"nixChannelsResponse"|"nixChannelLatestStableRequest"|"nixChannelLatestStableResponse"|"nixPackageSearchRequest"|"nixPackageSearchResponse"|"userEvent"|"replspaceApiOpenFile"|"replspaceApiCloseFile"|"replspaceApiGetGitHubToken"|"replspaceApiGitHubToken"|undefined} body
                     * @memberof replit.goval.api.Command
                     * @instance
                     */
                    Object.defineProperty(Command.prototype, "body", {
                        get: $util.oneOfGetter($oneOfFields = ["openChan", "openChanRes", "closeChan", "closeChanRes", "containerState", "portOpen", "portClose", "toast", "protocolError", "redirect", "alwaysOn", "runMain", "clear", "eval", "result", "input", "output", "error", "stderr", "log", "record", "saneTerm", "resizeTerm", "state", "ok", "persist", "persistMirror", "write", "remove", "move", "tryRemove", "mkdir", "stat", "statRes", "transferStart", "transferChunk", "transferComplete", "transferCancel", "transfer", "read", "readdir", "files", "file", "checkChanges", "changedFiles", "lintResults", "runContainedTest", "testResult", "debuggerStart", "debuggerStep", "debuggerStatus", "ensurePackages", "ping", "pong", "hello", "goodbye", "proxyGoingAway", "hint", "connect", "send", "recv", "disconnect", "fileAuthReq", "fileAuthRes", "mutliFileAuthRes", "listObjects", "listObjectsResp", "ot", "otstatus", "otLinkFile", "otLinkFileResponse", "otNewCursor", "otDeleteCursor", "otFetchRequest", "otFetchResponse", "otTransformSelectionRequest", "otTransformSelectionResponse", "flush", "debug", "startVCR", "readVCR", "VCRLog", "auth", "execInfo", "subscribeFile", "fileEvent", "roster", "join", "part", "openFile", "fileOpened", "followUser", "unfollowUser", "updateSessionTimestamp", "sessionTimestampUpdated", "exec", "packageSearch", "packageSearchResp", "packageInfo", "packageInfoResp", "packageAdd", "packageRemove", "packageInstall", "packageListSpecfile", "packageListSpecfileResp", "packageCacheSave", "chatMessage", "chatTyping", "chatScrollback", "fsSnapshot", "fsSnapshotEvent", "fsTakeLock", "fsReleaseLock", "hasCap", "snapshotEvent", "NoninteractiveFSChangeEvent", "pid1Config", "metrics", "bootStatus", "readMetaRequest", "readMetaResponse", "writeMetaRequest", "writeMetaResponse", "appendMetaRequest", "appendMetaResponse", "audio", "pprofRequest", "pprofResponse", "audio2", "PTYConfig", "debugMain", "debugState", "debugMainReply", "debugInput", "debugOutput", "debugStop", "debugLeave", "debugSessions", "debugAddBreakpointRequest", "debugUpdateBreakpointRequest", "debugRemoveBreakpointRequest", "debugBreakpointEvent", "dotReplitGetRequest", "dotReplitGetResponse", "runConfigGetRequest", "runConfigGetResponse", "dotReplitUpdateRequest", "dotReplitUpdateResponse", "startLSP", "firewallDenied", "nixPackageAddRequest", "nixPackageAddResponse", "nixPackageRemoveRequest", "nixPackageRemoveResponse", "nixPackageListRequest", "nixPackageListResponse", "nixChannelsRequest", "nixChannelsResponse", "nixChannelLatestStableRequest", "nixChannelLatestStableResponse", "nixPackageSearchRequest", "nixPackageSearchResponse", "userEvent", "replspaceApiOpenFile", "replspaceApiCloseFile", "replspaceApiGetGitHubToken", "replspaceApiGitHubToken"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Command instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {replit.goval.api.ICommand=} [properties] Properties to set
                     * @returns {replit.goval.api.Command} Command instance
                     */
                    Command.create = function create(properties) {
                        return Command.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Command message. Does not implicitly {@link replit.goval.api.Command.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {replit.goval.api.Command} message Command message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Command.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.channel);
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.session);
                        if (message.openChan != null && Object.hasOwnProperty.call(message, "openChan"))
                            $root.replit.goval.api.OpenChannel.encode(message.openChan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.openChanRes != null && Object.hasOwnProperty.call(message, "openChanRes"))
                            $root.replit.goval.api.OpenChannelRes.encode(message.openChanRes, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.closeChan != null && Object.hasOwnProperty.call(message, "closeChan"))
                            $root.replit.goval.api.CloseChannel.encode(message.closeChan, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.closeChanRes != null && Object.hasOwnProperty.call(message, "closeChanRes"))
                            $root.replit.goval.api.CloseChannelRes.encode(message.closeChanRes, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.containerState != null && Object.hasOwnProperty.call(message, "containerState"))
                            $root.replit.goval.api.ContainerState.encode(message.containerState, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.portOpen != null && Object.hasOwnProperty.call(message, "portOpen"))
                            $root.replit.goval.api.PortOpen.encode(message.portOpen, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.toast != null && Object.hasOwnProperty.call(message, "toast"))
                            $root.replit.goval.api.Toast.encode(message.toast, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.redirect != null && Object.hasOwnProperty.call(message, "redirect"))
                            $root.replit.goval.api.Redirect.encode(message.redirect, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.alwaysOn != null && Object.hasOwnProperty.call(message, "alwaysOn"))
                            $root.replit.goval.api.AlwaysOn.encode(message.alwaysOn, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                        if (message.runMain != null && Object.hasOwnProperty.call(message, "runMain"))
                            $root.replit.goval.api.RunMain.encode(message.runMain, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                        if (message.clear != null && Object.hasOwnProperty.call(message, "clear"))
                            $root.replit.goval.api.Clear.encode(message.clear, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message["eval"] != null && Object.hasOwnProperty.call(message, "eval"))
                            writer.uint32(/* id 20, wireType 2 =*/162).string(message["eval"]);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 21, wireType 2 =*/170).string(message.result);
                        if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                            writer.uint32(/* id 22, wireType 2 =*/178).string(message.input);
                        if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                            writer.uint32(/* id 23, wireType 2 =*/186).string(message.output);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 24, wireType 2 =*/194).string(message.error);
                        if (message.saneTerm != null && Object.hasOwnProperty.call(message, "saneTerm"))
                            $root.replit.goval.api.SaneTerm.encode(message.saneTerm, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                        if (message.resizeTerm != null && Object.hasOwnProperty.call(message, "resizeTerm"))
                            $root.replit.goval.api.ResizeTerm.encode(message.resizeTerm, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 28, wireType 0 =*/224).int32(message.state);
                        if (message.ok != null && Object.hasOwnProperty.call(message, "ok"))
                            $root.replit.goval.api.OK.encode(message.ok, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
                        if (message.persist != null && Object.hasOwnProperty.call(message, "persist"))
                            $root.replit.goval.api.File.encode(message.persist, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
                        if (message.write != null && Object.hasOwnProperty.call(message, "write"))
                            $root.replit.goval.api.File.encode(message.write, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
                        if (message.remove != null && Object.hasOwnProperty.call(message, "remove"))
                            $root.replit.goval.api.File.encode(message.remove, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
                        if (message.move != null && Object.hasOwnProperty.call(message, "move"))
                            $root.replit.goval.api.Move.encode(message.move, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
                        if (message.read != null && Object.hasOwnProperty.call(message, "read"))
                            $root.replit.goval.api.File.encode(message.read, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                        if (message.tryRemove != null && Object.hasOwnProperty.call(message, "tryRemove"))
                            $root.replit.goval.api.File.encode(message.tryRemove, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
                        if (message.readdir != null && Object.hasOwnProperty.call(message, "readdir"))
                            $root.replit.goval.api.File.encode(message.readdir, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
                        if (message.files != null && Object.hasOwnProperty.call(message, "files"))
                            $root.replit.goval.api.Files.encode(message.files, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
                        if (message.mkdir != null && Object.hasOwnProperty.call(message, "mkdir"))
                            $root.replit.goval.api.File.encode(message.mkdir, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
                        if (message.persistMirror != null && Object.hasOwnProperty.call(message, "persistMirror"))
                            $root.replit.goval.api.File.encode(message.persistMirror, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
                        if (message.checkChanges != null && Object.hasOwnProperty.call(message, "checkChanges"))
                            $root.replit.goval.api.CheckChanges.encode(message.checkChanges, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
                        if (message.changedFiles != null && Object.hasOwnProperty.call(message, "changedFiles"))
                            $root.replit.goval.api.Files.encode(message.changedFiles, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
                        if (message.lintResults != null && Object.hasOwnProperty.call(message, "lintResults"))
                            $root.replit.goval.api.LintResults.encode(message.lintResults, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
                        if (message.protocolError != null && Object.hasOwnProperty.call(message, "protocolError"))
                            $root.replit.goval.api.ProtocolError.encode(message.protocolError, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
                        if (message.stderr != null && Object.hasOwnProperty.call(message, "stderr"))
                            writer.uint32(/* id 46, wireType 2 =*/370).string(message.stderr);
                        if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                            writer.uint32(/* id 47, wireType 2 =*/378).string(message.log);
                        if (message.portClose != null && Object.hasOwnProperty.call(message, "portClose"))
                            $root.replit.goval.api.PortClose.encode(message.portClose, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
                        if (message.runContainedTest != null && Object.hasOwnProperty.call(message, "runContainedTest"))
                            $root.replit.goval.api.ContainedTest.encode(message.runContainedTest, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
                        if (message.testResult != null && Object.hasOwnProperty.call(message, "testResult"))
                            $root.replit.goval.api.TestResult.encode(message.testResult, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
                        if (message.debuggerStart != null && Object.hasOwnProperty.call(message, "debuggerStart"))
                            writer.uint32(/* id 90, wireType 2 =*/722).string(message.debuggerStart);
                        if (message.debuggerStep != null && Object.hasOwnProperty.call(message, "debuggerStep"))
                            $root.replit.goval.api.RunMain.encode(message.debuggerStep, writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
                        if (message.debuggerStatus != null && Object.hasOwnProperty.call(message, "debuggerStatus"))
                            $root.replit.goval.api.DebugStatus.encode(message.debuggerStatus, writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
                        if (message.ensurePackages != null && Object.hasOwnProperty.call(message, "ensurePackages"))
                            $root.replit.goval.api.EnsurePackages.encode(message.ensurePackages, writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
                        if (message.ping != null && Object.hasOwnProperty.call(message, "ping"))
                            $root.replit.goval.api.Ping.encode(message.ping, writer.uint32(/* id 120, wireType 2 =*/962).fork()).ldelim();
                        if (message.pong != null && Object.hasOwnProperty.call(message, "pong"))
                            $root.replit.goval.api.Pong.encode(message.pong, writer.uint32(/* id 121, wireType 2 =*/970).fork()).ldelim();
                        if (message.hello != null && Object.hasOwnProperty.call(message, "hello"))
                            $root.replit.goval.api.Hello.encode(message.hello, writer.uint32(/* id 122, wireType 2 =*/978).fork()).ldelim();
                        if (message.goodbye != null && Object.hasOwnProperty.call(message, "goodbye"))
                            $root.replit.goval.api.Goodbye.encode(message.goodbye, writer.uint32(/* id 123, wireType 2 =*/986).fork()).ldelim();
                        if (message.proxyGoingAway != null && Object.hasOwnProperty.call(message, "proxyGoingAway"))
                            $root.replit.goval.api.ProxyGoingAway.encode(message.proxyGoingAway, writer.uint32(/* id 124, wireType 2 =*/994).fork()).ldelim();
                        if (message.hint != null && Object.hasOwnProperty.call(message, "hint"))
                            $root.replit.goval.api.Hint.encode(message.hint, writer.uint32(/* id 130, wireType 2 =*/1042).fork()).ldelim();
                        if (message.connect != null && Object.hasOwnProperty.call(message, "connect"))
                            $root.replit.goval.api.Connect.encode(message.connect, writer.uint32(/* id 150, wireType 2 =*/1202).fork()).ldelim();
                        if (message.send != null && Object.hasOwnProperty.call(message, "send"))
                            $root.replit.goval.api.Send.encode(message.send, writer.uint32(/* id 151, wireType 2 =*/1210).fork()).ldelim();
                        if (message.recv != null && Object.hasOwnProperty.call(message, "recv"))
                            $root.replit.goval.api.Recv.encode(message.recv, writer.uint32(/* id 152, wireType 2 =*/1218).fork()).ldelim();
                        if (message.disconnect != null && Object.hasOwnProperty.call(message, "disconnect"))
                            $root.replit.goval.api.Disconnect.encode(message.disconnect, writer.uint32(/* id 153, wireType 2 =*/1226).fork()).ldelim();
                        if (message.fileAuthReq != null && Object.hasOwnProperty.call(message, "fileAuthReq"))
                            $root.replit.goval.api.FileAuthReq.encode(message.fileAuthReq, writer.uint32(/* id 200, wireType 2 =*/1602).fork()).ldelim();
                        if (message.fileAuthRes != null && Object.hasOwnProperty.call(message, "fileAuthRes"))
                            $root.replit.goval.api.FileAuthRes.encode(message.fileAuthRes, writer.uint32(/* id 201, wireType 2 =*/1610).fork()).ldelim();
                        if (message.mutliFileAuthRes != null && Object.hasOwnProperty.call(message, "mutliFileAuthRes"))
                            $root.replit.goval.api.MultiFileAuthRes.encode(message.mutliFileAuthRes, writer.uint32(/* id 202, wireType 2 =*/1618).fork()).ldelim();
                        if (message.listObjects != null && Object.hasOwnProperty.call(message, "listObjects"))
                            $root.replit.goval.api.ListObjects.encode(message.listObjects, writer.uint32(/* id 205, wireType 2 =*/1642).fork()).ldelim();
                        if (message.listObjectsResp != null && Object.hasOwnProperty.call(message, "listObjectsResp"))
                            $root.replit.goval.api.ListObjectsResp.encode(message.listObjectsResp, writer.uint32(/* id 206, wireType 2 =*/1650).fork()).ldelim();
                        if (message.ot != null && Object.hasOwnProperty.call(message, "ot"))
                            $root.replit.goval.api.OTPacket.encode(message.ot, writer.uint32(/* id 220, wireType 2 =*/1762).fork()).ldelim();
                        if (message.otstatus != null && Object.hasOwnProperty.call(message, "otstatus"))
                            $root.replit.goval.api.OTStatus.encode(message.otstatus, writer.uint32(/* id 221, wireType 2 =*/1770).fork()).ldelim();
                        if (message.otLinkFile != null && Object.hasOwnProperty.call(message, "otLinkFile"))
                            $root.replit.goval.api.OTLinkFile.encode(message.otLinkFile, writer.uint32(/* id 222, wireType 2 =*/1778).fork()).ldelim();
                        if (message.otNewCursor != null && Object.hasOwnProperty.call(message, "otNewCursor"))
                            $root.replit.goval.api.OTCursor.encode(message.otNewCursor, writer.uint32(/* id 223, wireType 2 =*/1786).fork()).ldelim();
                        if (message.otDeleteCursor != null && Object.hasOwnProperty.call(message, "otDeleteCursor"))
                            $root.replit.goval.api.OTCursor.encode(message.otDeleteCursor, writer.uint32(/* id 224, wireType 2 =*/1794).fork()).ldelim();
                        if (message.otFetchRequest != null && Object.hasOwnProperty.call(message, "otFetchRequest"))
                            $root.replit.goval.api.OTFetchRequest.encode(message.otFetchRequest, writer.uint32(/* id 225, wireType 2 =*/1802).fork()).ldelim();
                        if (message.otFetchResponse != null && Object.hasOwnProperty.call(message, "otFetchResponse"))
                            $root.replit.goval.api.OTFetchResponse.encode(message.otFetchResponse, writer.uint32(/* id 226, wireType 2 =*/1810).fork()).ldelim();
                        if (message.otTransformSelectionRequest != null && Object.hasOwnProperty.call(message, "otTransformSelectionRequest"))
                            $root.replit.goval.api.OTTransformSelectionRequest.encode(message.otTransformSelectionRequest, writer.uint32(/* id 227, wireType 2 =*/1818).fork()).ldelim();
                        if (message.otTransformSelectionResponse != null && Object.hasOwnProperty.call(message, "otTransformSelectionResponse"))
                            $root.replit.goval.api.OTTransformSelectionResponse.encode(message.otTransformSelectionResponse, writer.uint32(/* id 228, wireType 2 =*/1826).fork()).ldelim();
                        if (message.otLinkFileResponse != null && Object.hasOwnProperty.call(message, "otLinkFileResponse"))
                            $root.replit.goval.api.OTLinkFileResponse.encode(message.otLinkFileResponse, writer.uint32(/* id 229, wireType 2 =*/1834).fork()).ldelim();
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            $root.replit.goval.api.Debug.encode(message.debug, writer.uint32(/* id 230, wireType 2 =*/1842).fork()).ldelim();
                        if (message.startVCR != null && Object.hasOwnProperty.call(message, "startVCR"))
                            $root.replit.goval.api.StartVCR.encode(message.startVCR, writer.uint32(/* id 231, wireType 2 =*/1850).fork()).ldelim();
                        if (message.readVCR != null && Object.hasOwnProperty.call(message, "readVCR"))
                            $root.replit.goval.api.ReadVCR.encode(message.readVCR, writer.uint32(/* id 232, wireType 2 =*/1858).fork()).ldelim();
                        if (message.VCRLog != null && Object.hasOwnProperty.call(message, "VCRLog"))
                            $root.replit.goval.api.VCRLog.encode(message.VCRLog, writer.uint32(/* id 233, wireType 2 =*/1866).fork()).ldelim();
                        if (message.auth != null && Object.hasOwnProperty.call(message, "auth"))
                            $root.replit.goval.api.Auth.encode(message.auth, writer.uint32(/* id 235, wireType 2 =*/1882).fork()).ldelim();
                        if (message.execInfo != null && Object.hasOwnProperty.call(message, "execInfo"))
                            $root.replit.goval.api.ExecInfo.encode(message.execInfo, writer.uint32(/* id 240, wireType 2 =*/1922).fork()).ldelim();
                        if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                            $root.replit.goval.api.Flush.encode(message.flush, writer.uint32(/* id 251, wireType 2 =*/2010).fork()).ldelim();
                        if (message.subscribeFile != null && Object.hasOwnProperty.call(message, "subscribeFile"))
                            $root.replit.goval.api.SubscribeFile.encode(message.subscribeFile, writer.uint32(/* id 256, wireType 2 =*/2050).fork()).ldelim();
                        if (message.fileEvent != null && Object.hasOwnProperty.call(message, "fileEvent"))
                            $root.replit.goval.api.FileEvent.encode(message.fileEvent, writer.uint32(/* id 257, wireType 2 =*/2058).fork()).ldelim();
                        if (message.roster != null && Object.hasOwnProperty.call(message, "roster"))
                            $root.replit.goval.api.Roster.encode(message.roster, writer.uint32(/* id 260, wireType 2 =*/2082).fork()).ldelim();
                        if (message.join != null && Object.hasOwnProperty.call(message, "join"))
                            $root.replit.goval.api.User.encode(message.join, writer.uint32(/* id 261, wireType 2 =*/2090).fork()).ldelim();
                        if (message.part != null && Object.hasOwnProperty.call(message, "part"))
                            $root.replit.goval.api.User.encode(message.part, writer.uint32(/* id 262, wireType 2 =*/2098).fork()).ldelim();
                        if (message.openFile != null && Object.hasOwnProperty.call(message, "openFile"))
                            $root.replit.goval.api.OpenFile.encode(message.openFile, writer.uint32(/* id 263, wireType 2 =*/2106).fork()).ldelim();
                        if (message.fileOpened != null && Object.hasOwnProperty.call(message, "fileOpened"))
                            $root.replit.goval.api.FileOpened.encode(message.fileOpened, writer.uint32(/* id 264, wireType 2 =*/2114).fork()).ldelim();
                        if (message.followUser != null && Object.hasOwnProperty.call(message, "followUser"))
                            $root.replit.goval.api.FollowUser.encode(message.followUser, writer.uint32(/* id 265, wireType 2 =*/2122).fork()).ldelim();
                        if (message.updateSessionTimestamp != null && Object.hasOwnProperty.call(message, "updateSessionTimestamp"))
                            $root.replit.goval.api.UpdateSessionTimestamp.encode(message.updateSessionTimestamp, writer.uint32(/* id 266, wireType 2 =*/2130).fork()).ldelim();
                        if (message.sessionTimestampUpdated != null && Object.hasOwnProperty.call(message, "sessionTimestampUpdated"))
                            $root.replit.goval.api.SessionTimestampUpdated.encode(message.sessionTimestampUpdated, writer.uint32(/* id 267, wireType 2 =*/2138).fork()).ldelim();
                        if (message.unfollowUser != null && Object.hasOwnProperty.call(message, "unfollowUser"))
                            $root.replit.goval.api.UnfollowUser.encode(message.unfollowUser, writer.uint32(/* id 268, wireType 2 =*/2146).fork()).ldelim();
                        if (message.exec != null && Object.hasOwnProperty.call(message, "exec"))
                            $root.replit.goval.api.Exec.encode(message.exec, writer.uint32(/* id 270, wireType 2 =*/2162).fork()).ldelim();
                        if (message.packageSearch != null && Object.hasOwnProperty.call(message, "packageSearch"))
                            $root.replit.goval.api.PackageSearch.encode(message.packageSearch, writer.uint32(/* id 280, wireType 2 =*/2242).fork()).ldelim();
                        if (message.packageSearchResp != null && Object.hasOwnProperty.call(message, "packageSearchResp"))
                            $root.replit.goval.api.PackageSearchResp.encode(message.packageSearchResp, writer.uint32(/* id 281, wireType 2 =*/2250).fork()).ldelim();
                        if (message.packageInfo != null && Object.hasOwnProperty.call(message, "packageInfo"))
                            $root.replit.goval.api.PackageInfo.encode(message.packageInfo, writer.uint32(/* id 282, wireType 2 =*/2258).fork()).ldelim();
                        if (message.packageInfoResp != null && Object.hasOwnProperty.call(message, "packageInfoResp"))
                            $root.replit.goval.api.PackageInfoResp.encode(message.packageInfoResp, writer.uint32(/* id 283, wireType 2 =*/2266).fork()).ldelim();
                        if (message.packageAdd != null && Object.hasOwnProperty.call(message, "packageAdd"))
                            $root.replit.goval.api.PackageAdd.encode(message.packageAdd, writer.uint32(/* id 284, wireType 2 =*/2274).fork()).ldelim();
                        if (message.packageRemove != null && Object.hasOwnProperty.call(message, "packageRemove"))
                            $root.replit.goval.api.PackageRemove.encode(message.packageRemove, writer.uint32(/* id 285, wireType 2 =*/2282).fork()).ldelim();
                        if (message.packageInstall != null && Object.hasOwnProperty.call(message, "packageInstall"))
                            $root.replit.goval.api.PackageInstall.encode(message.packageInstall, writer.uint32(/* id 286, wireType 2 =*/2290).fork()).ldelim();
                        if (message.packageListSpecfile != null && Object.hasOwnProperty.call(message, "packageListSpecfile"))
                            $root.replit.goval.api.PackageListSpecfile.encode(message.packageListSpecfile, writer.uint32(/* id 287, wireType 2 =*/2298).fork()).ldelim();
                        if (message.packageListSpecfileResp != null && Object.hasOwnProperty.call(message, "packageListSpecfileResp"))
                            $root.replit.goval.api.PackageListSpecfileResp.encode(message.packageListSpecfileResp, writer.uint32(/* id 288, wireType 2 =*/2306).fork()).ldelim();
                        if (message.packageCacheSave != null && Object.hasOwnProperty.call(message, "packageCacheSave"))
                            $root.replit.goval.api.PackageCacheSave.encode(message.packageCacheSave, writer.uint32(/* id 289, wireType 2 =*/2314).fork()).ldelim();
                        if (message.chatMessage != null && Object.hasOwnProperty.call(message, "chatMessage"))
                            $root.replit.goval.api.ChatMessage.encode(message.chatMessage, writer.uint32(/* id 310, wireType 2 =*/2482).fork()).ldelim();
                        if (message.chatTyping != null && Object.hasOwnProperty.call(message, "chatTyping"))
                            $root.replit.goval.api.ChatTyping.encode(message.chatTyping, writer.uint32(/* id 311, wireType 2 =*/2490).fork()).ldelim();
                        if (message.chatScrollback != null && Object.hasOwnProperty.call(message, "chatScrollback"))
                            $root.replit.goval.api.ChatScrollback.encode(message.chatScrollback, writer.uint32(/* id 312, wireType 2 =*/2498).fork()).ldelim();
                        if (message.transferStart != null && Object.hasOwnProperty.call(message, "transferStart"))
                            $root.replit.goval.api.TransferStart.encode(message.transferStart, writer.uint32(/* id 320, wireType 2 =*/2562).fork()).ldelim();
                        if (message.transferChunk != null && Object.hasOwnProperty.call(message, "transferChunk"))
                            $root.replit.goval.api.TransferChunk.encode(message.transferChunk, writer.uint32(/* id 321, wireType 2 =*/2570).fork()).ldelim();
                        if (message.transferComplete != null && Object.hasOwnProperty.call(message, "transferComplete"))
                            $root.replit.goval.api.TransferComplete.encode(message.transferComplete, writer.uint32(/* id 322, wireType 2 =*/2578).fork()).ldelim();
                        if (message.transferCancel != null && Object.hasOwnProperty.call(message, "transferCancel"))
                            $root.replit.goval.api.Transfer.encode(message.transferCancel, writer.uint32(/* id 323, wireType 2 =*/2586).fork()).ldelim();
                        if (message.transfer != null && Object.hasOwnProperty.call(message, "transfer"))
                            $root.replit.goval.api.Transfer.encode(message.transfer, writer.uint32(/* id 324, wireType 2 =*/2594).fork()).ldelim();
                        if (message.fsSnapshot != null && Object.hasOwnProperty.call(message, "fsSnapshot"))
                            $root.replit.goval.api.FSSnapshot.encode(message.fsSnapshot, writer.uint32(/* id 330, wireType 2 =*/2642).fork()).ldelim();
                        if (message.fsTakeLock != null && Object.hasOwnProperty.call(message, "fsTakeLock"))
                            $root.replit.goval.api.FSLock.encode(message.fsTakeLock, writer.uint32(/* id 331, wireType 2 =*/2650).fork()).ldelim();
                        if (message.fsReleaseLock != null && Object.hasOwnProperty.call(message, "fsReleaseLock"))
                            $root.replit.goval.api.FSLock.encode(message.fsReleaseLock, writer.uint32(/* id 332, wireType 2 =*/2658).fork()).ldelim();
                        if (message.hasCap != null && Object.hasOwnProperty.call(message, "hasCap"))
                            writer.uint32(/* id 335, wireType 0 =*/2680).bool(message.hasCap);
                        if (message.pid1Config != null && Object.hasOwnProperty.call(message, "pid1Config"))
                            $root.replit.goval.api.Pid1Config.encode(message.pid1Config, writer.uint32(/* id 340, wireType 2 =*/2722).fork()).ldelim();
                        if (message.startLSP != null && Object.hasOwnProperty.call(message, "startLSP"))
                            $root.replit.goval.api.StartLSP.encode(message.startLSP, writer.uint32(/* id 345, wireType 2 =*/2762).fork()).ldelim();
                        if (message.metrics != null && Object.hasOwnProperty.call(message, "metrics"))
                            $root.replit.goval.api.Metrics.encode(message.metrics, writer.uint32(/* id 350, wireType 2 =*/2802).fork()).ldelim();
                        if (message.bootStatus != null && Object.hasOwnProperty.call(message, "bootStatus"))
                            $root.replit.goval.api.BootStatus.encode(message.bootStatus, writer.uint32(/* id 351, wireType 2 =*/2810).fork()).ldelim();
                        if (message.readMetaRequest != null && Object.hasOwnProperty.call(message, "readMetaRequest"))
                            $root.replit.goval.api.ReadMetaRequest.encode(message.readMetaRequest, writer.uint32(/* id 360, wireType 2 =*/2882).fork()).ldelim();
                        if (message.writeMetaRequest != null && Object.hasOwnProperty.call(message, "writeMetaRequest"))
                            $root.replit.goval.api.WriteMetaRequest.encode(message.writeMetaRequest, writer.uint32(/* id 361, wireType 2 =*/2890).fork()).ldelim();
                        if (message.appendMetaRequest != null && Object.hasOwnProperty.call(message, "appendMetaRequest"))
                            $root.replit.goval.api.AppendMetaRequest.encode(message.appendMetaRequest, writer.uint32(/* id 362, wireType 2 =*/2898).fork()).ldelim();
                        if (message.audio != null && Object.hasOwnProperty.call(message, "audio"))
                            $root.replit.goval.api.Audio.encode(message.audio, writer.uint32(/* id 363, wireType 2 =*/2906).fork()).ldelim();
                        if (message.pprofRequest != null && Object.hasOwnProperty.call(message, "pprofRequest"))
                            $root.replit.goval.api.PprofRequest.encode(message.pprofRequest, writer.uint32(/* id 364, wireType 2 =*/2914).fork()).ldelim();
                        if (message.pprofResponse != null && Object.hasOwnProperty.call(message, "pprofResponse"))
                            $root.replit.goval.api.PprofResponse.encode(message.pprofResponse, writer.uint32(/* id 365, wireType 2 =*/2922).fork()).ldelim();
                        if (message.audio2 != null && Object.hasOwnProperty.call(message, "audio2"))
                            $root.replit.goval.api.Audio2.encode(message.audio2, writer.uint32(/* id 366, wireType 2 =*/2930).fork()).ldelim();
                        if (message.PTYConfig != null && Object.hasOwnProperty.call(message, "PTYConfig"))
                            $root.replit.goval.api.PTYConfig.encode(message.PTYConfig, writer.uint32(/* id 367, wireType 2 =*/2938).fork()).ldelim();
                        if (message.stat != null && Object.hasOwnProperty.call(message, "stat"))
                            $root.replit.goval.api.File.encode(message.stat, writer.uint32(/* id 368, wireType 2 =*/2946).fork()).ldelim();
                        if (message.statRes != null && Object.hasOwnProperty.call(message, "statRes"))
                            $root.replit.goval.api.StatResult.encode(message.statRes, writer.uint32(/* id 369, wireType 2 =*/2954).fork()).ldelim();
                        if (message.debugMain != null && Object.hasOwnProperty.call(message, "debugMain"))
                            $root.replit.goval.api.DebugMain.encode(message.debugMain, writer.uint32(/* id 370, wireType 2 =*/2962).fork()).ldelim();
                        if (message.debugState != null && Object.hasOwnProperty.call(message, "debugState"))
                            $root.replit.goval.api.DebugState.encode(message.debugState, writer.uint32(/* id 371, wireType 2 =*/2970).fork()).ldelim();
                        if (message.debugMainReply != null && Object.hasOwnProperty.call(message, "debugMainReply"))
                            $root.replit.goval.api.DebugMainReply.encode(message.debugMainReply, writer.uint32(/* id 372, wireType 2 =*/2978).fork()).ldelim();
                        if (message.debugInput != null && Object.hasOwnProperty.call(message, "debugInput"))
                            $root.replit.goval.api.DebugInput.encode(message.debugInput, writer.uint32(/* id 373, wireType 2 =*/2986).fork()).ldelim();
                        if (message.debugOutput != null && Object.hasOwnProperty.call(message, "debugOutput"))
                            $root.replit.goval.api.DebugOutput.encode(message.debugOutput, writer.uint32(/* id 374, wireType 2 =*/2994).fork()).ldelim();
                        if (message.debugStop != null && Object.hasOwnProperty.call(message, "debugStop"))
                            $root.replit.goval.api.DebugStop.encode(message.debugStop, writer.uint32(/* id 375, wireType 2 =*/3002).fork()).ldelim();
                        if (message.debugLeave != null && Object.hasOwnProperty.call(message, "debugLeave"))
                            $root.replit.goval.api.DebugLeave.encode(message.debugLeave, writer.uint32(/* id 376, wireType 2 =*/3010).fork()).ldelim();
                        if (message.debugSessions != null && Object.hasOwnProperty.call(message, "debugSessions"))
                            $root.replit.goval.api.DebugSessions.encode(message.debugSessions, writer.uint32(/* id 377, wireType 2 =*/3018).fork()).ldelim();
                        if (message.dotReplitGetRequest != null && Object.hasOwnProperty.call(message, "dotReplitGetRequest"))
                            $root.replit.goval.api.DotReplitGetRequest.encode(message.dotReplitGetRequest, writer.uint32(/* id 378, wireType 2 =*/3026).fork()).ldelim();
                        if (message.dotReplitGetResponse != null && Object.hasOwnProperty.call(message, "dotReplitGetResponse"))
                            $root.replit.goval.api.DotReplitGetResponse.encode(message.dotReplitGetResponse, writer.uint32(/* id 379, wireType 2 =*/3034).fork()).ldelim();
                        if (message.debugAddBreakpointRequest != null && Object.hasOwnProperty.call(message, "debugAddBreakpointRequest"))
                            $root.replit.goval.api.DebugAddBreakpointRequest.encode(message.debugAddBreakpointRequest, writer.uint32(/* id 380, wireType 2 =*/3042).fork()).ldelim();
                        if (message.debugRemoveBreakpointRequest != null && Object.hasOwnProperty.call(message, "debugRemoveBreakpointRequest"))
                            $root.replit.goval.api.DebugRemoveBreakpointRequest.encode(message.debugRemoveBreakpointRequest, writer.uint32(/* id 381, wireType 2 =*/3050).fork()).ldelim();
                        if (message.debugBreakpointEvent != null && Object.hasOwnProperty.call(message, "debugBreakpointEvent"))
                            $root.replit.goval.api.DebugBreakpointEvent.encode(message.debugBreakpointEvent, writer.uint32(/* id 383, wireType 2 =*/3066).fork()).ldelim();
                        if (message.readMetaResponse != null && Object.hasOwnProperty.call(message, "readMetaResponse"))
                            $root.replit.goval.api.ReadMetaResponse.encode(message.readMetaResponse, writer.uint32(/* id 384, wireType 2 =*/3074).fork()).ldelim();
                        if (message.writeMetaResponse != null && Object.hasOwnProperty.call(message, "writeMetaResponse"))
                            $root.replit.goval.api.WriteMetaResponse.encode(message.writeMetaResponse, writer.uint32(/* id 385, wireType 2 =*/3082).fork()).ldelim();
                        if (message.appendMetaResponse != null && Object.hasOwnProperty.call(message, "appendMetaResponse"))
                            $root.replit.goval.api.AppendMetaResponse.encode(message.appendMetaResponse, writer.uint32(/* id 386, wireType 2 =*/3090).fork()).ldelim();
                        if (message.debugUpdateBreakpointRequest != null && Object.hasOwnProperty.call(message, "debugUpdateBreakpointRequest"))
                            $root.replit.goval.api.DebugUpdateBreakpointRequest.encode(message.debugUpdateBreakpointRequest, writer.uint32(/* id 387, wireType 2 =*/3098).fork()).ldelim();
                        if (message.fsSnapshotEvent != null && Object.hasOwnProperty.call(message, "fsSnapshotEvent"))
                            $root.replit.goval.api.FSSnapshotEvent.encode(message.fsSnapshotEvent, writer.uint32(/* id 388, wireType 2 =*/3106).fork()).ldelim();
                        if (message.snapshotEvent != null && Object.hasOwnProperty.call(message, "snapshotEvent"))
                            $root.replit.goval.api.SnapshotEvent.encode(message.snapshotEvent, writer.uint32(/* id 389, wireType 2 =*/3114).fork()).ldelim();
                        if (message.runConfigGetRequest != null && Object.hasOwnProperty.call(message, "runConfigGetRequest"))
                            $root.replit.goval.api.RunConfigGetRequest.encode(message.runConfigGetRequest, writer.uint32(/* id 390, wireType 2 =*/3122).fork()).ldelim();
                        if (message.runConfigGetResponse != null && Object.hasOwnProperty.call(message, "runConfigGetResponse"))
                            $root.replit.goval.api.RunConfigGetResponse.encode(message.runConfigGetResponse, writer.uint32(/* id 391, wireType 2 =*/3130).fork()).ldelim();
                        if (message.NoninteractiveFSChangeEvent != null && Object.hasOwnProperty.call(message, "NoninteractiveFSChangeEvent"))
                            writer.uint32(/* id 392, wireType 0 =*/3136).bool(message.NoninteractiveFSChangeEvent);
                        if (message.firewallDenied != null && Object.hasOwnProperty.call(message, "firewallDenied"))
                            $root.replit.goval.api.FirewallDenied.encode(message.firewallDenied, writer.uint32(/* id 393, wireType 2 =*/3146).fork()).ldelim();
                        if (message.dotReplitUpdateRequest != null && Object.hasOwnProperty.call(message, "dotReplitUpdateRequest"))
                            $root.replit.goval.api.DotReplitUpdateRequest.encode(message.dotReplitUpdateRequest, writer.uint32(/* id 395, wireType 2 =*/3162).fork()).ldelim();
                        if (message.dotReplitUpdateResponse != null && Object.hasOwnProperty.call(message, "dotReplitUpdateResponse"))
                            $root.replit.goval.api.DotReplitUpdateResponse.encode(message.dotReplitUpdateResponse, writer.uint32(/* id 396, wireType 2 =*/3170).fork()).ldelim();
                        if (message.nixPackageAddRequest != null && Object.hasOwnProperty.call(message, "nixPackageAddRequest"))
                            $root.replit.goval.api.NixPackageAddRequest.encode(message.nixPackageAddRequest, writer.uint32(/* id 410, wireType 2 =*/3282).fork()).ldelim();
                        if (message.nixPackageAddResponse != null && Object.hasOwnProperty.call(message, "nixPackageAddResponse"))
                            $root.replit.goval.api.NixPackageAddResponse.encode(message.nixPackageAddResponse, writer.uint32(/* id 411, wireType 2 =*/3290).fork()).ldelim();
                        if (message.nixPackageRemoveRequest != null && Object.hasOwnProperty.call(message, "nixPackageRemoveRequest"))
                            $root.replit.goval.api.NixPackageRemoveRequest.encode(message.nixPackageRemoveRequest, writer.uint32(/* id 412, wireType 2 =*/3298).fork()).ldelim();
                        if (message.nixPackageRemoveResponse != null && Object.hasOwnProperty.call(message, "nixPackageRemoveResponse"))
                            $root.replit.goval.api.NixPackageRemoveResponse.encode(message.nixPackageRemoveResponse, writer.uint32(/* id 413, wireType 2 =*/3306).fork()).ldelim();
                        if (message.nixPackageListRequest != null && Object.hasOwnProperty.call(message, "nixPackageListRequest"))
                            $root.replit.goval.api.NixPackageListRequest.encode(message.nixPackageListRequest, writer.uint32(/* id 414, wireType 2 =*/3314).fork()).ldelim();
                        if (message.nixPackageListResponse != null && Object.hasOwnProperty.call(message, "nixPackageListResponse"))
                            $root.replit.goval.api.NixPackageListResponse.encode(message.nixPackageListResponse, writer.uint32(/* id 415, wireType 2 =*/3322).fork()).ldelim();
                        if (message.nixChannelsRequest != null && Object.hasOwnProperty.call(message, "nixChannelsRequest"))
                            $root.replit.goval.api.NixChannelsRequest.encode(message.nixChannelsRequest, writer.uint32(/* id 416, wireType 2 =*/3330).fork()).ldelim();
                        if (message.nixChannelsResponse != null && Object.hasOwnProperty.call(message, "nixChannelsResponse"))
                            $root.replit.goval.api.NixChannelsResponse.encode(message.nixChannelsResponse, writer.uint32(/* id 417, wireType 2 =*/3338).fork()).ldelim();
                        if (message.nixChannelLatestStableRequest != null && Object.hasOwnProperty.call(message, "nixChannelLatestStableRequest"))
                            $root.replit.goval.api.NixChannelLatestStableRequest.encode(message.nixChannelLatestStableRequest, writer.uint32(/* id 418, wireType 2 =*/3346).fork()).ldelim();
                        if (message.nixChannelLatestStableResponse != null && Object.hasOwnProperty.call(message, "nixChannelLatestStableResponse"))
                            $root.replit.goval.api.NixChannelLatestStableResponse.encode(message.nixChannelLatestStableResponse, writer.uint32(/* id 419, wireType 2 =*/3354).fork()).ldelim();
                        if (message.nixPackageSearchRequest != null && Object.hasOwnProperty.call(message, "nixPackageSearchRequest"))
                            $root.replit.goval.api.NixPackageSearchRequest.encode(message.nixPackageSearchRequest, writer.uint32(/* id 420, wireType 2 =*/3362).fork()).ldelim();
                        if (message.nixPackageSearchResponse != null && Object.hasOwnProperty.call(message, "nixPackageSearchResponse"))
                            $root.replit.goval.api.NixPackageSearchResponse.encode(message.nixPackageSearchResponse, writer.uint32(/* id 421, wireType 2 =*/3370).fork()).ldelim();
                        if (message.record != null && Object.hasOwnProperty.call(message, "record"))
                            writer.uint32(/* id 422, wireType 2 =*/3378).string(message.record);
                        if (message.userEvent != null && Object.hasOwnProperty.call(message, "userEvent"))
                            $root.replit.goval.api.UserEvent.encode(message.userEvent, writer.uint32(/* id 423, wireType 2 =*/3386).fork()).ldelim();
                        if (message.replspaceApiOpenFile != null && Object.hasOwnProperty.call(message, "replspaceApiOpenFile"))
                            $root.replit.goval.api.ReplspaceApiOpenFile.encode(message.replspaceApiOpenFile, writer.uint32(/* id 424, wireType 2 =*/3394).fork()).ldelim();
                        if (message.replspaceApiCloseFile != null && Object.hasOwnProperty.call(message, "replspaceApiCloseFile"))
                            $root.replit.goval.api.ReplspaceApiCloseFile.encode(message.replspaceApiCloseFile, writer.uint32(/* id 425, wireType 2 =*/3402).fork()).ldelim();
                        if (message.replspaceApiGetGitHubToken != null && Object.hasOwnProperty.call(message, "replspaceApiGetGitHubToken"))
                            $root.replit.goval.api.ReplspaceApiGetGitHubToken.encode(message.replspaceApiGetGitHubToken, writer.uint32(/* id 426, wireType 2 =*/3410).fork()).ldelim();
                        if (message.replspaceApiGitHubToken != null && Object.hasOwnProperty.call(message, "replspaceApiGitHubToken"))
                            $root.replit.goval.api.ReplspaceApiGitHubToken.encode(message.replspaceApiGitHubToken, writer.uint32(/* id 427, wireType 2 =*/3418).fork()).ldelim();
                        if (message.ref != null && Object.hasOwnProperty.call(message, "ref"))
                            writer.uint32(/* id 1000, wireType 2 =*/8002).string(message.ref);
                        if (message.traceInfo != null && Object.hasOwnProperty.call(message, "traceInfo"))
                            for (var keys = Object.keys(message.traceInfo), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 1001, wireType 2 =*/8010).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.traceInfo[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Command message, length delimited. Does not implicitly {@link replit.goval.api.Command.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {replit.goval.api.Command} message Command message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Command.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Command message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Command} Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Command.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Command(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = reader.int32();
                                break;
                            case 2:
                                message.session = reader.int32();
                                break;
                            case 3:
                                message.openChan = $root.replit.goval.api.OpenChannel.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.openChanRes = $root.replit.goval.api.OpenChannelRes.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.closeChan = $root.replit.goval.api.CloseChannel.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.closeChanRes = $root.replit.goval.api.CloseChannelRes.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.containerState = $root.replit.goval.api.ContainerState.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.portOpen = $root.replit.goval.api.PortOpen.decode(reader, reader.uint32());
                                break;
                            case 48:
                                message.portClose = $root.replit.goval.api.PortClose.decode(reader, reader.uint32());
                                break;
                            case 11:
                                message.toast = $root.replit.goval.api.Toast.decode(reader, reader.uint32());
                                break;
                            case 45:
                                message.protocolError = $root.replit.goval.api.ProtocolError.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.redirect = $root.replit.goval.api.Redirect.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.alwaysOn = $root.replit.goval.api.AlwaysOn.decode(reader, reader.uint32());
                                break;
                            case 16:
                                message.runMain = $root.replit.goval.api.RunMain.decode(reader, reader.uint32());
                                break;
                            case 17:
                                message.clear = $root.replit.goval.api.Clear.decode(reader, reader.uint32());
                                break;
                            case 20:
                                message["eval"] = reader.string();
                                break;
                            case 21:
                                message.result = reader.string();
                                break;
                            case 22:
                                message.input = reader.string();
                                break;
                            case 23:
                                message.output = reader.string();
                                break;
                            case 24:
                                message.error = reader.string();
                                break;
                            case 46:
                                message.stderr = reader.string();
                                break;
                            case 47:
                                message.log = reader.string();
                                break;
                            case 422:
                                message.record = reader.string();
                                break;
                            case 26:
                                message.saneTerm = $root.replit.goval.api.SaneTerm.decode(reader, reader.uint32());
                                break;
                            case 27:
                                message.resizeTerm = $root.replit.goval.api.ResizeTerm.decode(reader, reader.uint32());
                                break;
                            case 28:
                                message.state = reader.int32();
                                break;
                            case 30:
                                message.ok = $root.replit.goval.api.OK.decode(reader, reader.uint32());
                                break;
                            case 31:
                                message.persist = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 41:
                                message.persistMirror = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 32:
                                message.write = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 33:
                                message.remove = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 34:
                                message.move = $root.replit.goval.api.Move.decode(reader, reader.uint32());
                                break;
                            case 36:
                                message.tryRemove = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 39:
                                message.mkdir = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 368:
                                message.stat = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 369:
                                message.statRes = $root.replit.goval.api.StatResult.decode(reader, reader.uint32());
                                break;
                            case 320:
                                message.transferStart = $root.replit.goval.api.TransferStart.decode(reader, reader.uint32());
                                break;
                            case 321:
                                message.transferChunk = $root.replit.goval.api.TransferChunk.decode(reader, reader.uint32());
                                break;
                            case 322:
                                message.transferComplete = $root.replit.goval.api.TransferComplete.decode(reader, reader.uint32());
                                break;
                            case 323:
                                message.transferCancel = $root.replit.goval.api.Transfer.decode(reader, reader.uint32());
                                break;
                            case 324:
                                message.transfer = $root.replit.goval.api.Transfer.decode(reader, reader.uint32());
                                break;
                            case 35:
                                message.read = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 37:
                                message.readdir = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 38:
                                message.files = $root.replit.goval.api.Files.decode(reader, reader.uint32());
                                break;
                            case 40:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 42:
                                message.checkChanges = $root.replit.goval.api.CheckChanges.decode(reader, reader.uint32());
                                break;
                            case 43:
                                message.changedFiles = $root.replit.goval.api.Files.decode(reader, reader.uint32());
                                break;
                            case 44:
                                message.lintResults = $root.replit.goval.api.LintResults.decode(reader, reader.uint32());
                                break;
                            case 70:
                                message.runContainedTest = $root.replit.goval.api.ContainedTest.decode(reader, reader.uint32());
                                break;
                            case 71:
                                message.testResult = $root.replit.goval.api.TestResult.decode(reader, reader.uint32());
                                break;
                            case 90:
                                message.debuggerStart = reader.string();
                                break;
                            case 91:
                                message.debuggerStep = $root.replit.goval.api.RunMain.decode(reader, reader.uint32());
                                break;
                            case 92:
                                message.debuggerStatus = $root.replit.goval.api.DebugStatus.decode(reader, reader.uint32());
                                break;
                            case 100:
                                message.ensurePackages = $root.replit.goval.api.EnsurePackages.decode(reader, reader.uint32());
                                break;
                            case 120:
                                message.ping = $root.replit.goval.api.Ping.decode(reader, reader.uint32());
                                break;
                            case 121:
                                message.pong = $root.replit.goval.api.Pong.decode(reader, reader.uint32());
                                break;
                            case 122:
                                message.hello = $root.replit.goval.api.Hello.decode(reader, reader.uint32());
                                break;
                            case 123:
                                message.goodbye = $root.replit.goval.api.Goodbye.decode(reader, reader.uint32());
                                break;
                            case 124:
                                message.proxyGoingAway = $root.replit.goval.api.ProxyGoingAway.decode(reader, reader.uint32());
                                break;
                            case 130:
                                message.hint = $root.replit.goval.api.Hint.decode(reader, reader.uint32());
                                break;
                            case 150:
                                message.connect = $root.replit.goval.api.Connect.decode(reader, reader.uint32());
                                break;
                            case 151:
                                message.send = $root.replit.goval.api.Send.decode(reader, reader.uint32());
                                break;
                            case 152:
                                message.recv = $root.replit.goval.api.Recv.decode(reader, reader.uint32());
                                break;
                            case 153:
                                message.disconnect = $root.replit.goval.api.Disconnect.decode(reader, reader.uint32());
                                break;
                            case 200:
                                message.fileAuthReq = $root.replit.goval.api.FileAuthReq.decode(reader, reader.uint32());
                                break;
                            case 201:
                                message.fileAuthRes = $root.replit.goval.api.FileAuthRes.decode(reader, reader.uint32());
                                break;
                            case 202:
                                message.mutliFileAuthRes = $root.replit.goval.api.MultiFileAuthRes.decode(reader, reader.uint32());
                                break;
                            case 205:
                                message.listObjects = $root.replit.goval.api.ListObjects.decode(reader, reader.uint32());
                                break;
                            case 206:
                                message.listObjectsResp = $root.replit.goval.api.ListObjectsResp.decode(reader, reader.uint32());
                                break;
                            case 220:
                                message.ot = $root.replit.goval.api.OTPacket.decode(reader, reader.uint32());
                                break;
                            case 221:
                                message.otstatus = $root.replit.goval.api.OTStatus.decode(reader, reader.uint32());
                                break;
                            case 222:
                                message.otLinkFile = $root.replit.goval.api.OTLinkFile.decode(reader, reader.uint32());
                                break;
                            case 229:
                                message.otLinkFileResponse = $root.replit.goval.api.OTLinkFileResponse.decode(reader, reader.uint32());
                                break;
                            case 223:
                                message.otNewCursor = $root.replit.goval.api.OTCursor.decode(reader, reader.uint32());
                                break;
                            case 224:
                                message.otDeleteCursor = $root.replit.goval.api.OTCursor.decode(reader, reader.uint32());
                                break;
                            case 225:
                                message.otFetchRequest = $root.replit.goval.api.OTFetchRequest.decode(reader, reader.uint32());
                                break;
                            case 226:
                                message.otFetchResponse = $root.replit.goval.api.OTFetchResponse.decode(reader, reader.uint32());
                                break;
                            case 227:
                                message.otTransformSelectionRequest = $root.replit.goval.api.OTTransformSelectionRequest.decode(reader, reader.uint32());
                                break;
                            case 228:
                                message.otTransformSelectionResponse = $root.replit.goval.api.OTTransformSelectionResponse.decode(reader, reader.uint32());
                                break;
                            case 251:
                                message.flush = $root.replit.goval.api.Flush.decode(reader, reader.uint32());
                                break;
                            case 230:
                                message.debug = $root.replit.goval.api.Debug.decode(reader, reader.uint32());
                                break;
                            case 231:
                                message.startVCR = $root.replit.goval.api.StartVCR.decode(reader, reader.uint32());
                                break;
                            case 232:
                                message.readVCR = $root.replit.goval.api.ReadVCR.decode(reader, reader.uint32());
                                break;
                            case 233:
                                message.VCRLog = $root.replit.goval.api.VCRLog.decode(reader, reader.uint32());
                                break;
                            case 235:
                                message.auth = $root.replit.goval.api.Auth.decode(reader, reader.uint32());
                                break;
                            case 240:
                                message.execInfo = $root.replit.goval.api.ExecInfo.decode(reader, reader.uint32());
                                break;
                            case 256:
                                message.subscribeFile = $root.replit.goval.api.SubscribeFile.decode(reader, reader.uint32());
                                break;
                            case 257:
                                message.fileEvent = $root.replit.goval.api.FileEvent.decode(reader, reader.uint32());
                                break;
                            case 260:
                                message.roster = $root.replit.goval.api.Roster.decode(reader, reader.uint32());
                                break;
                            case 261:
                                message.join = $root.replit.goval.api.User.decode(reader, reader.uint32());
                                break;
                            case 262:
                                message.part = $root.replit.goval.api.User.decode(reader, reader.uint32());
                                break;
                            case 263:
                                message.openFile = $root.replit.goval.api.OpenFile.decode(reader, reader.uint32());
                                break;
                            case 264:
                                message.fileOpened = $root.replit.goval.api.FileOpened.decode(reader, reader.uint32());
                                break;
                            case 265:
                                message.followUser = $root.replit.goval.api.FollowUser.decode(reader, reader.uint32());
                                break;
                            case 268:
                                message.unfollowUser = $root.replit.goval.api.UnfollowUser.decode(reader, reader.uint32());
                                break;
                            case 266:
                                message.updateSessionTimestamp = $root.replit.goval.api.UpdateSessionTimestamp.decode(reader, reader.uint32());
                                break;
                            case 267:
                                message.sessionTimestampUpdated = $root.replit.goval.api.SessionTimestampUpdated.decode(reader, reader.uint32());
                                break;
                            case 270:
                                message.exec = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 280:
                                message.packageSearch = $root.replit.goval.api.PackageSearch.decode(reader, reader.uint32());
                                break;
                            case 281:
                                message.packageSearchResp = $root.replit.goval.api.PackageSearchResp.decode(reader, reader.uint32());
                                break;
                            case 282:
                                message.packageInfo = $root.replit.goval.api.PackageInfo.decode(reader, reader.uint32());
                                break;
                            case 283:
                                message.packageInfoResp = $root.replit.goval.api.PackageInfoResp.decode(reader, reader.uint32());
                                break;
                            case 284:
                                message.packageAdd = $root.replit.goval.api.PackageAdd.decode(reader, reader.uint32());
                                break;
                            case 285:
                                message.packageRemove = $root.replit.goval.api.PackageRemove.decode(reader, reader.uint32());
                                break;
                            case 286:
                                message.packageInstall = $root.replit.goval.api.PackageInstall.decode(reader, reader.uint32());
                                break;
                            case 287:
                                message.packageListSpecfile = $root.replit.goval.api.PackageListSpecfile.decode(reader, reader.uint32());
                                break;
                            case 288:
                                message.packageListSpecfileResp = $root.replit.goval.api.PackageListSpecfileResp.decode(reader, reader.uint32());
                                break;
                            case 289:
                                message.packageCacheSave = $root.replit.goval.api.PackageCacheSave.decode(reader, reader.uint32());
                                break;
                            case 310:
                                message.chatMessage = $root.replit.goval.api.ChatMessage.decode(reader, reader.uint32());
                                break;
                            case 311:
                                message.chatTyping = $root.replit.goval.api.ChatTyping.decode(reader, reader.uint32());
                                break;
                            case 312:
                                message.chatScrollback = $root.replit.goval.api.ChatScrollback.decode(reader, reader.uint32());
                                break;
                            case 330:
                                message.fsSnapshot = $root.replit.goval.api.FSSnapshot.decode(reader, reader.uint32());
                                break;
                            case 388:
                                message.fsSnapshotEvent = $root.replit.goval.api.FSSnapshotEvent.decode(reader, reader.uint32());
                                break;
                            case 331:
                                message.fsTakeLock = $root.replit.goval.api.FSLock.decode(reader, reader.uint32());
                                break;
                            case 332:
                                message.fsReleaseLock = $root.replit.goval.api.FSLock.decode(reader, reader.uint32());
                                break;
                            case 335:
                                message.hasCap = reader.bool();
                                break;
                            case 389:
                                message.snapshotEvent = $root.replit.goval.api.SnapshotEvent.decode(reader, reader.uint32());
                                break;
                            case 392:
                                message.NoninteractiveFSChangeEvent = reader.bool();
                                break;
                            case 340:
                                message.pid1Config = $root.replit.goval.api.Pid1Config.decode(reader, reader.uint32());
                                break;
                            case 350:
                                message.metrics = $root.replit.goval.api.Metrics.decode(reader, reader.uint32());
                                break;
                            case 351:
                                message.bootStatus = $root.replit.goval.api.BootStatus.decode(reader, reader.uint32());
                                break;
                            case 360:
                                message.readMetaRequest = $root.replit.goval.api.ReadMetaRequest.decode(reader, reader.uint32());
                                break;
                            case 384:
                                message.readMetaResponse = $root.replit.goval.api.ReadMetaResponse.decode(reader, reader.uint32());
                                break;
                            case 361:
                                message.writeMetaRequest = $root.replit.goval.api.WriteMetaRequest.decode(reader, reader.uint32());
                                break;
                            case 385:
                                message.writeMetaResponse = $root.replit.goval.api.WriteMetaResponse.decode(reader, reader.uint32());
                                break;
                            case 362:
                                message.appendMetaRequest = $root.replit.goval.api.AppendMetaRequest.decode(reader, reader.uint32());
                                break;
                            case 386:
                                message.appendMetaResponse = $root.replit.goval.api.AppendMetaResponse.decode(reader, reader.uint32());
                                break;
                            case 363:
                                message.audio = $root.replit.goval.api.Audio.decode(reader, reader.uint32());
                                break;
                            case 364:
                                message.pprofRequest = $root.replit.goval.api.PprofRequest.decode(reader, reader.uint32());
                                break;
                            case 365:
                                message.pprofResponse = $root.replit.goval.api.PprofResponse.decode(reader, reader.uint32());
                                break;
                            case 366:
                                message.audio2 = $root.replit.goval.api.Audio2.decode(reader, reader.uint32());
                                break;
                            case 367:
                                message.PTYConfig = $root.replit.goval.api.PTYConfig.decode(reader, reader.uint32());
                                break;
                            case 370:
                                message.debugMain = $root.replit.goval.api.DebugMain.decode(reader, reader.uint32());
                                break;
                            case 371:
                                message.debugState = $root.replit.goval.api.DebugState.decode(reader, reader.uint32());
                                break;
                            case 372:
                                message.debugMainReply = $root.replit.goval.api.DebugMainReply.decode(reader, reader.uint32());
                                break;
                            case 373:
                                message.debugInput = $root.replit.goval.api.DebugInput.decode(reader, reader.uint32());
                                break;
                            case 374:
                                message.debugOutput = $root.replit.goval.api.DebugOutput.decode(reader, reader.uint32());
                                break;
                            case 375:
                                message.debugStop = $root.replit.goval.api.DebugStop.decode(reader, reader.uint32());
                                break;
                            case 376:
                                message.debugLeave = $root.replit.goval.api.DebugLeave.decode(reader, reader.uint32());
                                break;
                            case 377:
                                message.debugSessions = $root.replit.goval.api.DebugSessions.decode(reader, reader.uint32());
                                break;
                            case 380:
                                message.debugAddBreakpointRequest = $root.replit.goval.api.DebugAddBreakpointRequest.decode(reader, reader.uint32());
                                break;
                            case 387:
                                message.debugUpdateBreakpointRequest = $root.replit.goval.api.DebugUpdateBreakpointRequest.decode(reader, reader.uint32());
                                break;
                            case 381:
                                message.debugRemoveBreakpointRequest = $root.replit.goval.api.DebugRemoveBreakpointRequest.decode(reader, reader.uint32());
                                break;
                            case 383:
                                message.debugBreakpointEvent = $root.replit.goval.api.DebugBreakpointEvent.decode(reader, reader.uint32());
                                break;
                            case 378:
                                message.dotReplitGetRequest = $root.replit.goval.api.DotReplitGetRequest.decode(reader, reader.uint32());
                                break;
                            case 379:
                                message.dotReplitGetResponse = $root.replit.goval.api.DotReplitGetResponse.decode(reader, reader.uint32());
                                break;
                            case 390:
                                message.runConfigGetRequest = $root.replit.goval.api.RunConfigGetRequest.decode(reader, reader.uint32());
                                break;
                            case 391:
                                message.runConfigGetResponse = $root.replit.goval.api.RunConfigGetResponse.decode(reader, reader.uint32());
                                break;
                            case 395:
                                message.dotReplitUpdateRequest = $root.replit.goval.api.DotReplitUpdateRequest.decode(reader, reader.uint32());
                                break;
                            case 396:
                                message.dotReplitUpdateResponse = $root.replit.goval.api.DotReplitUpdateResponse.decode(reader, reader.uint32());
                                break;
                            case 345:
                                message.startLSP = $root.replit.goval.api.StartLSP.decode(reader, reader.uint32());
                                break;
                            case 393:
                                message.firewallDenied = $root.replit.goval.api.FirewallDenied.decode(reader, reader.uint32());
                                break;
                            case 410:
                                message.nixPackageAddRequest = $root.replit.goval.api.NixPackageAddRequest.decode(reader, reader.uint32());
                                break;
                            case 411:
                                message.nixPackageAddResponse = $root.replit.goval.api.NixPackageAddResponse.decode(reader, reader.uint32());
                                break;
                            case 412:
                                message.nixPackageRemoveRequest = $root.replit.goval.api.NixPackageRemoveRequest.decode(reader, reader.uint32());
                                break;
                            case 413:
                                message.nixPackageRemoveResponse = $root.replit.goval.api.NixPackageRemoveResponse.decode(reader, reader.uint32());
                                break;
                            case 414:
                                message.nixPackageListRequest = $root.replit.goval.api.NixPackageListRequest.decode(reader, reader.uint32());
                                break;
                            case 415:
                                message.nixPackageListResponse = $root.replit.goval.api.NixPackageListResponse.decode(reader, reader.uint32());
                                break;
                            case 416:
                                message.nixChannelsRequest = $root.replit.goval.api.NixChannelsRequest.decode(reader, reader.uint32());
                                break;
                            case 417:
                                message.nixChannelsResponse = $root.replit.goval.api.NixChannelsResponse.decode(reader, reader.uint32());
                                break;
                            case 418:
                                message.nixChannelLatestStableRequest = $root.replit.goval.api.NixChannelLatestStableRequest.decode(reader, reader.uint32());
                                break;
                            case 419:
                                message.nixChannelLatestStableResponse = $root.replit.goval.api.NixChannelLatestStableResponse.decode(reader, reader.uint32());
                                break;
                            case 420:
                                message.nixPackageSearchRequest = $root.replit.goval.api.NixPackageSearchRequest.decode(reader, reader.uint32());
                                break;
                            case 421:
                                message.nixPackageSearchResponse = $root.replit.goval.api.NixPackageSearchResponse.decode(reader, reader.uint32());
                                break;
                            case 423:
                                message.userEvent = $root.replit.goval.api.UserEvent.decode(reader, reader.uint32());
                                break;
                            case 424:
                                message.replspaceApiOpenFile = $root.replit.goval.api.ReplspaceApiOpenFile.decode(reader, reader.uint32());
                                break;
                            case 425:
                                message.replspaceApiCloseFile = $root.replit.goval.api.ReplspaceApiCloseFile.decode(reader, reader.uint32());
                                break;
                            case 426:
                                message.replspaceApiGetGitHubToken = $root.replit.goval.api.ReplspaceApiGetGitHubToken.decode(reader, reader.uint32());
                                break;
                            case 427:
                                message.replspaceApiGitHubToken = $root.replit.goval.api.ReplspaceApiGitHubToken.decode(reader, reader.uint32());
                                break;
                            case 1000:
                                message.ref = reader.string();
                                break;
                            case 1001:
                                if (message.traceInfo === $util.emptyObject)
                                    message.traceInfo = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.traceInfo[key] = value;
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Command message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Command} Command
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Command.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Command message.
                     * @function verify
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Command.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            if (!$util.isInteger(message.channel))
                                return "channel: integer expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        if (message.openChan != null && message.hasOwnProperty("openChan")) {
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OpenChannel.verify(message.openChan);
                                if (error)
                                    return "openChan." + error;
                            }
                        }
                        if (message.openChanRes != null && message.hasOwnProperty("openChanRes")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OpenChannelRes.verify(message.openChanRes);
                                if (error)
                                    return "openChanRes." + error;
                            }
                        }
                        if (message.closeChan != null && message.hasOwnProperty("closeChan")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.CloseChannel.verify(message.closeChan);
                                if (error)
                                    return "closeChan." + error;
                            }
                        }
                        if (message.closeChanRes != null && message.hasOwnProperty("closeChanRes")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.CloseChannelRes.verify(message.closeChanRes);
                                if (error)
                                    return "closeChanRes." + error;
                            }
                        }
                        if (message.containerState != null && message.hasOwnProperty("containerState")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ContainerState.verify(message.containerState);
                                if (error)
                                    return "containerState." + error;
                            }
                        }
                        if (message.portOpen != null && message.hasOwnProperty("portOpen")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PortOpen.verify(message.portOpen);
                                if (error)
                                    return "portOpen." + error;
                            }
                        }
                        if (message.portClose != null && message.hasOwnProperty("portClose")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PortClose.verify(message.portClose);
                                if (error)
                                    return "portClose." + error;
                            }
                        }
                        if (message.toast != null && message.hasOwnProperty("toast")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Toast.verify(message.toast);
                                if (error)
                                    return "toast." + error;
                            }
                        }
                        if (message.protocolError != null && message.hasOwnProperty("protocolError")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ProtocolError.verify(message.protocolError);
                                if (error)
                                    return "protocolError." + error;
                            }
                        }
                        if (message.redirect != null && message.hasOwnProperty("redirect")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Redirect.verify(message.redirect);
                                if (error)
                                    return "redirect." + error;
                            }
                        }
                        if (message.alwaysOn != null && message.hasOwnProperty("alwaysOn")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.AlwaysOn.verify(message.alwaysOn);
                                if (error)
                                    return "alwaysOn." + error;
                            }
                        }
                        if (message.runMain != null && message.hasOwnProperty("runMain")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.RunMain.verify(message.runMain);
                                if (error)
                                    return "runMain." + error;
                            }
                        }
                        if (message.clear != null && message.hasOwnProperty("clear")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Clear.verify(message.clear);
                                if (error)
                                    return "clear." + error;
                            }
                        }
                        if (message["eval"] != null && message.hasOwnProperty("eval")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message["eval"]))
                                return "eval: string expected";
                        }
                        if (message.result != null && message.hasOwnProperty("result")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.result))
                                return "result: string expected";
                        }
                        if (message.input != null && message.hasOwnProperty("input")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.input))
                                return "input: string expected";
                        }
                        if (message.output != null && message.hasOwnProperty("output")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.output))
                                return "output: string expected";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        }
                        if (message.stderr != null && message.hasOwnProperty("stderr")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.stderr))
                                return "stderr: string expected";
                        }
                        if (message.log != null && message.hasOwnProperty("log")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.log))
                                return "log: string expected";
                        }
                        if (message.record != null && message.hasOwnProperty("record")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.record))
                                return "record: string expected";
                        }
                        if (message.saneTerm != null && message.hasOwnProperty("saneTerm")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.SaneTerm.verify(message.saneTerm);
                                if (error)
                                    return "saneTerm." + error;
                            }
                        }
                        if (message.resizeTerm != null && message.hasOwnProperty("resizeTerm")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ResizeTerm.verify(message.resizeTerm);
                                if (error)
                                    return "resizeTerm." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        }
                        if (message.ok != null && message.hasOwnProperty("ok")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OK.verify(message.ok);
                                if (error)
                                    return "ok." + error;
                            }
                        }
                        if (message.persist != null && message.hasOwnProperty("persist")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.persist);
                                if (error)
                                    return "persist." + error;
                            }
                        }
                        if (message.persistMirror != null && message.hasOwnProperty("persistMirror")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.persistMirror);
                                if (error)
                                    return "persistMirror." + error;
                            }
                        }
                        if (message.write != null && message.hasOwnProperty("write")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.write);
                                if (error)
                                    return "write." + error;
                            }
                        }
                        if (message.remove != null && message.hasOwnProperty("remove")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.remove);
                                if (error)
                                    return "remove." + error;
                            }
                        }
                        if (message.move != null && message.hasOwnProperty("move")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Move.verify(message.move);
                                if (error)
                                    return "move." + error;
                            }
                        }
                        if (message.tryRemove != null && message.hasOwnProperty("tryRemove")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.tryRemove);
                                if (error)
                                    return "tryRemove." + error;
                            }
                        }
                        if (message.mkdir != null && message.hasOwnProperty("mkdir")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.mkdir);
                                if (error)
                                    return "mkdir." + error;
                            }
                        }
                        if (message.stat != null && message.hasOwnProperty("stat")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.stat);
                                if (error)
                                    return "stat." + error;
                            }
                        }
                        if (message.statRes != null && message.hasOwnProperty("statRes")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.StatResult.verify(message.statRes);
                                if (error)
                                    return "statRes." + error;
                            }
                        }
                        if (message.transferStart != null && message.hasOwnProperty("transferStart")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.TransferStart.verify(message.transferStart);
                                if (error)
                                    return "transferStart." + error;
                            }
                        }
                        if (message.transferChunk != null && message.hasOwnProperty("transferChunk")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.TransferChunk.verify(message.transferChunk);
                                if (error)
                                    return "transferChunk." + error;
                            }
                        }
                        if (message.transferComplete != null && message.hasOwnProperty("transferComplete")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.TransferComplete.verify(message.transferComplete);
                                if (error)
                                    return "transferComplete." + error;
                            }
                        }
                        if (message.transferCancel != null && message.hasOwnProperty("transferCancel")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Transfer.verify(message.transferCancel);
                                if (error)
                                    return "transferCancel." + error;
                            }
                        }
                        if (message.transfer != null && message.hasOwnProperty("transfer")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Transfer.verify(message.transfer);
                                if (error)
                                    return "transfer." + error;
                            }
                        }
                        if (message.read != null && message.hasOwnProperty("read")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.read);
                                if (error)
                                    return "read." + error;
                            }
                        }
                        if (message.readdir != null && message.hasOwnProperty("readdir")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.readdir);
                                if (error)
                                    return "readdir." + error;
                            }
                        }
                        if (message.files != null && message.hasOwnProperty("files")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Files.verify(message.files);
                                if (error)
                                    return "files." + error;
                            }
                        }
                        if (message.file != null && message.hasOwnProperty("file")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.File.verify(message.file);
                                if (error)
                                    return "file." + error;
                            }
                        }
                        if (message.checkChanges != null && message.hasOwnProperty("checkChanges")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.CheckChanges.verify(message.checkChanges);
                                if (error)
                                    return "checkChanges." + error;
                            }
                        }
                        if (message.changedFiles != null && message.hasOwnProperty("changedFiles")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Files.verify(message.changedFiles);
                                if (error)
                                    return "changedFiles." + error;
                            }
                        }
                        if (message.lintResults != null && message.hasOwnProperty("lintResults")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.LintResults.verify(message.lintResults);
                                if (error)
                                    return "lintResults." + error;
                            }
                        }
                        if (message.runContainedTest != null && message.hasOwnProperty("runContainedTest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ContainedTest.verify(message.runContainedTest);
                                if (error)
                                    return "runContainedTest." + error;
                            }
                        }
                        if (message.testResult != null && message.hasOwnProperty("testResult")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.TestResult.verify(message.testResult);
                                if (error)
                                    return "testResult." + error;
                            }
                        }
                        if (message.debuggerStart != null && message.hasOwnProperty("debuggerStart")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (!$util.isString(message.debuggerStart))
                                return "debuggerStart: string expected";
                        }
                        if (message.debuggerStep != null && message.hasOwnProperty("debuggerStep")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.RunMain.verify(message.debuggerStep);
                                if (error)
                                    return "debuggerStep." + error;
                            }
                        }
                        if (message.debuggerStatus != null && message.hasOwnProperty("debuggerStatus")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugStatus.verify(message.debuggerStatus);
                                if (error)
                                    return "debuggerStatus." + error;
                            }
                        }
                        if (message.ensurePackages != null && message.hasOwnProperty("ensurePackages")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.EnsurePackages.verify(message.ensurePackages);
                                if (error)
                                    return "ensurePackages." + error;
                            }
                        }
                        if (message.ping != null && message.hasOwnProperty("ping")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Ping.verify(message.ping);
                                if (error)
                                    return "ping." + error;
                            }
                        }
                        if (message.pong != null && message.hasOwnProperty("pong")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Pong.verify(message.pong);
                                if (error)
                                    return "pong." + error;
                            }
                        }
                        if (message.hello != null && message.hasOwnProperty("hello")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Hello.verify(message.hello);
                                if (error)
                                    return "hello." + error;
                            }
                        }
                        if (message.goodbye != null && message.hasOwnProperty("goodbye")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Goodbye.verify(message.goodbye);
                                if (error)
                                    return "goodbye." + error;
                            }
                        }
                        if (message.proxyGoingAway != null && message.hasOwnProperty("proxyGoingAway")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ProxyGoingAway.verify(message.proxyGoingAway);
                                if (error)
                                    return "proxyGoingAway." + error;
                            }
                        }
                        if (message.hint != null && message.hasOwnProperty("hint")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Hint.verify(message.hint);
                                if (error)
                                    return "hint." + error;
                            }
                        }
                        if (message.connect != null && message.hasOwnProperty("connect")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Connect.verify(message.connect);
                                if (error)
                                    return "connect." + error;
                            }
                        }
                        if (message.send != null && message.hasOwnProperty("send")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Send.verify(message.send);
                                if (error)
                                    return "send." + error;
                            }
                        }
                        if (message.recv != null && message.hasOwnProperty("recv")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Recv.verify(message.recv);
                                if (error)
                                    return "recv." + error;
                            }
                        }
                        if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Disconnect.verify(message.disconnect);
                                if (error)
                                    return "disconnect." + error;
                            }
                        }
                        if (message.fileAuthReq != null && message.hasOwnProperty("fileAuthReq")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FileAuthReq.verify(message.fileAuthReq);
                                if (error)
                                    return "fileAuthReq." + error;
                            }
                        }
                        if (message.fileAuthRes != null && message.hasOwnProperty("fileAuthRes")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FileAuthRes.verify(message.fileAuthRes);
                                if (error)
                                    return "fileAuthRes." + error;
                            }
                        }
                        if (message.mutliFileAuthRes != null && message.hasOwnProperty("mutliFileAuthRes")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.MultiFileAuthRes.verify(message.mutliFileAuthRes);
                                if (error)
                                    return "mutliFileAuthRes." + error;
                            }
                        }
                        if (message.listObjects != null && message.hasOwnProperty("listObjects")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ListObjects.verify(message.listObjects);
                                if (error)
                                    return "listObjects." + error;
                            }
                        }
                        if (message.listObjectsResp != null && message.hasOwnProperty("listObjectsResp")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ListObjectsResp.verify(message.listObjectsResp);
                                if (error)
                                    return "listObjectsResp." + error;
                            }
                        }
                        if (message.ot != null && message.hasOwnProperty("ot")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTPacket.verify(message.ot);
                                if (error)
                                    return "ot." + error;
                            }
                        }
                        if (message.otstatus != null && message.hasOwnProperty("otstatus")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTStatus.verify(message.otstatus);
                                if (error)
                                    return "otstatus." + error;
                            }
                        }
                        if (message.otLinkFile != null && message.hasOwnProperty("otLinkFile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTLinkFile.verify(message.otLinkFile);
                                if (error)
                                    return "otLinkFile." + error;
                            }
                        }
                        if (message.otLinkFileResponse != null && message.hasOwnProperty("otLinkFileResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTLinkFileResponse.verify(message.otLinkFileResponse);
                                if (error)
                                    return "otLinkFileResponse." + error;
                            }
                        }
                        if (message.otNewCursor != null && message.hasOwnProperty("otNewCursor")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTCursor.verify(message.otNewCursor);
                                if (error)
                                    return "otNewCursor." + error;
                            }
                        }
                        if (message.otDeleteCursor != null && message.hasOwnProperty("otDeleteCursor")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTCursor.verify(message.otDeleteCursor);
                                if (error)
                                    return "otDeleteCursor." + error;
                            }
                        }
                        if (message.otFetchRequest != null && message.hasOwnProperty("otFetchRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTFetchRequest.verify(message.otFetchRequest);
                                if (error)
                                    return "otFetchRequest." + error;
                            }
                        }
                        if (message.otFetchResponse != null && message.hasOwnProperty("otFetchResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTFetchResponse.verify(message.otFetchResponse);
                                if (error)
                                    return "otFetchResponse." + error;
                            }
                        }
                        if (message.otTransformSelectionRequest != null && message.hasOwnProperty("otTransformSelectionRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTTransformSelectionRequest.verify(message.otTransformSelectionRequest);
                                if (error)
                                    return "otTransformSelectionRequest." + error;
                            }
                        }
                        if (message.otTransformSelectionResponse != null && message.hasOwnProperty("otTransformSelectionResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OTTransformSelectionResponse.verify(message.otTransformSelectionResponse);
                                if (error)
                                    return "otTransformSelectionResponse." + error;
                            }
                        }
                        if (message.flush != null && message.hasOwnProperty("flush")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Flush.verify(message.flush);
                                if (error)
                                    return "flush." + error;
                            }
                        }
                        if (message.debug != null && message.hasOwnProperty("debug")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Debug.verify(message.debug);
                                if (error)
                                    return "debug." + error;
                            }
                        }
                        if (message.startVCR != null && message.hasOwnProperty("startVCR")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.StartVCR.verify(message.startVCR);
                                if (error)
                                    return "startVCR." + error;
                            }
                        }
                        if (message.readVCR != null && message.hasOwnProperty("readVCR")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReadVCR.verify(message.readVCR);
                                if (error)
                                    return "readVCR." + error;
                            }
                        }
                        if (message.VCRLog != null && message.hasOwnProperty("VCRLog")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.VCRLog.verify(message.VCRLog);
                                if (error)
                                    return "VCRLog." + error;
                            }
                        }
                        if (message.auth != null && message.hasOwnProperty("auth")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Auth.verify(message.auth);
                                if (error)
                                    return "auth." + error;
                            }
                        }
                        if (message.execInfo != null && message.hasOwnProperty("execInfo")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ExecInfo.verify(message.execInfo);
                                if (error)
                                    return "execInfo." + error;
                            }
                        }
                        if (message.subscribeFile != null && message.hasOwnProperty("subscribeFile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.SubscribeFile.verify(message.subscribeFile);
                                if (error)
                                    return "subscribeFile." + error;
                            }
                        }
                        if (message.fileEvent != null && message.hasOwnProperty("fileEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FileEvent.verify(message.fileEvent);
                                if (error)
                                    return "fileEvent." + error;
                            }
                        }
                        if (message.roster != null && message.hasOwnProperty("roster")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Roster.verify(message.roster);
                                if (error)
                                    return "roster." + error;
                            }
                        }
                        if (message.join != null && message.hasOwnProperty("join")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.User.verify(message.join);
                                if (error)
                                    return "join." + error;
                            }
                        }
                        if (message.part != null && message.hasOwnProperty("part")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.User.verify(message.part);
                                if (error)
                                    return "part." + error;
                            }
                        }
                        if (message.openFile != null && message.hasOwnProperty("openFile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.OpenFile.verify(message.openFile);
                                if (error)
                                    return "openFile." + error;
                            }
                        }
                        if (message.fileOpened != null && message.hasOwnProperty("fileOpened")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FileOpened.verify(message.fileOpened);
                                if (error)
                                    return "fileOpened." + error;
                            }
                        }
                        if (message.followUser != null && message.hasOwnProperty("followUser")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FollowUser.verify(message.followUser);
                                if (error)
                                    return "followUser." + error;
                            }
                        }
                        if (message.unfollowUser != null && message.hasOwnProperty("unfollowUser")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.UnfollowUser.verify(message.unfollowUser);
                                if (error)
                                    return "unfollowUser." + error;
                            }
                        }
                        if (message.updateSessionTimestamp != null && message.hasOwnProperty("updateSessionTimestamp")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.UpdateSessionTimestamp.verify(message.updateSessionTimestamp);
                                if (error)
                                    return "updateSessionTimestamp." + error;
                            }
                        }
                        if (message.sessionTimestampUpdated != null && message.hasOwnProperty("sessionTimestampUpdated")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.SessionTimestampUpdated.verify(message.sessionTimestampUpdated);
                                if (error)
                                    return "sessionTimestampUpdated." + error;
                            }
                        }
                        if (message.exec != null && message.hasOwnProperty("exec")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Exec.verify(message.exec);
                                if (error)
                                    return "exec." + error;
                            }
                        }
                        if (message.packageSearch != null && message.hasOwnProperty("packageSearch")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageSearch.verify(message.packageSearch);
                                if (error)
                                    return "packageSearch." + error;
                            }
                        }
                        if (message.packageSearchResp != null && message.hasOwnProperty("packageSearchResp")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageSearchResp.verify(message.packageSearchResp);
                                if (error)
                                    return "packageSearchResp." + error;
                            }
                        }
                        if (message.packageInfo != null && message.hasOwnProperty("packageInfo")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageInfo.verify(message.packageInfo);
                                if (error)
                                    return "packageInfo." + error;
                            }
                        }
                        if (message.packageInfoResp != null && message.hasOwnProperty("packageInfoResp")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageInfoResp.verify(message.packageInfoResp);
                                if (error)
                                    return "packageInfoResp." + error;
                            }
                        }
                        if (message.packageAdd != null && message.hasOwnProperty("packageAdd")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageAdd.verify(message.packageAdd);
                                if (error)
                                    return "packageAdd." + error;
                            }
                        }
                        if (message.packageRemove != null && message.hasOwnProperty("packageRemove")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageRemove.verify(message.packageRemove);
                                if (error)
                                    return "packageRemove." + error;
                            }
                        }
                        if (message.packageInstall != null && message.hasOwnProperty("packageInstall")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageInstall.verify(message.packageInstall);
                                if (error)
                                    return "packageInstall." + error;
                            }
                        }
                        if (message.packageListSpecfile != null && message.hasOwnProperty("packageListSpecfile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageListSpecfile.verify(message.packageListSpecfile);
                                if (error)
                                    return "packageListSpecfile." + error;
                            }
                        }
                        if (message.packageListSpecfileResp != null && message.hasOwnProperty("packageListSpecfileResp")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageListSpecfileResp.verify(message.packageListSpecfileResp);
                                if (error)
                                    return "packageListSpecfileResp." + error;
                            }
                        }
                        if (message.packageCacheSave != null && message.hasOwnProperty("packageCacheSave")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PackageCacheSave.verify(message.packageCacheSave);
                                if (error)
                                    return "packageCacheSave." + error;
                            }
                        }
                        if (message.chatMessage != null && message.hasOwnProperty("chatMessage")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ChatMessage.verify(message.chatMessage);
                                if (error)
                                    return "chatMessage." + error;
                            }
                        }
                        if (message.chatTyping != null && message.hasOwnProperty("chatTyping")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ChatTyping.verify(message.chatTyping);
                                if (error)
                                    return "chatTyping." + error;
                            }
                        }
                        if (message.chatScrollback != null && message.hasOwnProperty("chatScrollback")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ChatScrollback.verify(message.chatScrollback);
                                if (error)
                                    return "chatScrollback." + error;
                            }
                        }
                        if (message.fsSnapshot != null && message.hasOwnProperty("fsSnapshot")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FSSnapshot.verify(message.fsSnapshot);
                                if (error)
                                    return "fsSnapshot." + error;
                            }
                        }
                        if (message.fsSnapshotEvent != null && message.hasOwnProperty("fsSnapshotEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FSSnapshotEvent.verify(message.fsSnapshotEvent);
                                if (error)
                                    return "fsSnapshotEvent." + error;
                            }
                        }
                        if (message.fsTakeLock != null && message.hasOwnProperty("fsTakeLock")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FSLock.verify(message.fsTakeLock);
                                if (error)
                                    return "fsTakeLock." + error;
                            }
                        }
                        if (message.fsReleaseLock != null && message.hasOwnProperty("fsReleaseLock")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FSLock.verify(message.fsReleaseLock);
                                if (error)
                                    return "fsReleaseLock." + error;
                            }
                        }
                        if (message.hasCap != null && message.hasOwnProperty("hasCap")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (typeof message.hasCap !== "boolean")
                                return "hasCap: boolean expected";
                        }
                        if (message.snapshotEvent != null && message.hasOwnProperty("snapshotEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.SnapshotEvent.verify(message.snapshotEvent);
                                if (error)
                                    return "snapshotEvent." + error;
                            }
                        }
                        if (message.NoninteractiveFSChangeEvent != null && message.hasOwnProperty("NoninteractiveFSChangeEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            if (typeof message.NoninteractiveFSChangeEvent !== "boolean")
                                return "NoninteractiveFSChangeEvent: boolean expected";
                        }
                        if (message.pid1Config != null && message.hasOwnProperty("pid1Config")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Pid1Config.verify(message.pid1Config);
                                if (error)
                                    return "pid1Config." + error;
                            }
                        }
                        if (message.metrics != null && message.hasOwnProperty("metrics")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Metrics.verify(message.metrics);
                                if (error)
                                    return "metrics." + error;
                            }
                        }
                        if (message.bootStatus != null && message.hasOwnProperty("bootStatus")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.BootStatus.verify(message.bootStatus);
                                if (error)
                                    return "bootStatus." + error;
                            }
                        }
                        if (message.readMetaRequest != null && message.hasOwnProperty("readMetaRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReadMetaRequest.verify(message.readMetaRequest);
                                if (error)
                                    return "readMetaRequest." + error;
                            }
                        }
                        if (message.readMetaResponse != null && message.hasOwnProperty("readMetaResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReadMetaResponse.verify(message.readMetaResponse);
                                if (error)
                                    return "readMetaResponse." + error;
                            }
                        }
                        if (message.writeMetaRequest != null && message.hasOwnProperty("writeMetaRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.WriteMetaRequest.verify(message.writeMetaRequest);
                                if (error)
                                    return "writeMetaRequest." + error;
                            }
                        }
                        if (message.writeMetaResponse != null && message.hasOwnProperty("writeMetaResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.WriteMetaResponse.verify(message.writeMetaResponse);
                                if (error)
                                    return "writeMetaResponse." + error;
                            }
                        }
                        if (message.appendMetaRequest != null && message.hasOwnProperty("appendMetaRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.AppendMetaRequest.verify(message.appendMetaRequest);
                                if (error)
                                    return "appendMetaRequest." + error;
                            }
                        }
                        if (message.appendMetaResponse != null && message.hasOwnProperty("appendMetaResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.AppendMetaResponse.verify(message.appendMetaResponse);
                                if (error)
                                    return "appendMetaResponse." + error;
                            }
                        }
                        if (message.audio != null && message.hasOwnProperty("audio")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Audio.verify(message.audio);
                                if (error)
                                    return "audio." + error;
                            }
                        }
                        if (message.pprofRequest != null && message.hasOwnProperty("pprofRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofRequest.verify(message.pprofRequest);
                                if (error)
                                    return "pprofRequest." + error;
                            }
                        }
                        if (message.pprofResponse != null && message.hasOwnProperty("pprofResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofResponse.verify(message.pprofResponse);
                                if (error)
                                    return "pprofResponse." + error;
                            }
                        }
                        if (message.audio2 != null && message.hasOwnProperty("audio2")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.Audio2.verify(message.audio2);
                                if (error)
                                    return "audio2." + error;
                            }
                        }
                        if (message.PTYConfig != null && message.hasOwnProperty("PTYConfig")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PTYConfig.verify(message.PTYConfig);
                                if (error)
                                    return "PTYConfig." + error;
                            }
                        }
                        if (message.debugMain != null && message.hasOwnProperty("debugMain")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugMain.verify(message.debugMain);
                                if (error)
                                    return "debugMain." + error;
                            }
                        }
                        if (message.debugState != null && message.hasOwnProperty("debugState")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugState.verify(message.debugState);
                                if (error)
                                    return "debugState." + error;
                            }
                        }
                        if (message.debugMainReply != null && message.hasOwnProperty("debugMainReply")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugMainReply.verify(message.debugMainReply);
                                if (error)
                                    return "debugMainReply." + error;
                            }
                        }
                        if (message.debugInput != null && message.hasOwnProperty("debugInput")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugInput.verify(message.debugInput);
                                if (error)
                                    return "debugInput." + error;
                            }
                        }
                        if (message.debugOutput != null && message.hasOwnProperty("debugOutput")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugOutput.verify(message.debugOutput);
                                if (error)
                                    return "debugOutput." + error;
                            }
                        }
                        if (message.debugStop != null && message.hasOwnProperty("debugStop")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugStop.verify(message.debugStop);
                                if (error)
                                    return "debugStop." + error;
                            }
                        }
                        if (message.debugLeave != null && message.hasOwnProperty("debugLeave")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugLeave.verify(message.debugLeave);
                                if (error)
                                    return "debugLeave." + error;
                            }
                        }
                        if (message.debugSessions != null && message.hasOwnProperty("debugSessions")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugSessions.verify(message.debugSessions);
                                if (error)
                                    return "debugSessions." + error;
                            }
                        }
                        if (message.debugAddBreakpointRequest != null && message.hasOwnProperty("debugAddBreakpointRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugAddBreakpointRequest.verify(message.debugAddBreakpointRequest);
                                if (error)
                                    return "debugAddBreakpointRequest." + error;
                            }
                        }
                        if (message.debugUpdateBreakpointRequest != null && message.hasOwnProperty("debugUpdateBreakpointRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugUpdateBreakpointRequest.verify(message.debugUpdateBreakpointRequest);
                                if (error)
                                    return "debugUpdateBreakpointRequest." + error;
                            }
                        }
                        if (message.debugRemoveBreakpointRequest != null && message.hasOwnProperty("debugRemoveBreakpointRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugRemoveBreakpointRequest.verify(message.debugRemoveBreakpointRequest);
                                if (error)
                                    return "debugRemoveBreakpointRequest." + error;
                            }
                        }
                        if (message.debugBreakpointEvent != null && message.hasOwnProperty("debugBreakpointEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DebugBreakpointEvent.verify(message.debugBreakpointEvent);
                                if (error)
                                    return "debugBreakpointEvent." + error;
                            }
                        }
                        if (message.dotReplitGetRequest != null && message.hasOwnProperty("dotReplitGetRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DotReplitGetRequest.verify(message.dotReplitGetRequest);
                                if (error)
                                    return "dotReplitGetRequest." + error;
                            }
                        }
                        if (message.dotReplitGetResponse != null && message.hasOwnProperty("dotReplitGetResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DotReplitGetResponse.verify(message.dotReplitGetResponse);
                                if (error)
                                    return "dotReplitGetResponse." + error;
                            }
                        }
                        if (message.runConfigGetRequest != null && message.hasOwnProperty("runConfigGetRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.RunConfigGetRequest.verify(message.runConfigGetRequest);
                                if (error)
                                    return "runConfigGetRequest." + error;
                            }
                        }
                        if (message.runConfigGetResponse != null && message.hasOwnProperty("runConfigGetResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.RunConfigGetResponse.verify(message.runConfigGetResponse);
                                if (error)
                                    return "runConfigGetResponse." + error;
                            }
                        }
                        if (message.dotReplitUpdateRequest != null && message.hasOwnProperty("dotReplitUpdateRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DotReplitUpdateRequest.verify(message.dotReplitUpdateRequest);
                                if (error)
                                    return "dotReplitUpdateRequest." + error;
                            }
                        }
                        if (message.dotReplitUpdateResponse != null && message.hasOwnProperty("dotReplitUpdateResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.DotReplitUpdateResponse.verify(message.dotReplitUpdateResponse);
                                if (error)
                                    return "dotReplitUpdateResponse." + error;
                            }
                        }
                        if (message.startLSP != null && message.hasOwnProperty("startLSP")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.StartLSP.verify(message.startLSP);
                                if (error)
                                    return "startLSP." + error;
                            }
                        }
                        if (message.firewallDenied != null && message.hasOwnProperty("firewallDenied")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.FirewallDenied.verify(message.firewallDenied);
                                if (error)
                                    return "firewallDenied." + error;
                            }
                        }
                        if (message.nixPackageAddRequest != null && message.hasOwnProperty("nixPackageAddRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageAddRequest.verify(message.nixPackageAddRequest);
                                if (error)
                                    return "nixPackageAddRequest." + error;
                            }
                        }
                        if (message.nixPackageAddResponse != null && message.hasOwnProperty("nixPackageAddResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageAddResponse.verify(message.nixPackageAddResponse);
                                if (error)
                                    return "nixPackageAddResponse." + error;
                            }
                        }
                        if (message.nixPackageRemoveRequest != null && message.hasOwnProperty("nixPackageRemoveRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageRemoveRequest.verify(message.nixPackageRemoveRequest);
                                if (error)
                                    return "nixPackageRemoveRequest." + error;
                            }
                        }
                        if (message.nixPackageRemoveResponse != null && message.hasOwnProperty("nixPackageRemoveResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageRemoveResponse.verify(message.nixPackageRemoveResponse);
                                if (error)
                                    return "nixPackageRemoveResponse." + error;
                            }
                        }
                        if (message.nixPackageListRequest != null && message.hasOwnProperty("nixPackageListRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageListRequest.verify(message.nixPackageListRequest);
                                if (error)
                                    return "nixPackageListRequest." + error;
                            }
                        }
                        if (message.nixPackageListResponse != null && message.hasOwnProperty("nixPackageListResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageListResponse.verify(message.nixPackageListResponse);
                                if (error)
                                    return "nixPackageListResponse." + error;
                            }
                        }
                        if (message.nixChannelsRequest != null && message.hasOwnProperty("nixChannelsRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixChannelsRequest.verify(message.nixChannelsRequest);
                                if (error)
                                    return "nixChannelsRequest." + error;
                            }
                        }
                        if (message.nixChannelsResponse != null && message.hasOwnProperty("nixChannelsResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixChannelsResponse.verify(message.nixChannelsResponse);
                                if (error)
                                    return "nixChannelsResponse." + error;
                            }
                        }
                        if (message.nixChannelLatestStableRequest != null && message.hasOwnProperty("nixChannelLatestStableRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixChannelLatestStableRequest.verify(message.nixChannelLatestStableRequest);
                                if (error)
                                    return "nixChannelLatestStableRequest." + error;
                            }
                        }
                        if (message.nixChannelLatestStableResponse != null && message.hasOwnProperty("nixChannelLatestStableResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixChannelLatestStableResponse.verify(message.nixChannelLatestStableResponse);
                                if (error)
                                    return "nixChannelLatestStableResponse." + error;
                            }
                        }
                        if (message.nixPackageSearchRequest != null && message.hasOwnProperty("nixPackageSearchRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageSearchRequest.verify(message.nixPackageSearchRequest);
                                if (error)
                                    return "nixPackageSearchRequest." + error;
                            }
                        }
                        if (message.nixPackageSearchResponse != null && message.hasOwnProperty("nixPackageSearchResponse")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.NixPackageSearchResponse.verify(message.nixPackageSearchResponse);
                                if (error)
                                    return "nixPackageSearchResponse." + error;
                            }
                        }
                        if (message.userEvent != null && message.hasOwnProperty("userEvent")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.UserEvent.verify(message.userEvent);
                                if (error)
                                    return "userEvent." + error;
                            }
                        }
                        if (message.replspaceApiOpenFile != null && message.hasOwnProperty("replspaceApiOpenFile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReplspaceApiOpenFile.verify(message.replspaceApiOpenFile);
                                if (error)
                                    return "replspaceApiOpenFile." + error;
                            }
                        }
                        if (message.replspaceApiCloseFile != null && message.hasOwnProperty("replspaceApiCloseFile")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReplspaceApiCloseFile.verify(message.replspaceApiCloseFile);
                                if (error)
                                    return "replspaceApiCloseFile." + error;
                            }
                        }
                        if (message.replspaceApiGetGitHubToken != null && message.hasOwnProperty("replspaceApiGetGitHubToken")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReplspaceApiGetGitHubToken.verify(message.replspaceApiGetGitHubToken);
                                if (error)
                                    return "replspaceApiGetGitHubToken." + error;
                            }
                        }
                        if (message.replspaceApiGitHubToken != null && message.hasOwnProperty("replspaceApiGitHubToken")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.ReplspaceApiGitHubToken.verify(message.replspaceApiGitHubToken);
                                if (error)
                                    return "replspaceApiGitHubToken." + error;
                            }
                        }
                        if (message.ref != null && message.hasOwnProperty("ref"))
                            if (!$util.isString(message.ref))
                                return "ref: string expected";
                        if (message.traceInfo != null && message.hasOwnProperty("traceInfo")) {
                            if (!$util.isObject(message.traceInfo))
                                return "traceInfo: object expected";
                            var key = Object.keys(message.traceInfo);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.traceInfo[key[i]]))
                                    return "traceInfo: string{k:string} expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Command message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Command} Command
                     */
                    Command.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Command)
                            return object;
                        var message = new $root.replit.goval.api.Command();
                        if (object.channel != null)
                            message.channel = object.channel | 0;
                        if (object.session != null)
                            message.session = object.session | 0;
                        if (object.openChan != null) {
                            if (typeof object.openChan !== "object")
                                throw TypeError(".replit.goval.api.Command.openChan: object expected");
                            message.openChan = $root.replit.goval.api.OpenChannel.fromObject(object.openChan);
                        }
                        if (object.openChanRes != null) {
                            if (typeof object.openChanRes !== "object")
                                throw TypeError(".replit.goval.api.Command.openChanRes: object expected");
                            message.openChanRes = $root.replit.goval.api.OpenChannelRes.fromObject(object.openChanRes);
                        }
                        if (object.closeChan != null) {
                            if (typeof object.closeChan !== "object")
                                throw TypeError(".replit.goval.api.Command.closeChan: object expected");
                            message.closeChan = $root.replit.goval.api.CloseChannel.fromObject(object.closeChan);
                        }
                        if (object.closeChanRes != null) {
                            if (typeof object.closeChanRes !== "object")
                                throw TypeError(".replit.goval.api.Command.closeChanRes: object expected");
                            message.closeChanRes = $root.replit.goval.api.CloseChannelRes.fromObject(object.closeChanRes);
                        }
                        if (object.containerState != null) {
                            if (typeof object.containerState !== "object")
                                throw TypeError(".replit.goval.api.Command.containerState: object expected");
                            message.containerState = $root.replit.goval.api.ContainerState.fromObject(object.containerState);
                        }
                        if (object.portOpen != null) {
                            if (typeof object.portOpen !== "object")
                                throw TypeError(".replit.goval.api.Command.portOpen: object expected");
                            message.portOpen = $root.replit.goval.api.PortOpen.fromObject(object.portOpen);
                        }
                        if (object.portClose != null) {
                            if (typeof object.portClose !== "object")
                                throw TypeError(".replit.goval.api.Command.portClose: object expected");
                            message.portClose = $root.replit.goval.api.PortClose.fromObject(object.portClose);
                        }
                        if (object.toast != null) {
                            if (typeof object.toast !== "object")
                                throw TypeError(".replit.goval.api.Command.toast: object expected");
                            message.toast = $root.replit.goval.api.Toast.fromObject(object.toast);
                        }
                        if (object.protocolError != null) {
                            if (typeof object.protocolError !== "object")
                                throw TypeError(".replit.goval.api.Command.protocolError: object expected");
                            message.protocolError = $root.replit.goval.api.ProtocolError.fromObject(object.protocolError);
                        }
                        if (object.redirect != null) {
                            if (typeof object.redirect !== "object")
                                throw TypeError(".replit.goval.api.Command.redirect: object expected");
                            message.redirect = $root.replit.goval.api.Redirect.fromObject(object.redirect);
                        }
                        if (object.alwaysOn != null) {
                            if (typeof object.alwaysOn !== "object")
                                throw TypeError(".replit.goval.api.Command.alwaysOn: object expected");
                            message.alwaysOn = $root.replit.goval.api.AlwaysOn.fromObject(object.alwaysOn);
                        }
                        if (object.runMain != null) {
                            if (typeof object.runMain !== "object")
                                throw TypeError(".replit.goval.api.Command.runMain: object expected");
                            message.runMain = $root.replit.goval.api.RunMain.fromObject(object.runMain);
                        }
                        if (object.clear != null) {
                            if (typeof object.clear !== "object")
                                throw TypeError(".replit.goval.api.Command.clear: object expected");
                            message.clear = $root.replit.goval.api.Clear.fromObject(object.clear);
                        }
                        if (object["eval"] != null)
                            message["eval"] = String(object["eval"]);
                        if (object.result != null)
                            message.result = String(object.result);
                        if (object.input != null)
                            message.input = String(object.input);
                        if (object.output != null)
                            message.output = String(object.output);
                        if (object.error != null)
                            message.error = String(object.error);
                        if (object.stderr != null)
                            message.stderr = String(object.stderr);
                        if (object.log != null)
                            message.log = String(object.log);
                        if (object.record != null)
                            message.record = String(object.record);
                        if (object.saneTerm != null) {
                            if (typeof object.saneTerm !== "object")
                                throw TypeError(".replit.goval.api.Command.saneTerm: object expected");
                            message.saneTerm = $root.replit.goval.api.SaneTerm.fromObject(object.saneTerm);
                        }
                        if (object.resizeTerm != null) {
                            if (typeof object.resizeTerm !== "object")
                                throw TypeError(".replit.goval.api.Command.resizeTerm: object expected");
                            message.resizeTerm = $root.replit.goval.api.ResizeTerm.fromObject(object.resizeTerm);
                        }
                        switch (object.state) {
                        case "Stopped":
                        case 0:
                            message.state = 0;
                            break;
                        case "Running":
                        case 1:
                            message.state = 1;
                            break;
                        }
                        if (object.ok != null) {
                            if (typeof object.ok !== "object")
                                throw TypeError(".replit.goval.api.Command.ok: object expected");
                            message.ok = $root.replit.goval.api.OK.fromObject(object.ok);
                        }
                        if (object.persist != null) {
                            if (typeof object.persist !== "object")
                                throw TypeError(".replit.goval.api.Command.persist: object expected");
                            message.persist = $root.replit.goval.api.File.fromObject(object.persist);
                        }
                        if (object.persistMirror != null) {
                            if (typeof object.persistMirror !== "object")
                                throw TypeError(".replit.goval.api.Command.persistMirror: object expected");
                            message.persistMirror = $root.replit.goval.api.File.fromObject(object.persistMirror);
                        }
                        if (object.write != null) {
                            if (typeof object.write !== "object")
                                throw TypeError(".replit.goval.api.Command.write: object expected");
                            message.write = $root.replit.goval.api.File.fromObject(object.write);
                        }
                        if (object.remove != null) {
                            if (typeof object.remove !== "object")
                                throw TypeError(".replit.goval.api.Command.remove: object expected");
                            message.remove = $root.replit.goval.api.File.fromObject(object.remove);
                        }
                        if (object.move != null) {
                            if (typeof object.move !== "object")
                                throw TypeError(".replit.goval.api.Command.move: object expected");
                            message.move = $root.replit.goval.api.Move.fromObject(object.move);
                        }
                        if (object.tryRemove != null) {
                            if (typeof object.tryRemove !== "object")
                                throw TypeError(".replit.goval.api.Command.tryRemove: object expected");
                            message.tryRemove = $root.replit.goval.api.File.fromObject(object.tryRemove);
                        }
                        if (object.mkdir != null) {
                            if (typeof object.mkdir !== "object")
                                throw TypeError(".replit.goval.api.Command.mkdir: object expected");
                            message.mkdir = $root.replit.goval.api.File.fromObject(object.mkdir);
                        }
                        if (object.stat != null) {
                            if (typeof object.stat !== "object")
                                throw TypeError(".replit.goval.api.Command.stat: object expected");
                            message.stat = $root.replit.goval.api.File.fromObject(object.stat);
                        }
                        if (object.statRes != null) {
                            if (typeof object.statRes !== "object")
                                throw TypeError(".replit.goval.api.Command.statRes: object expected");
                            message.statRes = $root.replit.goval.api.StatResult.fromObject(object.statRes);
                        }
                        if (object.transferStart != null) {
                            if (typeof object.transferStart !== "object")
                                throw TypeError(".replit.goval.api.Command.transferStart: object expected");
                            message.transferStart = $root.replit.goval.api.TransferStart.fromObject(object.transferStart);
                        }
                        if (object.transferChunk != null) {
                            if (typeof object.transferChunk !== "object")
                                throw TypeError(".replit.goval.api.Command.transferChunk: object expected");
                            message.transferChunk = $root.replit.goval.api.TransferChunk.fromObject(object.transferChunk);
                        }
                        if (object.transferComplete != null) {
                            if (typeof object.transferComplete !== "object")
                                throw TypeError(".replit.goval.api.Command.transferComplete: object expected");
                            message.transferComplete = $root.replit.goval.api.TransferComplete.fromObject(object.transferComplete);
                        }
                        if (object.transferCancel != null) {
                            if (typeof object.transferCancel !== "object")
                                throw TypeError(".replit.goval.api.Command.transferCancel: object expected");
                            message.transferCancel = $root.replit.goval.api.Transfer.fromObject(object.transferCancel);
                        }
                        if (object.transfer != null) {
                            if (typeof object.transfer !== "object")
                                throw TypeError(".replit.goval.api.Command.transfer: object expected");
                            message.transfer = $root.replit.goval.api.Transfer.fromObject(object.transfer);
                        }
                        if (object.read != null) {
                            if (typeof object.read !== "object")
                                throw TypeError(".replit.goval.api.Command.read: object expected");
                            message.read = $root.replit.goval.api.File.fromObject(object.read);
                        }
                        if (object.readdir != null) {
                            if (typeof object.readdir !== "object")
                                throw TypeError(".replit.goval.api.Command.readdir: object expected");
                            message.readdir = $root.replit.goval.api.File.fromObject(object.readdir);
                        }
                        if (object.files != null) {
                            if (typeof object.files !== "object")
                                throw TypeError(".replit.goval.api.Command.files: object expected");
                            message.files = $root.replit.goval.api.Files.fromObject(object.files);
                        }
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.Command.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        if (object.checkChanges != null) {
                            if (typeof object.checkChanges !== "object")
                                throw TypeError(".replit.goval.api.Command.checkChanges: object expected");
                            message.checkChanges = $root.replit.goval.api.CheckChanges.fromObject(object.checkChanges);
                        }
                        if (object.changedFiles != null) {
                            if (typeof object.changedFiles !== "object")
                                throw TypeError(".replit.goval.api.Command.changedFiles: object expected");
                            message.changedFiles = $root.replit.goval.api.Files.fromObject(object.changedFiles);
                        }
                        if (object.lintResults != null) {
                            if (typeof object.lintResults !== "object")
                                throw TypeError(".replit.goval.api.Command.lintResults: object expected");
                            message.lintResults = $root.replit.goval.api.LintResults.fromObject(object.lintResults);
                        }
                        if (object.runContainedTest != null) {
                            if (typeof object.runContainedTest !== "object")
                                throw TypeError(".replit.goval.api.Command.runContainedTest: object expected");
                            message.runContainedTest = $root.replit.goval.api.ContainedTest.fromObject(object.runContainedTest);
                        }
                        if (object.testResult != null) {
                            if (typeof object.testResult !== "object")
                                throw TypeError(".replit.goval.api.Command.testResult: object expected");
                            message.testResult = $root.replit.goval.api.TestResult.fromObject(object.testResult);
                        }
                        if (object.debuggerStart != null)
                            message.debuggerStart = String(object.debuggerStart);
                        if (object.debuggerStep != null) {
                            if (typeof object.debuggerStep !== "object")
                                throw TypeError(".replit.goval.api.Command.debuggerStep: object expected");
                            message.debuggerStep = $root.replit.goval.api.RunMain.fromObject(object.debuggerStep);
                        }
                        if (object.debuggerStatus != null) {
                            if (typeof object.debuggerStatus !== "object")
                                throw TypeError(".replit.goval.api.Command.debuggerStatus: object expected");
                            message.debuggerStatus = $root.replit.goval.api.DebugStatus.fromObject(object.debuggerStatus);
                        }
                        if (object.ensurePackages != null) {
                            if (typeof object.ensurePackages !== "object")
                                throw TypeError(".replit.goval.api.Command.ensurePackages: object expected");
                            message.ensurePackages = $root.replit.goval.api.EnsurePackages.fromObject(object.ensurePackages);
                        }
                        if (object.ping != null) {
                            if (typeof object.ping !== "object")
                                throw TypeError(".replit.goval.api.Command.ping: object expected");
                            message.ping = $root.replit.goval.api.Ping.fromObject(object.ping);
                        }
                        if (object.pong != null) {
                            if (typeof object.pong !== "object")
                                throw TypeError(".replit.goval.api.Command.pong: object expected");
                            message.pong = $root.replit.goval.api.Pong.fromObject(object.pong);
                        }
                        if (object.hello != null) {
                            if (typeof object.hello !== "object")
                                throw TypeError(".replit.goval.api.Command.hello: object expected");
                            message.hello = $root.replit.goval.api.Hello.fromObject(object.hello);
                        }
                        if (object.goodbye != null) {
                            if (typeof object.goodbye !== "object")
                                throw TypeError(".replit.goval.api.Command.goodbye: object expected");
                            message.goodbye = $root.replit.goval.api.Goodbye.fromObject(object.goodbye);
                        }
                        if (object.proxyGoingAway != null) {
                            if (typeof object.proxyGoingAway !== "object")
                                throw TypeError(".replit.goval.api.Command.proxyGoingAway: object expected");
                            message.proxyGoingAway = $root.replit.goval.api.ProxyGoingAway.fromObject(object.proxyGoingAway);
                        }
                        if (object.hint != null) {
                            if (typeof object.hint !== "object")
                                throw TypeError(".replit.goval.api.Command.hint: object expected");
                            message.hint = $root.replit.goval.api.Hint.fromObject(object.hint);
                        }
                        if (object.connect != null) {
                            if (typeof object.connect !== "object")
                                throw TypeError(".replit.goval.api.Command.connect: object expected");
                            message.connect = $root.replit.goval.api.Connect.fromObject(object.connect);
                        }
                        if (object.send != null) {
                            if (typeof object.send !== "object")
                                throw TypeError(".replit.goval.api.Command.send: object expected");
                            message.send = $root.replit.goval.api.Send.fromObject(object.send);
                        }
                        if (object.recv != null) {
                            if (typeof object.recv !== "object")
                                throw TypeError(".replit.goval.api.Command.recv: object expected");
                            message.recv = $root.replit.goval.api.Recv.fromObject(object.recv);
                        }
                        if (object.disconnect != null) {
                            if (typeof object.disconnect !== "object")
                                throw TypeError(".replit.goval.api.Command.disconnect: object expected");
                            message.disconnect = $root.replit.goval.api.Disconnect.fromObject(object.disconnect);
                        }
                        if (object.fileAuthReq != null) {
                            if (typeof object.fileAuthReq !== "object")
                                throw TypeError(".replit.goval.api.Command.fileAuthReq: object expected");
                            message.fileAuthReq = $root.replit.goval.api.FileAuthReq.fromObject(object.fileAuthReq);
                        }
                        if (object.fileAuthRes != null) {
                            if (typeof object.fileAuthRes !== "object")
                                throw TypeError(".replit.goval.api.Command.fileAuthRes: object expected");
                            message.fileAuthRes = $root.replit.goval.api.FileAuthRes.fromObject(object.fileAuthRes);
                        }
                        if (object.mutliFileAuthRes != null) {
                            if (typeof object.mutliFileAuthRes !== "object")
                                throw TypeError(".replit.goval.api.Command.mutliFileAuthRes: object expected");
                            message.mutliFileAuthRes = $root.replit.goval.api.MultiFileAuthRes.fromObject(object.mutliFileAuthRes);
                        }
                        if (object.listObjects != null) {
                            if (typeof object.listObjects !== "object")
                                throw TypeError(".replit.goval.api.Command.listObjects: object expected");
                            message.listObjects = $root.replit.goval.api.ListObjects.fromObject(object.listObjects);
                        }
                        if (object.listObjectsResp != null) {
                            if (typeof object.listObjectsResp !== "object")
                                throw TypeError(".replit.goval.api.Command.listObjectsResp: object expected");
                            message.listObjectsResp = $root.replit.goval.api.ListObjectsResp.fromObject(object.listObjectsResp);
                        }
                        if (object.ot != null) {
                            if (typeof object.ot !== "object")
                                throw TypeError(".replit.goval.api.Command.ot: object expected");
                            message.ot = $root.replit.goval.api.OTPacket.fromObject(object.ot);
                        }
                        if (object.otstatus != null) {
                            if (typeof object.otstatus !== "object")
                                throw TypeError(".replit.goval.api.Command.otstatus: object expected");
                            message.otstatus = $root.replit.goval.api.OTStatus.fromObject(object.otstatus);
                        }
                        if (object.otLinkFile != null) {
                            if (typeof object.otLinkFile !== "object")
                                throw TypeError(".replit.goval.api.Command.otLinkFile: object expected");
                            message.otLinkFile = $root.replit.goval.api.OTLinkFile.fromObject(object.otLinkFile);
                        }
                        if (object.otLinkFileResponse != null) {
                            if (typeof object.otLinkFileResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.otLinkFileResponse: object expected");
                            message.otLinkFileResponse = $root.replit.goval.api.OTLinkFileResponse.fromObject(object.otLinkFileResponse);
                        }
                        if (object.otNewCursor != null) {
                            if (typeof object.otNewCursor !== "object")
                                throw TypeError(".replit.goval.api.Command.otNewCursor: object expected");
                            message.otNewCursor = $root.replit.goval.api.OTCursor.fromObject(object.otNewCursor);
                        }
                        if (object.otDeleteCursor != null) {
                            if (typeof object.otDeleteCursor !== "object")
                                throw TypeError(".replit.goval.api.Command.otDeleteCursor: object expected");
                            message.otDeleteCursor = $root.replit.goval.api.OTCursor.fromObject(object.otDeleteCursor);
                        }
                        if (object.otFetchRequest != null) {
                            if (typeof object.otFetchRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.otFetchRequest: object expected");
                            message.otFetchRequest = $root.replit.goval.api.OTFetchRequest.fromObject(object.otFetchRequest);
                        }
                        if (object.otFetchResponse != null) {
                            if (typeof object.otFetchResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.otFetchResponse: object expected");
                            message.otFetchResponse = $root.replit.goval.api.OTFetchResponse.fromObject(object.otFetchResponse);
                        }
                        if (object.otTransformSelectionRequest != null) {
                            if (typeof object.otTransformSelectionRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.otTransformSelectionRequest: object expected");
                            message.otTransformSelectionRequest = $root.replit.goval.api.OTTransformSelectionRequest.fromObject(object.otTransformSelectionRequest);
                        }
                        if (object.otTransformSelectionResponse != null) {
                            if (typeof object.otTransformSelectionResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.otTransformSelectionResponse: object expected");
                            message.otTransformSelectionResponse = $root.replit.goval.api.OTTransformSelectionResponse.fromObject(object.otTransformSelectionResponse);
                        }
                        if (object.flush != null) {
                            if (typeof object.flush !== "object")
                                throw TypeError(".replit.goval.api.Command.flush: object expected");
                            message.flush = $root.replit.goval.api.Flush.fromObject(object.flush);
                        }
                        if (object.debug != null) {
                            if (typeof object.debug !== "object")
                                throw TypeError(".replit.goval.api.Command.debug: object expected");
                            message.debug = $root.replit.goval.api.Debug.fromObject(object.debug);
                        }
                        if (object.startVCR != null) {
                            if (typeof object.startVCR !== "object")
                                throw TypeError(".replit.goval.api.Command.startVCR: object expected");
                            message.startVCR = $root.replit.goval.api.StartVCR.fromObject(object.startVCR);
                        }
                        if (object.readVCR != null) {
                            if (typeof object.readVCR !== "object")
                                throw TypeError(".replit.goval.api.Command.readVCR: object expected");
                            message.readVCR = $root.replit.goval.api.ReadVCR.fromObject(object.readVCR);
                        }
                        if (object.VCRLog != null) {
                            if (typeof object.VCRLog !== "object")
                                throw TypeError(".replit.goval.api.Command.VCRLog: object expected");
                            message.VCRLog = $root.replit.goval.api.VCRLog.fromObject(object.VCRLog);
                        }
                        if (object.auth != null) {
                            if (typeof object.auth !== "object")
                                throw TypeError(".replit.goval.api.Command.auth: object expected");
                            message.auth = $root.replit.goval.api.Auth.fromObject(object.auth);
                        }
                        if (object.execInfo != null) {
                            if (typeof object.execInfo !== "object")
                                throw TypeError(".replit.goval.api.Command.execInfo: object expected");
                            message.execInfo = $root.replit.goval.api.ExecInfo.fromObject(object.execInfo);
                        }
                        if (object.subscribeFile != null) {
                            if (typeof object.subscribeFile !== "object")
                                throw TypeError(".replit.goval.api.Command.subscribeFile: object expected");
                            message.subscribeFile = $root.replit.goval.api.SubscribeFile.fromObject(object.subscribeFile);
                        }
                        if (object.fileEvent != null) {
                            if (typeof object.fileEvent !== "object")
                                throw TypeError(".replit.goval.api.Command.fileEvent: object expected");
                            message.fileEvent = $root.replit.goval.api.FileEvent.fromObject(object.fileEvent);
                        }
                        if (object.roster != null) {
                            if (typeof object.roster !== "object")
                                throw TypeError(".replit.goval.api.Command.roster: object expected");
                            message.roster = $root.replit.goval.api.Roster.fromObject(object.roster);
                        }
                        if (object.join != null) {
                            if (typeof object.join !== "object")
                                throw TypeError(".replit.goval.api.Command.join: object expected");
                            message.join = $root.replit.goval.api.User.fromObject(object.join);
                        }
                        if (object.part != null) {
                            if (typeof object.part !== "object")
                                throw TypeError(".replit.goval.api.Command.part: object expected");
                            message.part = $root.replit.goval.api.User.fromObject(object.part);
                        }
                        if (object.openFile != null) {
                            if (typeof object.openFile !== "object")
                                throw TypeError(".replit.goval.api.Command.openFile: object expected");
                            message.openFile = $root.replit.goval.api.OpenFile.fromObject(object.openFile);
                        }
                        if (object.fileOpened != null) {
                            if (typeof object.fileOpened !== "object")
                                throw TypeError(".replit.goval.api.Command.fileOpened: object expected");
                            message.fileOpened = $root.replit.goval.api.FileOpened.fromObject(object.fileOpened);
                        }
                        if (object.followUser != null) {
                            if (typeof object.followUser !== "object")
                                throw TypeError(".replit.goval.api.Command.followUser: object expected");
                            message.followUser = $root.replit.goval.api.FollowUser.fromObject(object.followUser);
                        }
                        if (object.unfollowUser != null) {
                            if (typeof object.unfollowUser !== "object")
                                throw TypeError(".replit.goval.api.Command.unfollowUser: object expected");
                            message.unfollowUser = $root.replit.goval.api.UnfollowUser.fromObject(object.unfollowUser);
                        }
                        if (object.updateSessionTimestamp != null) {
                            if (typeof object.updateSessionTimestamp !== "object")
                                throw TypeError(".replit.goval.api.Command.updateSessionTimestamp: object expected");
                            message.updateSessionTimestamp = $root.replit.goval.api.UpdateSessionTimestamp.fromObject(object.updateSessionTimestamp);
                        }
                        if (object.sessionTimestampUpdated != null) {
                            if (typeof object.sessionTimestampUpdated !== "object")
                                throw TypeError(".replit.goval.api.Command.sessionTimestampUpdated: object expected");
                            message.sessionTimestampUpdated = $root.replit.goval.api.SessionTimestampUpdated.fromObject(object.sessionTimestampUpdated);
                        }
                        if (object.exec != null) {
                            if (typeof object.exec !== "object")
                                throw TypeError(".replit.goval.api.Command.exec: object expected");
                            message.exec = $root.replit.goval.api.Exec.fromObject(object.exec);
                        }
                        if (object.packageSearch != null) {
                            if (typeof object.packageSearch !== "object")
                                throw TypeError(".replit.goval.api.Command.packageSearch: object expected");
                            message.packageSearch = $root.replit.goval.api.PackageSearch.fromObject(object.packageSearch);
                        }
                        if (object.packageSearchResp != null) {
                            if (typeof object.packageSearchResp !== "object")
                                throw TypeError(".replit.goval.api.Command.packageSearchResp: object expected");
                            message.packageSearchResp = $root.replit.goval.api.PackageSearchResp.fromObject(object.packageSearchResp);
                        }
                        if (object.packageInfo != null) {
                            if (typeof object.packageInfo !== "object")
                                throw TypeError(".replit.goval.api.Command.packageInfo: object expected");
                            message.packageInfo = $root.replit.goval.api.PackageInfo.fromObject(object.packageInfo);
                        }
                        if (object.packageInfoResp != null) {
                            if (typeof object.packageInfoResp !== "object")
                                throw TypeError(".replit.goval.api.Command.packageInfoResp: object expected");
                            message.packageInfoResp = $root.replit.goval.api.PackageInfoResp.fromObject(object.packageInfoResp);
                        }
                        if (object.packageAdd != null) {
                            if (typeof object.packageAdd !== "object")
                                throw TypeError(".replit.goval.api.Command.packageAdd: object expected");
                            message.packageAdd = $root.replit.goval.api.PackageAdd.fromObject(object.packageAdd);
                        }
                        if (object.packageRemove != null) {
                            if (typeof object.packageRemove !== "object")
                                throw TypeError(".replit.goval.api.Command.packageRemove: object expected");
                            message.packageRemove = $root.replit.goval.api.PackageRemove.fromObject(object.packageRemove);
                        }
                        if (object.packageInstall != null) {
                            if (typeof object.packageInstall !== "object")
                                throw TypeError(".replit.goval.api.Command.packageInstall: object expected");
                            message.packageInstall = $root.replit.goval.api.PackageInstall.fromObject(object.packageInstall);
                        }
                        if (object.packageListSpecfile != null) {
                            if (typeof object.packageListSpecfile !== "object")
                                throw TypeError(".replit.goval.api.Command.packageListSpecfile: object expected");
                            message.packageListSpecfile = $root.replit.goval.api.PackageListSpecfile.fromObject(object.packageListSpecfile);
                        }
                        if (object.packageListSpecfileResp != null) {
                            if (typeof object.packageListSpecfileResp !== "object")
                                throw TypeError(".replit.goval.api.Command.packageListSpecfileResp: object expected");
                            message.packageListSpecfileResp = $root.replit.goval.api.PackageListSpecfileResp.fromObject(object.packageListSpecfileResp);
                        }
                        if (object.packageCacheSave != null) {
                            if (typeof object.packageCacheSave !== "object")
                                throw TypeError(".replit.goval.api.Command.packageCacheSave: object expected");
                            message.packageCacheSave = $root.replit.goval.api.PackageCacheSave.fromObject(object.packageCacheSave);
                        }
                        if (object.chatMessage != null) {
                            if (typeof object.chatMessage !== "object")
                                throw TypeError(".replit.goval.api.Command.chatMessage: object expected");
                            message.chatMessage = $root.replit.goval.api.ChatMessage.fromObject(object.chatMessage);
                        }
                        if (object.chatTyping != null) {
                            if (typeof object.chatTyping !== "object")
                                throw TypeError(".replit.goval.api.Command.chatTyping: object expected");
                            message.chatTyping = $root.replit.goval.api.ChatTyping.fromObject(object.chatTyping);
                        }
                        if (object.chatScrollback != null) {
                            if (typeof object.chatScrollback !== "object")
                                throw TypeError(".replit.goval.api.Command.chatScrollback: object expected");
                            message.chatScrollback = $root.replit.goval.api.ChatScrollback.fromObject(object.chatScrollback);
                        }
                        if (object.fsSnapshot != null) {
                            if (typeof object.fsSnapshot !== "object")
                                throw TypeError(".replit.goval.api.Command.fsSnapshot: object expected");
                            message.fsSnapshot = $root.replit.goval.api.FSSnapshot.fromObject(object.fsSnapshot);
                        }
                        if (object.fsSnapshotEvent != null) {
                            if (typeof object.fsSnapshotEvent !== "object")
                                throw TypeError(".replit.goval.api.Command.fsSnapshotEvent: object expected");
                            message.fsSnapshotEvent = $root.replit.goval.api.FSSnapshotEvent.fromObject(object.fsSnapshotEvent);
                        }
                        if (object.fsTakeLock != null) {
                            if (typeof object.fsTakeLock !== "object")
                                throw TypeError(".replit.goval.api.Command.fsTakeLock: object expected");
                            message.fsTakeLock = $root.replit.goval.api.FSLock.fromObject(object.fsTakeLock);
                        }
                        if (object.fsReleaseLock != null) {
                            if (typeof object.fsReleaseLock !== "object")
                                throw TypeError(".replit.goval.api.Command.fsReleaseLock: object expected");
                            message.fsReleaseLock = $root.replit.goval.api.FSLock.fromObject(object.fsReleaseLock);
                        }
                        if (object.hasCap != null)
                            message.hasCap = Boolean(object.hasCap);
                        if (object.snapshotEvent != null) {
                            if (typeof object.snapshotEvent !== "object")
                                throw TypeError(".replit.goval.api.Command.snapshotEvent: object expected");
                            message.snapshotEvent = $root.replit.goval.api.SnapshotEvent.fromObject(object.snapshotEvent);
                        }
                        if (object.NoninteractiveFSChangeEvent != null)
                            message.NoninteractiveFSChangeEvent = Boolean(object.NoninteractiveFSChangeEvent);
                        if (object.pid1Config != null) {
                            if (typeof object.pid1Config !== "object")
                                throw TypeError(".replit.goval.api.Command.pid1Config: object expected");
                            message.pid1Config = $root.replit.goval.api.Pid1Config.fromObject(object.pid1Config);
                        }
                        if (object.metrics != null) {
                            if (typeof object.metrics !== "object")
                                throw TypeError(".replit.goval.api.Command.metrics: object expected");
                            message.metrics = $root.replit.goval.api.Metrics.fromObject(object.metrics);
                        }
                        if (object.bootStatus != null) {
                            if (typeof object.bootStatus !== "object")
                                throw TypeError(".replit.goval.api.Command.bootStatus: object expected");
                            message.bootStatus = $root.replit.goval.api.BootStatus.fromObject(object.bootStatus);
                        }
                        if (object.readMetaRequest != null) {
                            if (typeof object.readMetaRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.readMetaRequest: object expected");
                            message.readMetaRequest = $root.replit.goval.api.ReadMetaRequest.fromObject(object.readMetaRequest);
                        }
                        if (object.readMetaResponse != null) {
                            if (typeof object.readMetaResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.readMetaResponse: object expected");
                            message.readMetaResponse = $root.replit.goval.api.ReadMetaResponse.fromObject(object.readMetaResponse);
                        }
                        if (object.writeMetaRequest != null) {
                            if (typeof object.writeMetaRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.writeMetaRequest: object expected");
                            message.writeMetaRequest = $root.replit.goval.api.WriteMetaRequest.fromObject(object.writeMetaRequest);
                        }
                        if (object.writeMetaResponse != null) {
                            if (typeof object.writeMetaResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.writeMetaResponse: object expected");
                            message.writeMetaResponse = $root.replit.goval.api.WriteMetaResponse.fromObject(object.writeMetaResponse);
                        }
                        if (object.appendMetaRequest != null) {
                            if (typeof object.appendMetaRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.appendMetaRequest: object expected");
                            message.appendMetaRequest = $root.replit.goval.api.AppendMetaRequest.fromObject(object.appendMetaRequest);
                        }
                        if (object.appendMetaResponse != null) {
                            if (typeof object.appendMetaResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.appendMetaResponse: object expected");
                            message.appendMetaResponse = $root.replit.goval.api.AppendMetaResponse.fromObject(object.appendMetaResponse);
                        }
                        if (object.audio != null) {
                            if (typeof object.audio !== "object")
                                throw TypeError(".replit.goval.api.Command.audio: object expected");
                            message.audio = $root.replit.goval.api.Audio.fromObject(object.audio);
                        }
                        if (object.pprofRequest != null) {
                            if (typeof object.pprofRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.pprofRequest: object expected");
                            message.pprofRequest = $root.replit.goval.api.PprofRequest.fromObject(object.pprofRequest);
                        }
                        if (object.pprofResponse != null) {
                            if (typeof object.pprofResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.pprofResponse: object expected");
                            message.pprofResponse = $root.replit.goval.api.PprofResponse.fromObject(object.pprofResponse);
                        }
                        if (object.audio2 != null) {
                            if (typeof object.audio2 !== "object")
                                throw TypeError(".replit.goval.api.Command.audio2: object expected");
                            message.audio2 = $root.replit.goval.api.Audio2.fromObject(object.audio2);
                        }
                        if (object.PTYConfig != null) {
                            if (typeof object.PTYConfig !== "object")
                                throw TypeError(".replit.goval.api.Command.PTYConfig: object expected");
                            message.PTYConfig = $root.replit.goval.api.PTYConfig.fromObject(object.PTYConfig);
                        }
                        if (object.debugMain != null) {
                            if (typeof object.debugMain !== "object")
                                throw TypeError(".replit.goval.api.Command.debugMain: object expected");
                            message.debugMain = $root.replit.goval.api.DebugMain.fromObject(object.debugMain);
                        }
                        if (object.debugState != null) {
                            if (typeof object.debugState !== "object")
                                throw TypeError(".replit.goval.api.Command.debugState: object expected");
                            message.debugState = $root.replit.goval.api.DebugState.fromObject(object.debugState);
                        }
                        if (object.debugMainReply != null) {
                            if (typeof object.debugMainReply !== "object")
                                throw TypeError(".replit.goval.api.Command.debugMainReply: object expected");
                            message.debugMainReply = $root.replit.goval.api.DebugMainReply.fromObject(object.debugMainReply);
                        }
                        if (object.debugInput != null) {
                            if (typeof object.debugInput !== "object")
                                throw TypeError(".replit.goval.api.Command.debugInput: object expected");
                            message.debugInput = $root.replit.goval.api.DebugInput.fromObject(object.debugInput);
                        }
                        if (object.debugOutput != null) {
                            if (typeof object.debugOutput !== "object")
                                throw TypeError(".replit.goval.api.Command.debugOutput: object expected");
                            message.debugOutput = $root.replit.goval.api.DebugOutput.fromObject(object.debugOutput);
                        }
                        if (object.debugStop != null) {
                            if (typeof object.debugStop !== "object")
                                throw TypeError(".replit.goval.api.Command.debugStop: object expected");
                            message.debugStop = $root.replit.goval.api.DebugStop.fromObject(object.debugStop);
                        }
                        if (object.debugLeave != null) {
                            if (typeof object.debugLeave !== "object")
                                throw TypeError(".replit.goval.api.Command.debugLeave: object expected");
                            message.debugLeave = $root.replit.goval.api.DebugLeave.fromObject(object.debugLeave);
                        }
                        if (object.debugSessions != null) {
                            if (typeof object.debugSessions !== "object")
                                throw TypeError(".replit.goval.api.Command.debugSessions: object expected");
                            message.debugSessions = $root.replit.goval.api.DebugSessions.fromObject(object.debugSessions);
                        }
                        if (object.debugAddBreakpointRequest != null) {
                            if (typeof object.debugAddBreakpointRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.debugAddBreakpointRequest: object expected");
                            message.debugAddBreakpointRequest = $root.replit.goval.api.DebugAddBreakpointRequest.fromObject(object.debugAddBreakpointRequest);
                        }
                        if (object.debugUpdateBreakpointRequest != null) {
                            if (typeof object.debugUpdateBreakpointRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.debugUpdateBreakpointRequest: object expected");
                            message.debugUpdateBreakpointRequest = $root.replit.goval.api.DebugUpdateBreakpointRequest.fromObject(object.debugUpdateBreakpointRequest);
                        }
                        if (object.debugRemoveBreakpointRequest != null) {
                            if (typeof object.debugRemoveBreakpointRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.debugRemoveBreakpointRequest: object expected");
                            message.debugRemoveBreakpointRequest = $root.replit.goval.api.DebugRemoveBreakpointRequest.fromObject(object.debugRemoveBreakpointRequest);
                        }
                        if (object.debugBreakpointEvent != null) {
                            if (typeof object.debugBreakpointEvent !== "object")
                                throw TypeError(".replit.goval.api.Command.debugBreakpointEvent: object expected");
                            message.debugBreakpointEvent = $root.replit.goval.api.DebugBreakpointEvent.fromObject(object.debugBreakpointEvent);
                        }
                        if (object.dotReplitGetRequest != null) {
                            if (typeof object.dotReplitGetRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.dotReplitGetRequest: object expected");
                            message.dotReplitGetRequest = $root.replit.goval.api.DotReplitGetRequest.fromObject(object.dotReplitGetRequest);
                        }
                        if (object.dotReplitGetResponse != null) {
                            if (typeof object.dotReplitGetResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.dotReplitGetResponse: object expected");
                            message.dotReplitGetResponse = $root.replit.goval.api.DotReplitGetResponse.fromObject(object.dotReplitGetResponse);
                        }
                        if (object.runConfigGetRequest != null) {
                            if (typeof object.runConfigGetRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.runConfigGetRequest: object expected");
                            message.runConfigGetRequest = $root.replit.goval.api.RunConfigGetRequest.fromObject(object.runConfigGetRequest);
                        }
                        if (object.runConfigGetResponse != null) {
                            if (typeof object.runConfigGetResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.runConfigGetResponse: object expected");
                            message.runConfigGetResponse = $root.replit.goval.api.RunConfigGetResponse.fromObject(object.runConfigGetResponse);
                        }
                        if (object.dotReplitUpdateRequest != null) {
                            if (typeof object.dotReplitUpdateRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.dotReplitUpdateRequest: object expected");
                            message.dotReplitUpdateRequest = $root.replit.goval.api.DotReplitUpdateRequest.fromObject(object.dotReplitUpdateRequest);
                        }
                        if (object.dotReplitUpdateResponse != null) {
                            if (typeof object.dotReplitUpdateResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.dotReplitUpdateResponse: object expected");
                            message.dotReplitUpdateResponse = $root.replit.goval.api.DotReplitUpdateResponse.fromObject(object.dotReplitUpdateResponse);
                        }
                        if (object.startLSP != null) {
                            if (typeof object.startLSP !== "object")
                                throw TypeError(".replit.goval.api.Command.startLSP: object expected");
                            message.startLSP = $root.replit.goval.api.StartLSP.fromObject(object.startLSP);
                        }
                        if (object.firewallDenied != null) {
                            if (typeof object.firewallDenied !== "object")
                                throw TypeError(".replit.goval.api.Command.firewallDenied: object expected");
                            message.firewallDenied = $root.replit.goval.api.FirewallDenied.fromObject(object.firewallDenied);
                        }
                        if (object.nixPackageAddRequest != null) {
                            if (typeof object.nixPackageAddRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageAddRequest: object expected");
                            message.nixPackageAddRequest = $root.replit.goval.api.NixPackageAddRequest.fromObject(object.nixPackageAddRequest);
                        }
                        if (object.nixPackageAddResponse != null) {
                            if (typeof object.nixPackageAddResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageAddResponse: object expected");
                            message.nixPackageAddResponse = $root.replit.goval.api.NixPackageAddResponse.fromObject(object.nixPackageAddResponse);
                        }
                        if (object.nixPackageRemoveRequest != null) {
                            if (typeof object.nixPackageRemoveRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageRemoveRequest: object expected");
                            message.nixPackageRemoveRequest = $root.replit.goval.api.NixPackageRemoveRequest.fromObject(object.nixPackageRemoveRequest);
                        }
                        if (object.nixPackageRemoveResponse != null) {
                            if (typeof object.nixPackageRemoveResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageRemoveResponse: object expected");
                            message.nixPackageRemoveResponse = $root.replit.goval.api.NixPackageRemoveResponse.fromObject(object.nixPackageRemoveResponse);
                        }
                        if (object.nixPackageListRequest != null) {
                            if (typeof object.nixPackageListRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageListRequest: object expected");
                            message.nixPackageListRequest = $root.replit.goval.api.NixPackageListRequest.fromObject(object.nixPackageListRequest);
                        }
                        if (object.nixPackageListResponse != null) {
                            if (typeof object.nixPackageListResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageListResponse: object expected");
                            message.nixPackageListResponse = $root.replit.goval.api.NixPackageListResponse.fromObject(object.nixPackageListResponse);
                        }
                        if (object.nixChannelsRequest != null) {
                            if (typeof object.nixChannelsRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixChannelsRequest: object expected");
                            message.nixChannelsRequest = $root.replit.goval.api.NixChannelsRequest.fromObject(object.nixChannelsRequest);
                        }
                        if (object.nixChannelsResponse != null) {
                            if (typeof object.nixChannelsResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixChannelsResponse: object expected");
                            message.nixChannelsResponse = $root.replit.goval.api.NixChannelsResponse.fromObject(object.nixChannelsResponse);
                        }
                        if (object.nixChannelLatestStableRequest != null) {
                            if (typeof object.nixChannelLatestStableRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixChannelLatestStableRequest: object expected");
                            message.nixChannelLatestStableRequest = $root.replit.goval.api.NixChannelLatestStableRequest.fromObject(object.nixChannelLatestStableRequest);
                        }
                        if (object.nixChannelLatestStableResponse != null) {
                            if (typeof object.nixChannelLatestStableResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixChannelLatestStableResponse: object expected");
                            message.nixChannelLatestStableResponse = $root.replit.goval.api.NixChannelLatestStableResponse.fromObject(object.nixChannelLatestStableResponse);
                        }
                        if (object.nixPackageSearchRequest != null) {
                            if (typeof object.nixPackageSearchRequest !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageSearchRequest: object expected");
                            message.nixPackageSearchRequest = $root.replit.goval.api.NixPackageSearchRequest.fromObject(object.nixPackageSearchRequest);
                        }
                        if (object.nixPackageSearchResponse != null) {
                            if (typeof object.nixPackageSearchResponse !== "object")
                                throw TypeError(".replit.goval.api.Command.nixPackageSearchResponse: object expected");
                            message.nixPackageSearchResponse = $root.replit.goval.api.NixPackageSearchResponse.fromObject(object.nixPackageSearchResponse);
                        }
                        if (object.userEvent != null) {
                            if (typeof object.userEvent !== "object")
                                throw TypeError(".replit.goval.api.Command.userEvent: object expected");
                            message.userEvent = $root.replit.goval.api.UserEvent.fromObject(object.userEvent);
                        }
                        if (object.replspaceApiOpenFile != null) {
                            if (typeof object.replspaceApiOpenFile !== "object")
                                throw TypeError(".replit.goval.api.Command.replspaceApiOpenFile: object expected");
                            message.replspaceApiOpenFile = $root.replit.goval.api.ReplspaceApiOpenFile.fromObject(object.replspaceApiOpenFile);
                        }
                        if (object.replspaceApiCloseFile != null) {
                            if (typeof object.replspaceApiCloseFile !== "object")
                                throw TypeError(".replit.goval.api.Command.replspaceApiCloseFile: object expected");
                            message.replspaceApiCloseFile = $root.replit.goval.api.ReplspaceApiCloseFile.fromObject(object.replspaceApiCloseFile);
                        }
                        if (object.replspaceApiGetGitHubToken != null) {
                            if (typeof object.replspaceApiGetGitHubToken !== "object")
                                throw TypeError(".replit.goval.api.Command.replspaceApiGetGitHubToken: object expected");
                            message.replspaceApiGetGitHubToken = $root.replit.goval.api.ReplspaceApiGetGitHubToken.fromObject(object.replspaceApiGetGitHubToken);
                        }
                        if (object.replspaceApiGitHubToken != null) {
                            if (typeof object.replspaceApiGitHubToken !== "object")
                                throw TypeError(".replit.goval.api.Command.replspaceApiGitHubToken: object expected");
                            message.replspaceApiGitHubToken = $root.replit.goval.api.ReplspaceApiGitHubToken.fromObject(object.replspaceApiGitHubToken);
                        }
                        if (object.ref != null)
                            message.ref = String(object.ref);
                        if (object.traceInfo) {
                            if (typeof object.traceInfo !== "object")
                                throw TypeError(".replit.goval.api.Command.traceInfo: object expected");
                            message.traceInfo = {};
                            for (var keys = Object.keys(object.traceInfo), i = 0; i < keys.length; ++i)
                                message.traceInfo[keys[i]] = String(object.traceInfo[keys[i]]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Command message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Command
                     * @static
                     * @param {replit.goval.api.Command} message Command
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Command.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.traceInfo = {};
                        if (options.defaults) {
                            object.channel = 0;
                            object.session = 0;
                            object.ref = "";
                        }
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = message.channel;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.openChan != null && message.hasOwnProperty("openChan")) {
                            object.openChan = $root.replit.goval.api.OpenChannel.toObject(message.openChan, options);
                            if (options.oneofs)
                                object.body = "openChan";
                        }
                        if (message.openChanRes != null && message.hasOwnProperty("openChanRes")) {
                            object.openChanRes = $root.replit.goval.api.OpenChannelRes.toObject(message.openChanRes, options);
                            if (options.oneofs)
                                object.body = "openChanRes";
                        }
                        if (message.closeChan != null && message.hasOwnProperty("closeChan")) {
                            object.closeChan = $root.replit.goval.api.CloseChannel.toObject(message.closeChan, options);
                            if (options.oneofs)
                                object.body = "closeChan";
                        }
                        if (message.closeChanRes != null && message.hasOwnProperty("closeChanRes")) {
                            object.closeChanRes = $root.replit.goval.api.CloseChannelRes.toObject(message.closeChanRes, options);
                            if (options.oneofs)
                                object.body = "closeChanRes";
                        }
                        if (message.containerState != null && message.hasOwnProperty("containerState")) {
                            object.containerState = $root.replit.goval.api.ContainerState.toObject(message.containerState, options);
                            if (options.oneofs)
                                object.body = "containerState";
                        }
                        if (message.portOpen != null && message.hasOwnProperty("portOpen")) {
                            object.portOpen = $root.replit.goval.api.PortOpen.toObject(message.portOpen, options);
                            if (options.oneofs)
                                object.body = "portOpen";
                        }
                        if (message.toast != null && message.hasOwnProperty("toast")) {
                            object.toast = $root.replit.goval.api.Toast.toObject(message.toast, options);
                            if (options.oneofs)
                                object.body = "toast";
                        }
                        if (message.redirect != null && message.hasOwnProperty("redirect")) {
                            object.redirect = $root.replit.goval.api.Redirect.toObject(message.redirect, options);
                            if (options.oneofs)
                                object.body = "redirect";
                        }
                        if (message.alwaysOn != null && message.hasOwnProperty("alwaysOn")) {
                            object.alwaysOn = $root.replit.goval.api.AlwaysOn.toObject(message.alwaysOn, options);
                            if (options.oneofs)
                                object.body = "alwaysOn";
                        }
                        if (message.runMain != null && message.hasOwnProperty("runMain")) {
                            object.runMain = $root.replit.goval.api.RunMain.toObject(message.runMain, options);
                            if (options.oneofs)
                                object.body = "runMain";
                        }
                        if (message.clear != null && message.hasOwnProperty("clear")) {
                            object.clear = $root.replit.goval.api.Clear.toObject(message.clear, options);
                            if (options.oneofs)
                                object.body = "clear";
                        }
                        if (message["eval"] != null && message.hasOwnProperty("eval")) {
                            object["eval"] = message["eval"];
                            if (options.oneofs)
                                object.body = "eval";
                        }
                        if (message.result != null && message.hasOwnProperty("result")) {
                            object.result = message.result;
                            if (options.oneofs)
                                object.body = "result";
                        }
                        if (message.input != null && message.hasOwnProperty("input")) {
                            object.input = message.input;
                            if (options.oneofs)
                                object.body = "input";
                        }
                        if (message.output != null && message.hasOwnProperty("output")) {
                            object.output = message.output;
                            if (options.oneofs)
                                object.body = "output";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = message.error;
                            if (options.oneofs)
                                object.body = "error";
                        }
                        if (message.saneTerm != null && message.hasOwnProperty("saneTerm")) {
                            object.saneTerm = $root.replit.goval.api.SaneTerm.toObject(message.saneTerm, options);
                            if (options.oneofs)
                                object.body = "saneTerm";
                        }
                        if (message.resizeTerm != null && message.hasOwnProperty("resizeTerm")) {
                            object.resizeTerm = $root.replit.goval.api.ResizeTerm.toObject(message.resizeTerm, options);
                            if (options.oneofs)
                                object.body = "resizeTerm";
                        }
                        if (message.state != null && message.hasOwnProperty("state")) {
                            object.state = options.enums === String ? $root.replit.goval.api.State[message.state] : message.state;
                            if (options.oneofs)
                                object.body = "state";
                        }
                        if (message.ok != null && message.hasOwnProperty("ok")) {
                            object.ok = $root.replit.goval.api.OK.toObject(message.ok, options);
                            if (options.oneofs)
                                object.body = "ok";
                        }
                        if (message.persist != null && message.hasOwnProperty("persist")) {
                            object.persist = $root.replit.goval.api.File.toObject(message.persist, options);
                            if (options.oneofs)
                                object.body = "persist";
                        }
                        if (message.write != null && message.hasOwnProperty("write")) {
                            object.write = $root.replit.goval.api.File.toObject(message.write, options);
                            if (options.oneofs)
                                object.body = "write";
                        }
                        if (message.remove != null && message.hasOwnProperty("remove")) {
                            object.remove = $root.replit.goval.api.File.toObject(message.remove, options);
                            if (options.oneofs)
                                object.body = "remove";
                        }
                        if (message.move != null && message.hasOwnProperty("move")) {
                            object.move = $root.replit.goval.api.Move.toObject(message.move, options);
                            if (options.oneofs)
                                object.body = "move";
                        }
                        if (message.read != null && message.hasOwnProperty("read")) {
                            object.read = $root.replit.goval.api.File.toObject(message.read, options);
                            if (options.oneofs)
                                object.body = "read";
                        }
                        if (message.tryRemove != null && message.hasOwnProperty("tryRemove")) {
                            object.tryRemove = $root.replit.goval.api.File.toObject(message.tryRemove, options);
                            if (options.oneofs)
                                object.body = "tryRemove";
                        }
                        if (message.readdir != null && message.hasOwnProperty("readdir")) {
                            object.readdir = $root.replit.goval.api.File.toObject(message.readdir, options);
                            if (options.oneofs)
                                object.body = "readdir";
                        }
                        if (message.files != null && message.hasOwnProperty("files")) {
                            object.files = $root.replit.goval.api.Files.toObject(message.files, options);
                            if (options.oneofs)
                                object.body = "files";
                        }
                        if (message.mkdir != null && message.hasOwnProperty("mkdir")) {
                            object.mkdir = $root.replit.goval.api.File.toObject(message.mkdir, options);
                            if (options.oneofs)
                                object.body = "mkdir";
                        }
                        if (message.file != null && message.hasOwnProperty("file")) {
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                            if (options.oneofs)
                                object.body = "file";
                        }
                        if (message.persistMirror != null && message.hasOwnProperty("persistMirror")) {
                            object.persistMirror = $root.replit.goval.api.File.toObject(message.persistMirror, options);
                            if (options.oneofs)
                                object.body = "persistMirror";
                        }
                        if (message.checkChanges != null && message.hasOwnProperty("checkChanges")) {
                            object.checkChanges = $root.replit.goval.api.CheckChanges.toObject(message.checkChanges, options);
                            if (options.oneofs)
                                object.body = "checkChanges";
                        }
                        if (message.changedFiles != null && message.hasOwnProperty("changedFiles")) {
                            object.changedFiles = $root.replit.goval.api.Files.toObject(message.changedFiles, options);
                            if (options.oneofs)
                                object.body = "changedFiles";
                        }
                        if (message.lintResults != null && message.hasOwnProperty("lintResults")) {
                            object.lintResults = $root.replit.goval.api.LintResults.toObject(message.lintResults, options);
                            if (options.oneofs)
                                object.body = "lintResults";
                        }
                        if (message.protocolError != null && message.hasOwnProperty("protocolError")) {
                            object.protocolError = $root.replit.goval.api.ProtocolError.toObject(message.protocolError, options);
                            if (options.oneofs)
                                object.body = "protocolError";
                        }
                        if (message.stderr != null && message.hasOwnProperty("stderr")) {
                            object.stderr = message.stderr;
                            if (options.oneofs)
                                object.body = "stderr";
                        }
                        if (message.log != null && message.hasOwnProperty("log")) {
                            object.log = message.log;
                            if (options.oneofs)
                                object.body = "log";
                        }
                        if (message.portClose != null && message.hasOwnProperty("portClose")) {
                            object.portClose = $root.replit.goval.api.PortClose.toObject(message.portClose, options);
                            if (options.oneofs)
                                object.body = "portClose";
                        }
                        if (message.runContainedTest != null && message.hasOwnProperty("runContainedTest")) {
                            object.runContainedTest = $root.replit.goval.api.ContainedTest.toObject(message.runContainedTest, options);
                            if (options.oneofs)
                                object.body = "runContainedTest";
                        }
                        if (message.testResult != null && message.hasOwnProperty("testResult")) {
                            object.testResult = $root.replit.goval.api.TestResult.toObject(message.testResult, options);
                            if (options.oneofs)
                                object.body = "testResult";
                        }
                        if (message.debuggerStart != null && message.hasOwnProperty("debuggerStart")) {
                            object.debuggerStart = message.debuggerStart;
                            if (options.oneofs)
                                object.body = "debuggerStart";
                        }
                        if (message.debuggerStep != null && message.hasOwnProperty("debuggerStep")) {
                            object.debuggerStep = $root.replit.goval.api.RunMain.toObject(message.debuggerStep, options);
                            if (options.oneofs)
                                object.body = "debuggerStep";
                        }
                        if (message.debuggerStatus != null && message.hasOwnProperty("debuggerStatus")) {
                            object.debuggerStatus = $root.replit.goval.api.DebugStatus.toObject(message.debuggerStatus, options);
                            if (options.oneofs)
                                object.body = "debuggerStatus";
                        }
                        if (message.ensurePackages != null && message.hasOwnProperty("ensurePackages")) {
                            object.ensurePackages = $root.replit.goval.api.EnsurePackages.toObject(message.ensurePackages, options);
                            if (options.oneofs)
                                object.body = "ensurePackages";
                        }
                        if (message.ping != null && message.hasOwnProperty("ping")) {
                            object.ping = $root.replit.goval.api.Ping.toObject(message.ping, options);
                            if (options.oneofs)
                                object.body = "ping";
                        }
                        if (message.pong != null && message.hasOwnProperty("pong")) {
                            object.pong = $root.replit.goval.api.Pong.toObject(message.pong, options);
                            if (options.oneofs)
                                object.body = "pong";
                        }
                        if (message.hello != null && message.hasOwnProperty("hello")) {
                            object.hello = $root.replit.goval.api.Hello.toObject(message.hello, options);
                            if (options.oneofs)
                                object.body = "hello";
                        }
                        if (message.goodbye != null && message.hasOwnProperty("goodbye")) {
                            object.goodbye = $root.replit.goval.api.Goodbye.toObject(message.goodbye, options);
                            if (options.oneofs)
                                object.body = "goodbye";
                        }
                        if (message.proxyGoingAway != null && message.hasOwnProperty("proxyGoingAway")) {
                            object.proxyGoingAway = $root.replit.goval.api.ProxyGoingAway.toObject(message.proxyGoingAway, options);
                            if (options.oneofs)
                                object.body = "proxyGoingAway";
                        }
                        if (message.hint != null && message.hasOwnProperty("hint")) {
                            object.hint = $root.replit.goval.api.Hint.toObject(message.hint, options);
                            if (options.oneofs)
                                object.body = "hint";
                        }
                        if (message.connect != null && message.hasOwnProperty("connect")) {
                            object.connect = $root.replit.goval.api.Connect.toObject(message.connect, options);
                            if (options.oneofs)
                                object.body = "connect";
                        }
                        if (message.send != null && message.hasOwnProperty("send")) {
                            object.send = $root.replit.goval.api.Send.toObject(message.send, options);
                            if (options.oneofs)
                                object.body = "send";
                        }
                        if (message.recv != null && message.hasOwnProperty("recv")) {
                            object.recv = $root.replit.goval.api.Recv.toObject(message.recv, options);
                            if (options.oneofs)
                                object.body = "recv";
                        }
                        if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                            object.disconnect = $root.replit.goval.api.Disconnect.toObject(message.disconnect, options);
                            if (options.oneofs)
                                object.body = "disconnect";
                        }
                        if (message.fileAuthReq != null && message.hasOwnProperty("fileAuthReq")) {
                            object.fileAuthReq = $root.replit.goval.api.FileAuthReq.toObject(message.fileAuthReq, options);
                            if (options.oneofs)
                                object.body = "fileAuthReq";
                        }
                        if (message.fileAuthRes != null && message.hasOwnProperty("fileAuthRes")) {
                            object.fileAuthRes = $root.replit.goval.api.FileAuthRes.toObject(message.fileAuthRes, options);
                            if (options.oneofs)
                                object.body = "fileAuthRes";
                        }
                        if (message.mutliFileAuthRes != null && message.hasOwnProperty("mutliFileAuthRes")) {
                            object.mutliFileAuthRes = $root.replit.goval.api.MultiFileAuthRes.toObject(message.mutliFileAuthRes, options);
                            if (options.oneofs)
                                object.body = "mutliFileAuthRes";
                        }
                        if (message.listObjects != null && message.hasOwnProperty("listObjects")) {
                            object.listObjects = $root.replit.goval.api.ListObjects.toObject(message.listObjects, options);
                            if (options.oneofs)
                                object.body = "listObjects";
                        }
                        if (message.listObjectsResp != null && message.hasOwnProperty("listObjectsResp")) {
                            object.listObjectsResp = $root.replit.goval.api.ListObjectsResp.toObject(message.listObjectsResp, options);
                            if (options.oneofs)
                                object.body = "listObjectsResp";
                        }
                        if (message.ot != null && message.hasOwnProperty("ot")) {
                            object.ot = $root.replit.goval.api.OTPacket.toObject(message.ot, options);
                            if (options.oneofs)
                                object.body = "ot";
                        }
                        if (message.otstatus != null && message.hasOwnProperty("otstatus")) {
                            object.otstatus = $root.replit.goval.api.OTStatus.toObject(message.otstatus, options);
                            if (options.oneofs)
                                object.body = "otstatus";
                        }
                        if (message.otLinkFile != null && message.hasOwnProperty("otLinkFile")) {
                            object.otLinkFile = $root.replit.goval.api.OTLinkFile.toObject(message.otLinkFile, options);
                            if (options.oneofs)
                                object.body = "otLinkFile";
                        }
                        if (message.otNewCursor != null && message.hasOwnProperty("otNewCursor")) {
                            object.otNewCursor = $root.replit.goval.api.OTCursor.toObject(message.otNewCursor, options);
                            if (options.oneofs)
                                object.body = "otNewCursor";
                        }
                        if (message.otDeleteCursor != null && message.hasOwnProperty("otDeleteCursor")) {
                            object.otDeleteCursor = $root.replit.goval.api.OTCursor.toObject(message.otDeleteCursor, options);
                            if (options.oneofs)
                                object.body = "otDeleteCursor";
                        }
                        if (message.otFetchRequest != null && message.hasOwnProperty("otFetchRequest")) {
                            object.otFetchRequest = $root.replit.goval.api.OTFetchRequest.toObject(message.otFetchRequest, options);
                            if (options.oneofs)
                                object.body = "otFetchRequest";
                        }
                        if (message.otFetchResponse != null && message.hasOwnProperty("otFetchResponse")) {
                            object.otFetchResponse = $root.replit.goval.api.OTFetchResponse.toObject(message.otFetchResponse, options);
                            if (options.oneofs)
                                object.body = "otFetchResponse";
                        }
                        if (message.otTransformSelectionRequest != null && message.hasOwnProperty("otTransformSelectionRequest")) {
                            object.otTransformSelectionRequest = $root.replit.goval.api.OTTransformSelectionRequest.toObject(message.otTransformSelectionRequest, options);
                            if (options.oneofs)
                                object.body = "otTransformSelectionRequest";
                        }
                        if (message.otTransformSelectionResponse != null && message.hasOwnProperty("otTransformSelectionResponse")) {
                            object.otTransformSelectionResponse = $root.replit.goval.api.OTTransformSelectionResponse.toObject(message.otTransformSelectionResponse, options);
                            if (options.oneofs)
                                object.body = "otTransformSelectionResponse";
                        }
                        if (message.otLinkFileResponse != null && message.hasOwnProperty("otLinkFileResponse")) {
                            object.otLinkFileResponse = $root.replit.goval.api.OTLinkFileResponse.toObject(message.otLinkFileResponse, options);
                            if (options.oneofs)
                                object.body = "otLinkFileResponse";
                        }
                        if (message.debug != null && message.hasOwnProperty("debug")) {
                            object.debug = $root.replit.goval.api.Debug.toObject(message.debug, options);
                            if (options.oneofs)
                                object.body = "debug";
                        }
                        if (message.startVCR != null && message.hasOwnProperty("startVCR")) {
                            object.startVCR = $root.replit.goval.api.StartVCR.toObject(message.startVCR, options);
                            if (options.oneofs)
                                object.body = "startVCR";
                        }
                        if (message.readVCR != null && message.hasOwnProperty("readVCR")) {
                            object.readVCR = $root.replit.goval.api.ReadVCR.toObject(message.readVCR, options);
                            if (options.oneofs)
                                object.body = "readVCR";
                        }
                        if (message.VCRLog != null && message.hasOwnProperty("VCRLog")) {
                            object.VCRLog = $root.replit.goval.api.VCRLog.toObject(message.VCRLog, options);
                            if (options.oneofs)
                                object.body = "VCRLog";
                        }
                        if (message.auth != null && message.hasOwnProperty("auth")) {
                            object.auth = $root.replit.goval.api.Auth.toObject(message.auth, options);
                            if (options.oneofs)
                                object.body = "auth";
                        }
                        if (message.execInfo != null && message.hasOwnProperty("execInfo")) {
                            object.execInfo = $root.replit.goval.api.ExecInfo.toObject(message.execInfo, options);
                            if (options.oneofs)
                                object.body = "execInfo";
                        }
                        if (message.flush != null && message.hasOwnProperty("flush")) {
                            object.flush = $root.replit.goval.api.Flush.toObject(message.flush, options);
                            if (options.oneofs)
                                object.body = "flush";
                        }
                        if (message.subscribeFile != null && message.hasOwnProperty("subscribeFile")) {
                            object.subscribeFile = $root.replit.goval.api.SubscribeFile.toObject(message.subscribeFile, options);
                            if (options.oneofs)
                                object.body = "subscribeFile";
                        }
                        if (message.fileEvent != null && message.hasOwnProperty("fileEvent")) {
                            object.fileEvent = $root.replit.goval.api.FileEvent.toObject(message.fileEvent, options);
                            if (options.oneofs)
                                object.body = "fileEvent";
                        }
                        if (message.roster != null && message.hasOwnProperty("roster")) {
                            object.roster = $root.replit.goval.api.Roster.toObject(message.roster, options);
                            if (options.oneofs)
                                object.body = "roster";
                        }
                        if (message.join != null && message.hasOwnProperty("join")) {
                            object.join = $root.replit.goval.api.User.toObject(message.join, options);
                            if (options.oneofs)
                                object.body = "join";
                        }
                        if (message.part != null && message.hasOwnProperty("part")) {
                            object.part = $root.replit.goval.api.User.toObject(message.part, options);
                            if (options.oneofs)
                                object.body = "part";
                        }
                        if (message.openFile != null && message.hasOwnProperty("openFile")) {
                            object.openFile = $root.replit.goval.api.OpenFile.toObject(message.openFile, options);
                            if (options.oneofs)
                                object.body = "openFile";
                        }
                        if (message.fileOpened != null && message.hasOwnProperty("fileOpened")) {
                            object.fileOpened = $root.replit.goval.api.FileOpened.toObject(message.fileOpened, options);
                            if (options.oneofs)
                                object.body = "fileOpened";
                        }
                        if (message.followUser != null && message.hasOwnProperty("followUser")) {
                            object.followUser = $root.replit.goval.api.FollowUser.toObject(message.followUser, options);
                            if (options.oneofs)
                                object.body = "followUser";
                        }
                        if (message.updateSessionTimestamp != null && message.hasOwnProperty("updateSessionTimestamp")) {
                            object.updateSessionTimestamp = $root.replit.goval.api.UpdateSessionTimestamp.toObject(message.updateSessionTimestamp, options);
                            if (options.oneofs)
                                object.body = "updateSessionTimestamp";
                        }
                        if (message.sessionTimestampUpdated != null && message.hasOwnProperty("sessionTimestampUpdated")) {
                            object.sessionTimestampUpdated = $root.replit.goval.api.SessionTimestampUpdated.toObject(message.sessionTimestampUpdated, options);
                            if (options.oneofs)
                                object.body = "sessionTimestampUpdated";
                        }
                        if (message.unfollowUser != null && message.hasOwnProperty("unfollowUser")) {
                            object.unfollowUser = $root.replit.goval.api.UnfollowUser.toObject(message.unfollowUser, options);
                            if (options.oneofs)
                                object.body = "unfollowUser";
                        }
                        if (message.exec != null && message.hasOwnProperty("exec")) {
                            object.exec = $root.replit.goval.api.Exec.toObject(message.exec, options);
                            if (options.oneofs)
                                object.body = "exec";
                        }
                        if (message.packageSearch != null && message.hasOwnProperty("packageSearch")) {
                            object.packageSearch = $root.replit.goval.api.PackageSearch.toObject(message.packageSearch, options);
                            if (options.oneofs)
                                object.body = "packageSearch";
                        }
                        if (message.packageSearchResp != null && message.hasOwnProperty("packageSearchResp")) {
                            object.packageSearchResp = $root.replit.goval.api.PackageSearchResp.toObject(message.packageSearchResp, options);
                            if (options.oneofs)
                                object.body = "packageSearchResp";
                        }
                        if (message.packageInfo != null && message.hasOwnProperty("packageInfo")) {
                            object.packageInfo = $root.replit.goval.api.PackageInfo.toObject(message.packageInfo, options);
                            if (options.oneofs)
                                object.body = "packageInfo";
                        }
                        if (message.packageInfoResp != null && message.hasOwnProperty("packageInfoResp")) {
                            object.packageInfoResp = $root.replit.goval.api.PackageInfoResp.toObject(message.packageInfoResp, options);
                            if (options.oneofs)
                                object.body = "packageInfoResp";
                        }
                        if (message.packageAdd != null && message.hasOwnProperty("packageAdd")) {
                            object.packageAdd = $root.replit.goval.api.PackageAdd.toObject(message.packageAdd, options);
                            if (options.oneofs)
                                object.body = "packageAdd";
                        }
                        if (message.packageRemove != null && message.hasOwnProperty("packageRemove")) {
                            object.packageRemove = $root.replit.goval.api.PackageRemove.toObject(message.packageRemove, options);
                            if (options.oneofs)
                                object.body = "packageRemove";
                        }
                        if (message.packageInstall != null && message.hasOwnProperty("packageInstall")) {
                            object.packageInstall = $root.replit.goval.api.PackageInstall.toObject(message.packageInstall, options);
                            if (options.oneofs)
                                object.body = "packageInstall";
                        }
                        if (message.packageListSpecfile != null && message.hasOwnProperty("packageListSpecfile")) {
                            object.packageListSpecfile = $root.replit.goval.api.PackageListSpecfile.toObject(message.packageListSpecfile, options);
                            if (options.oneofs)
                                object.body = "packageListSpecfile";
                        }
                        if (message.packageListSpecfileResp != null && message.hasOwnProperty("packageListSpecfileResp")) {
                            object.packageListSpecfileResp = $root.replit.goval.api.PackageListSpecfileResp.toObject(message.packageListSpecfileResp, options);
                            if (options.oneofs)
                                object.body = "packageListSpecfileResp";
                        }
                        if (message.packageCacheSave != null && message.hasOwnProperty("packageCacheSave")) {
                            object.packageCacheSave = $root.replit.goval.api.PackageCacheSave.toObject(message.packageCacheSave, options);
                            if (options.oneofs)
                                object.body = "packageCacheSave";
                        }
                        if (message.chatMessage != null && message.hasOwnProperty("chatMessage")) {
                            object.chatMessage = $root.replit.goval.api.ChatMessage.toObject(message.chatMessage, options);
                            if (options.oneofs)
                                object.body = "chatMessage";
                        }
                        if (message.chatTyping != null && message.hasOwnProperty("chatTyping")) {
                            object.chatTyping = $root.replit.goval.api.ChatTyping.toObject(message.chatTyping, options);
                            if (options.oneofs)
                                object.body = "chatTyping";
                        }
                        if (message.chatScrollback != null && message.hasOwnProperty("chatScrollback")) {
                            object.chatScrollback = $root.replit.goval.api.ChatScrollback.toObject(message.chatScrollback, options);
                            if (options.oneofs)
                                object.body = "chatScrollback";
                        }
                        if (message.transferStart != null && message.hasOwnProperty("transferStart")) {
                            object.transferStart = $root.replit.goval.api.TransferStart.toObject(message.transferStart, options);
                            if (options.oneofs)
                                object.body = "transferStart";
                        }
                        if (message.transferChunk != null && message.hasOwnProperty("transferChunk")) {
                            object.transferChunk = $root.replit.goval.api.TransferChunk.toObject(message.transferChunk, options);
                            if (options.oneofs)
                                object.body = "transferChunk";
                        }
                        if (message.transferComplete != null && message.hasOwnProperty("transferComplete")) {
                            object.transferComplete = $root.replit.goval.api.TransferComplete.toObject(message.transferComplete, options);
                            if (options.oneofs)
                                object.body = "transferComplete";
                        }
                        if (message.transferCancel != null && message.hasOwnProperty("transferCancel")) {
                            object.transferCancel = $root.replit.goval.api.Transfer.toObject(message.transferCancel, options);
                            if (options.oneofs)
                                object.body = "transferCancel";
                        }
                        if (message.transfer != null && message.hasOwnProperty("transfer")) {
                            object.transfer = $root.replit.goval.api.Transfer.toObject(message.transfer, options);
                            if (options.oneofs)
                                object.body = "transfer";
                        }
                        if (message.fsSnapshot != null && message.hasOwnProperty("fsSnapshot")) {
                            object.fsSnapshot = $root.replit.goval.api.FSSnapshot.toObject(message.fsSnapshot, options);
                            if (options.oneofs)
                                object.body = "fsSnapshot";
                        }
                        if (message.fsTakeLock != null && message.hasOwnProperty("fsTakeLock")) {
                            object.fsTakeLock = $root.replit.goval.api.FSLock.toObject(message.fsTakeLock, options);
                            if (options.oneofs)
                                object.body = "fsTakeLock";
                        }
                        if (message.fsReleaseLock != null && message.hasOwnProperty("fsReleaseLock")) {
                            object.fsReleaseLock = $root.replit.goval.api.FSLock.toObject(message.fsReleaseLock, options);
                            if (options.oneofs)
                                object.body = "fsReleaseLock";
                        }
                        if (message.hasCap != null && message.hasOwnProperty("hasCap")) {
                            object.hasCap = message.hasCap;
                            if (options.oneofs)
                                object.body = "hasCap";
                        }
                        if (message.pid1Config != null && message.hasOwnProperty("pid1Config")) {
                            object.pid1Config = $root.replit.goval.api.Pid1Config.toObject(message.pid1Config, options);
                            if (options.oneofs)
                                object.body = "pid1Config";
                        }
                        if (message.startLSP != null && message.hasOwnProperty("startLSP")) {
                            object.startLSP = $root.replit.goval.api.StartLSP.toObject(message.startLSP, options);
                            if (options.oneofs)
                                object.body = "startLSP";
                        }
                        if (message.metrics != null && message.hasOwnProperty("metrics")) {
                            object.metrics = $root.replit.goval.api.Metrics.toObject(message.metrics, options);
                            if (options.oneofs)
                                object.body = "metrics";
                        }
                        if (message.bootStatus != null && message.hasOwnProperty("bootStatus")) {
                            object.bootStatus = $root.replit.goval.api.BootStatus.toObject(message.bootStatus, options);
                            if (options.oneofs)
                                object.body = "bootStatus";
                        }
                        if (message.readMetaRequest != null && message.hasOwnProperty("readMetaRequest")) {
                            object.readMetaRequest = $root.replit.goval.api.ReadMetaRequest.toObject(message.readMetaRequest, options);
                            if (options.oneofs)
                                object.body = "readMetaRequest";
                        }
                        if (message.writeMetaRequest != null && message.hasOwnProperty("writeMetaRequest")) {
                            object.writeMetaRequest = $root.replit.goval.api.WriteMetaRequest.toObject(message.writeMetaRequest, options);
                            if (options.oneofs)
                                object.body = "writeMetaRequest";
                        }
                        if (message.appendMetaRequest != null && message.hasOwnProperty("appendMetaRequest")) {
                            object.appendMetaRequest = $root.replit.goval.api.AppendMetaRequest.toObject(message.appendMetaRequest, options);
                            if (options.oneofs)
                                object.body = "appendMetaRequest";
                        }
                        if (message.audio != null && message.hasOwnProperty("audio")) {
                            object.audio = $root.replit.goval.api.Audio.toObject(message.audio, options);
                            if (options.oneofs)
                                object.body = "audio";
                        }
                        if (message.pprofRequest != null && message.hasOwnProperty("pprofRequest")) {
                            object.pprofRequest = $root.replit.goval.api.PprofRequest.toObject(message.pprofRequest, options);
                            if (options.oneofs)
                                object.body = "pprofRequest";
                        }
                        if (message.pprofResponse != null && message.hasOwnProperty("pprofResponse")) {
                            object.pprofResponse = $root.replit.goval.api.PprofResponse.toObject(message.pprofResponse, options);
                            if (options.oneofs)
                                object.body = "pprofResponse";
                        }
                        if (message.audio2 != null && message.hasOwnProperty("audio2")) {
                            object.audio2 = $root.replit.goval.api.Audio2.toObject(message.audio2, options);
                            if (options.oneofs)
                                object.body = "audio2";
                        }
                        if (message.PTYConfig != null && message.hasOwnProperty("PTYConfig")) {
                            object.PTYConfig = $root.replit.goval.api.PTYConfig.toObject(message.PTYConfig, options);
                            if (options.oneofs)
                                object.body = "PTYConfig";
                        }
                        if (message.stat != null && message.hasOwnProperty("stat")) {
                            object.stat = $root.replit.goval.api.File.toObject(message.stat, options);
                            if (options.oneofs)
                                object.body = "stat";
                        }
                        if (message.statRes != null && message.hasOwnProperty("statRes")) {
                            object.statRes = $root.replit.goval.api.StatResult.toObject(message.statRes, options);
                            if (options.oneofs)
                                object.body = "statRes";
                        }
                        if (message.debugMain != null && message.hasOwnProperty("debugMain")) {
                            object.debugMain = $root.replit.goval.api.DebugMain.toObject(message.debugMain, options);
                            if (options.oneofs)
                                object.body = "debugMain";
                        }
                        if (message.debugState != null && message.hasOwnProperty("debugState")) {
                            object.debugState = $root.replit.goval.api.DebugState.toObject(message.debugState, options);
                            if (options.oneofs)
                                object.body = "debugState";
                        }
                        if (message.debugMainReply != null && message.hasOwnProperty("debugMainReply")) {
                            object.debugMainReply = $root.replit.goval.api.DebugMainReply.toObject(message.debugMainReply, options);
                            if (options.oneofs)
                                object.body = "debugMainReply";
                        }
                        if (message.debugInput != null && message.hasOwnProperty("debugInput")) {
                            object.debugInput = $root.replit.goval.api.DebugInput.toObject(message.debugInput, options);
                            if (options.oneofs)
                                object.body = "debugInput";
                        }
                        if (message.debugOutput != null && message.hasOwnProperty("debugOutput")) {
                            object.debugOutput = $root.replit.goval.api.DebugOutput.toObject(message.debugOutput, options);
                            if (options.oneofs)
                                object.body = "debugOutput";
                        }
                        if (message.debugStop != null && message.hasOwnProperty("debugStop")) {
                            object.debugStop = $root.replit.goval.api.DebugStop.toObject(message.debugStop, options);
                            if (options.oneofs)
                                object.body = "debugStop";
                        }
                        if (message.debugLeave != null && message.hasOwnProperty("debugLeave")) {
                            object.debugLeave = $root.replit.goval.api.DebugLeave.toObject(message.debugLeave, options);
                            if (options.oneofs)
                                object.body = "debugLeave";
                        }
                        if (message.debugSessions != null && message.hasOwnProperty("debugSessions")) {
                            object.debugSessions = $root.replit.goval.api.DebugSessions.toObject(message.debugSessions, options);
                            if (options.oneofs)
                                object.body = "debugSessions";
                        }
                        if (message.dotReplitGetRequest != null && message.hasOwnProperty("dotReplitGetRequest")) {
                            object.dotReplitGetRequest = $root.replit.goval.api.DotReplitGetRequest.toObject(message.dotReplitGetRequest, options);
                            if (options.oneofs)
                                object.body = "dotReplitGetRequest";
                        }
                        if (message.dotReplitGetResponse != null && message.hasOwnProperty("dotReplitGetResponse")) {
                            object.dotReplitGetResponse = $root.replit.goval.api.DotReplitGetResponse.toObject(message.dotReplitGetResponse, options);
                            if (options.oneofs)
                                object.body = "dotReplitGetResponse";
                        }
                        if (message.debugAddBreakpointRequest != null && message.hasOwnProperty("debugAddBreakpointRequest")) {
                            object.debugAddBreakpointRequest = $root.replit.goval.api.DebugAddBreakpointRequest.toObject(message.debugAddBreakpointRequest, options);
                            if (options.oneofs)
                                object.body = "debugAddBreakpointRequest";
                        }
                        if (message.debugRemoveBreakpointRequest != null && message.hasOwnProperty("debugRemoveBreakpointRequest")) {
                            object.debugRemoveBreakpointRequest = $root.replit.goval.api.DebugRemoveBreakpointRequest.toObject(message.debugRemoveBreakpointRequest, options);
                            if (options.oneofs)
                                object.body = "debugRemoveBreakpointRequest";
                        }
                        if (message.debugBreakpointEvent != null && message.hasOwnProperty("debugBreakpointEvent")) {
                            object.debugBreakpointEvent = $root.replit.goval.api.DebugBreakpointEvent.toObject(message.debugBreakpointEvent, options);
                            if (options.oneofs)
                                object.body = "debugBreakpointEvent";
                        }
                        if (message.readMetaResponse != null && message.hasOwnProperty("readMetaResponse")) {
                            object.readMetaResponse = $root.replit.goval.api.ReadMetaResponse.toObject(message.readMetaResponse, options);
                            if (options.oneofs)
                                object.body = "readMetaResponse";
                        }
                        if (message.writeMetaResponse != null && message.hasOwnProperty("writeMetaResponse")) {
                            object.writeMetaResponse = $root.replit.goval.api.WriteMetaResponse.toObject(message.writeMetaResponse, options);
                            if (options.oneofs)
                                object.body = "writeMetaResponse";
                        }
                        if (message.appendMetaResponse != null && message.hasOwnProperty("appendMetaResponse")) {
                            object.appendMetaResponse = $root.replit.goval.api.AppendMetaResponse.toObject(message.appendMetaResponse, options);
                            if (options.oneofs)
                                object.body = "appendMetaResponse";
                        }
                        if (message.debugUpdateBreakpointRequest != null && message.hasOwnProperty("debugUpdateBreakpointRequest")) {
                            object.debugUpdateBreakpointRequest = $root.replit.goval.api.DebugUpdateBreakpointRequest.toObject(message.debugUpdateBreakpointRequest, options);
                            if (options.oneofs)
                                object.body = "debugUpdateBreakpointRequest";
                        }
                        if (message.fsSnapshotEvent != null && message.hasOwnProperty("fsSnapshotEvent")) {
                            object.fsSnapshotEvent = $root.replit.goval.api.FSSnapshotEvent.toObject(message.fsSnapshotEvent, options);
                            if (options.oneofs)
                                object.body = "fsSnapshotEvent";
                        }
                        if (message.snapshotEvent != null && message.hasOwnProperty("snapshotEvent")) {
                            object.snapshotEvent = $root.replit.goval.api.SnapshotEvent.toObject(message.snapshotEvent, options);
                            if (options.oneofs)
                                object.body = "snapshotEvent";
                        }
                        if (message.runConfigGetRequest != null && message.hasOwnProperty("runConfigGetRequest")) {
                            object.runConfigGetRequest = $root.replit.goval.api.RunConfigGetRequest.toObject(message.runConfigGetRequest, options);
                            if (options.oneofs)
                                object.body = "runConfigGetRequest";
                        }
                        if (message.runConfigGetResponse != null && message.hasOwnProperty("runConfigGetResponse")) {
                            object.runConfigGetResponse = $root.replit.goval.api.RunConfigGetResponse.toObject(message.runConfigGetResponse, options);
                            if (options.oneofs)
                                object.body = "runConfigGetResponse";
                        }
                        if (message.NoninteractiveFSChangeEvent != null && message.hasOwnProperty("NoninteractiveFSChangeEvent")) {
                            object.NoninteractiveFSChangeEvent = message.NoninteractiveFSChangeEvent;
                            if (options.oneofs)
                                object.body = "NoninteractiveFSChangeEvent";
                        }
                        if (message.firewallDenied != null && message.hasOwnProperty("firewallDenied")) {
                            object.firewallDenied = $root.replit.goval.api.FirewallDenied.toObject(message.firewallDenied, options);
                            if (options.oneofs)
                                object.body = "firewallDenied";
                        }
                        if (message.dotReplitUpdateRequest != null && message.hasOwnProperty("dotReplitUpdateRequest")) {
                            object.dotReplitUpdateRequest = $root.replit.goval.api.DotReplitUpdateRequest.toObject(message.dotReplitUpdateRequest, options);
                            if (options.oneofs)
                                object.body = "dotReplitUpdateRequest";
                        }
                        if (message.dotReplitUpdateResponse != null && message.hasOwnProperty("dotReplitUpdateResponse")) {
                            object.dotReplitUpdateResponse = $root.replit.goval.api.DotReplitUpdateResponse.toObject(message.dotReplitUpdateResponse, options);
                            if (options.oneofs)
                                object.body = "dotReplitUpdateResponse";
                        }
                        if (message.nixPackageAddRequest != null && message.hasOwnProperty("nixPackageAddRequest")) {
                            object.nixPackageAddRequest = $root.replit.goval.api.NixPackageAddRequest.toObject(message.nixPackageAddRequest, options);
                            if (options.oneofs)
                                object.body = "nixPackageAddRequest";
                        }
                        if (message.nixPackageAddResponse != null && message.hasOwnProperty("nixPackageAddResponse")) {
                            object.nixPackageAddResponse = $root.replit.goval.api.NixPackageAddResponse.toObject(message.nixPackageAddResponse, options);
                            if (options.oneofs)
                                object.body = "nixPackageAddResponse";
                        }
                        if (message.nixPackageRemoveRequest != null && message.hasOwnProperty("nixPackageRemoveRequest")) {
                            object.nixPackageRemoveRequest = $root.replit.goval.api.NixPackageRemoveRequest.toObject(message.nixPackageRemoveRequest, options);
                            if (options.oneofs)
                                object.body = "nixPackageRemoveRequest";
                        }
                        if (message.nixPackageRemoveResponse != null && message.hasOwnProperty("nixPackageRemoveResponse")) {
                            object.nixPackageRemoveResponse = $root.replit.goval.api.NixPackageRemoveResponse.toObject(message.nixPackageRemoveResponse, options);
                            if (options.oneofs)
                                object.body = "nixPackageRemoveResponse";
                        }
                        if (message.nixPackageListRequest != null && message.hasOwnProperty("nixPackageListRequest")) {
                            object.nixPackageListRequest = $root.replit.goval.api.NixPackageListRequest.toObject(message.nixPackageListRequest, options);
                            if (options.oneofs)
                                object.body = "nixPackageListRequest";
                        }
                        if (message.nixPackageListResponse != null && message.hasOwnProperty("nixPackageListResponse")) {
                            object.nixPackageListResponse = $root.replit.goval.api.NixPackageListResponse.toObject(message.nixPackageListResponse, options);
                            if (options.oneofs)
                                object.body = "nixPackageListResponse";
                        }
                        if (message.nixChannelsRequest != null && message.hasOwnProperty("nixChannelsRequest")) {
                            object.nixChannelsRequest = $root.replit.goval.api.NixChannelsRequest.toObject(message.nixChannelsRequest, options);
                            if (options.oneofs)
                                object.body = "nixChannelsRequest";
                        }
                        if (message.nixChannelsResponse != null && message.hasOwnProperty("nixChannelsResponse")) {
                            object.nixChannelsResponse = $root.replit.goval.api.NixChannelsResponse.toObject(message.nixChannelsResponse, options);
                            if (options.oneofs)
                                object.body = "nixChannelsResponse";
                        }
                        if (message.nixChannelLatestStableRequest != null && message.hasOwnProperty("nixChannelLatestStableRequest")) {
                            object.nixChannelLatestStableRequest = $root.replit.goval.api.NixChannelLatestStableRequest.toObject(message.nixChannelLatestStableRequest, options);
                            if (options.oneofs)
                                object.body = "nixChannelLatestStableRequest";
                        }
                        if (message.nixChannelLatestStableResponse != null && message.hasOwnProperty("nixChannelLatestStableResponse")) {
                            object.nixChannelLatestStableResponse = $root.replit.goval.api.NixChannelLatestStableResponse.toObject(message.nixChannelLatestStableResponse, options);
                            if (options.oneofs)
                                object.body = "nixChannelLatestStableResponse";
                        }
                        if (message.nixPackageSearchRequest != null && message.hasOwnProperty("nixPackageSearchRequest")) {
                            object.nixPackageSearchRequest = $root.replit.goval.api.NixPackageSearchRequest.toObject(message.nixPackageSearchRequest, options);
                            if (options.oneofs)
                                object.body = "nixPackageSearchRequest";
                        }
                        if (message.nixPackageSearchResponse != null && message.hasOwnProperty("nixPackageSearchResponse")) {
                            object.nixPackageSearchResponse = $root.replit.goval.api.NixPackageSearchResponse.toObject(message.nixPackageSearchResponse, options);
                            if (options.oneofs)
                                object.body = "nixPackageSearchResponse";
                        }
                        if (message.record != null && message.hasOwnProperty("record")) {
                            object.record = message.record;
                            if (options.oneofs)
                                object.body = "record";
                        }
                        if (message.userEvent != null && message.hasOwnProperty("userEvent")) {
                            object.userEvent = $root.replit.goval.api.UserEvent.toObject(message.userEvent, options);
                            if (options.oneofs)
                                object.body = "userEvent";
                        }
                        if (message.replspaceApiOpenFile != null && message.hasOwnProperty("replspaceApiOpenFile")) {
                            object.replspaceApiOpenFile = $root.replit.goval.api.ReplspaceApiOpenFile.toObject(message.replspaceApiOpenFile, options);
                            if (options.oneofs)
                                object.body = "replspaceApiOpenFile";
                        }
                        if (message.replspaceApiCloseFile != null && message.hasOwnProperty("replspaceApiCloseFile")) {
                            object.replspaceApiCloseFile = $root.replit.goval.api.ReplspaceApiCloseFile.toObject(message.replspaceApiCloseFile, options);
                            if (options.oneofs)
                                object.body = "replspaceApiCloseFile";
                        }
                        if (message.replspaceApiGetGitHubToken != null && message.hasOwnProperty("replspaceApiGetGitHubToken")) {
                            object.replspaceApiGetGitHubToken = $root.replit.goval.api.ReplspaceApiGetGitHubToken.toObject(message.replspaceApiGetGitHubToken, options);
                            if (options.oneofs)
                                object.body = "replspaceApiGetGitHubToken";
                        }
                        if (message.replspaceApiGitHubToken != null && message.hasOwnProperty("replspaceApiGitHubToken")) {
                            object.replspaceApiGitHubToken = $root.replit.goval.api.ReplspaceApiGitHubToken.toObject(message.replspaceApiGitHubToken, options);
                            if (options.oneofs)
                                object.body = "replspaceApiGitHubToken";
                        }
                        if (message.ref != null && message.hasOwnProperty("ref"))
                            object.ref = message.ref;
                        var keys2;
                        if (message.traceInfo && (keys2 = Object.keys(message.traceInfo)).length) {
                            object.traceInfo = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.traceInfo[keys2[j]] = message.traceInfo[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Command to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Command
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Command.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Command;
                })();
    
                api.NixPackageAddRequest = (function() {
    
                    /**
                     * Properties of a NixPackageAddRequest.
                     * @memberof replit.goval.api
                     * @interface INixPackageAddRequest
                     * @property {Array.<string>|null} [packages] NixPackageAddRequest packages
                     */
    
                    /**
                     * Constructs a new NixPackageAddRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageAddRequest.
                     * @constructor
                     * @param {replit.goval.api.INixPackageAddRequest=} [properties] Properties to set
                     */
                    function NixPackageAddRequest(properties) {
                        this.packages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackageAddRequest packages.
                     * @member {Array.<string>} packages
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @instance
                     */
                    NixPackageAddRequest.prototype.packages = $util.emptyArray;
    
                    /**
                     * Creates a new NixPackageAddRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {replit.goval.api.INixPackageAddRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageAddRequest} NixPackageAddRequest instance
                     */
                    NixPackageAddRequest.create = function create(properties) {
                        return NixPackageAddRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageAddRequest message. Does not implicitly {@link replit.goval.api.NixPackageAddRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {replit.goval.api.NixPackageAddRequest} message NixPackageAddRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageAddRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packages != null && message.packages.length)
                            for (var i = 0; i < message.packages.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packages[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageAddRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageAddRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {replit.goval.api.NixPackageAddRequest} message NixPackageAddRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageAddRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageAddRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageAddRequest} NixPackageAddRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageAddRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageAddRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.packages && message.packages.length))
                                    message.packages = [];
                                message.packages.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageAddRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageAddRequest} NixPackageAddRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageAddRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageAddRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageAddRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packages != null && message.hasOwnProperty("packages")) {
                            if (!Array.isArray(message.packages))
                                return "packages: array expected";
                            for (var i = 0; i < message.packages.length; ++i)
                                if (!$util.isString(message.packages[i]))
                                    return "packages: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageAddRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageAddRequest} NixPackageAddRequest
                     */
                    NixPackageAddRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageAddRequest)
                            return object;
                        var message = new $root.replit.goval.api.NixPackageAddRequest();
                        if (object.packages) {
                            if (!Array.isArray(object.packages))
                                throw TypeError(".replit.goval.api.NixPackageAddRequest.packages: array expected");
                            message.packages = [];
                            for (var i = 0; i < object.packages.length; ++i)
                                message.packages[i] = String(object.packages[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackageAddRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @static
                     * @param {replit.goval.api.NixPackageAddRequest} message NixPackageAddRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageAddRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.packages = [];
                        if (message.packages && message.packages.length) {
                            object.packages = [];
                            for (var j = 0; j < message.packages.length; ++j)
                                object.packages[j] = message.packages[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixPackageAddRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageAddRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageAddRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageAddRequest;
                })();
    
                api.NixPackageAddResponse = (function() {
    
                    /**
                     * Properties of a NixPackageAddResponse.
                     * @memberof replit.goval.api
                     * @interface INixPackageAddResponse
                     */
    
                    /**
                     * Constructs a new NixPackageAddResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageAddResponse.
                     * @constructor
                     * @param {replit.goval.api.INixPackageAddResponse=} [properties] Properties to set
                     */
                    function NixPackageAddResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NixPackageAddResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {replit.goval.api.INixPackageAddResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageAddResponse} NixPackageAddResponse instance
                     */
                    NixPackageAddResponse.create = function create(properties) {
                        return NixPackageAddResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageAddResponse message. Does not implicitly {@link replit.goval.api.NixPackageAddResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {replit.goval.api.NixPackageAddResponse} message NixPackageAddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageAddResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageAddResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageAddResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {replit.goval.api.NixPackageAddResponse} message NixPackageAddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageAddResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageAddResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageAddResponse} NixPackageAddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageAddResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageAddResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageAddResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageAddResponse} NixPackageAddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageAddResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageAddResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageAddResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageAddResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageAddResponse} NixPackageAddResponse
                     */
                    NixPackageAddResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageAddResponse)
                            return object;
                        return new $root.replit.goval.api.NixPackageAddResponse();
                    };
    
                    /**
                     * Creates a plain object from a NixPackageAddResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @static
                     * @param {replit.goval.api.NixPackageAddResponse} message NixPackageAddResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageAddResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NixPackageAddResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageAddResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageAddResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageAddResponse;
                })();
    
                api.NixPackageRemoveRequest = (function() {
    
                    /**
                     * Properties of a NixPackageRemoveRequest.
                     * @memberof replit.goval.api
                     * @interface INixPackageRemoveRequest
                     * @property {Array.<string>|null} [packages] NixPackageRemoveRequest packages
                     */
    
                    /**
                     * Constructs a new NixPackageRemoveRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageRemoveRequest.
                     * @constructor
                     * @param {replit.goval.api.INixPackageRemoveRequest=} [properties] Properties to set
                     */
                    function NixPackageRemoveRequest(properties) {
                        this.packages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackageRemoveRequest packages.
                     * @member {Array.<string>} packages
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @instance
                     */
                    NixPackageRemoveRequest.prototype.packages = $util.emptyArray;
    
                    /**
                     * Creates a new NixPackageRemoveRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {replit.goval.api.INixPackageRemoveRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageRemoveRequest} NixPackageRemoveRequest instance
                     */
                    NixPackageRemoveRequest.create = function create(properties) {
                        return NixPackageRemoveRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageRemoveRequest message. Does not implicitly {@link replit.goval.api.NixPackageRemoveRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveRequest} message NixPackageRemoveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageRemoveRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packages != null && message.packages.length)
                            for (var i = 0; i < message.packages.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.packages[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageRemoveRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageRemoveRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveRequest} message NixPackageRemoveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageRemoveRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageRemoveRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageRemoveRequest} NixPackageRemoveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageRemoveRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageRemoveRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.packages && message.packages.length))
                                    message.packages = [];
                                message.packages.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageRemoveRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageRemoveRequest} NixPackageRemoveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageRemoveRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageRemoveRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageRemoveRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packages != null && message.hasOwnProperty("packages")) {
                            if (!Array.isArray(message.packages))
                                return "packages: array expected";
                            for (var i = 0; i < message.packages.length; ++i)
                                if (!$util.isString(message.packages[i]))
                                    return "packages: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageRemoveRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageRemoveRequest} NixPackageRemoveRequest
                     */
                    NixPackageRemoveRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageRemoveRequest)
                            return object;
                        var message = new $root.replit.goval.api.NixPackageRemoveRequest();
                        if (object.packages) {
                            if (!Array.isArray(object.packages))
                                throw TypeError(".replit.goval.api.NixPackageRemoveRequest.packages: array expected");
                            message.packages = [];
                            for (var i = 0; i < object.packages.length; ++i)
                                message.packages[i] = String(object.packages[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackageRemoveRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveRequest} message NixPackageRemoveRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageRemoveRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.packages = [];
                        if (message.packages && message.packages.length) {
                            object.packages = [];
                            for (var j = 0; j < message.packages.length; ++j)
                                object.packages[j] = message.packages[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixPackageRemoveRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageRemoveRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageRemoveRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageRemoveRequest;
                })();
    
                api.NixPackageRemoveResponse = (function() {
    
                    /**
                     * Properties of a NixPackageRemoveResponse.
                     * @memberof replit.goval.api
                     * @interface INixPackageRemoveResponse
                     */
    
                    /**
                     * Constructs a new NixPackageRemoveResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageRemoveResponse.
                     * @constructor
                     * @param {replit.goval.api.INixPackageRemoveResponse=} [properties] Properties to set
                     */
                    function NixPackageRemoveResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NixPackageRemoveResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {replit.goval.api.INixPackageRemoveResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageRemoveResponse} NixPackageRemoveResponse instance
                     */
                    NixPackageRemoveResponse.create = function create(properties) {
                        return NixPackageRemoveResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageRemoveResponse message. Does not implicitly {@link replit.goval.api.NixPackageRemoveResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveResponse} message NixPackageRemoveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageRemoveResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageRemoveResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageRemoveResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveResponse} message NixPackageRemoveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageRemoveResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageRemoveResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageRemoveResponse} NixPackageRemoveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageRemoveResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageRemoveResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageRemoveResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageRemoveResponse} NixPackageRemoveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageRemoveResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageRemoveResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageRemoveResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageRemoveResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageRemoveResponse} NixPackageRemoveResponse
                     */
                    NixPackageRemoveResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageRemoveResponse)
                            return object;
                        return new $root.replit.goval.api.NixPackageRemoveResponse();
                    };
    
                    /**
                     * Creates a plain object from a NixPackageRemoveResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @static
                     * @param {replit.goval.api.NixPackageRemoveResponse} message NixPackageRemoveResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageRemoveResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NixPackageRemoveResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageRemoveResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageRemoveResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageRemoveResponse;
                })();
    
                api.NixPackageListRequest = (function() {
    
                    /**
                     * Properties of a NixPackageListRequest.
                     * @memberof replit.goval.api
                     * @interface INixPackageListRequest
                     */
    
                    /**
                     * Constructs a new NixPackageListRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageListRequest.
                     * @constructor
                     * @param {replit.goval.api.INixPackageListRequest=} [properties] Properties to set
                     */
                    function NixPackageListRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NixPackageListRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {replit.goval.api.INixPackageListRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageListRequest} NixPackageListRequest instance
                     */
                    NixPackageListRequest.create = function create(properties) {
                        return NixPackageListRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageListRequest message. Does not implicitly {@link replit.goval.api.NixPackageListRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {replit.goval.api.NixPackageListRequest} message NixPackageListRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageListRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageListRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageListRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {replit.goval.api.NixPackageListRequest} message NixPackageListRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageListRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageListRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageListRequest} NixPackageListRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageListRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageListRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageListRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageListRequest} NixPackageListRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageListRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageListRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageListRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageListRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageListRequest} NixPackageListRequest
                     */
                    NixPackageListRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageListRequest)
                            return object;
                        return new $root.replit.goval.api.NixPackageListRequest();
                    };
    
                    /**
                     * Creates a plain object from a NixPackageListRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @static
                     * @param {replit.goval.api.NixPackageListRequest} message NixPackageListRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageListRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NixPackageListRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageListRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageListRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageListRequest;
                })();
    
                api.NixPackageListResponse = (function() {
    
                    /**
                     * Properties of a NixPackageListResponse.
                     * @memberof replit.goval.api
                     * @interface INixPackageListResponse
                     * @property {Array.<replit.goval.api.NixPackage|replit.goval.api.INixPackage>|null} [packages] NixPackageListResponse packages
                     */
    
                    /**
                     * Constructs a new NixPackageListResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageListResponse.
                     * @constructor
                     * @param {replit.goval.api.INixPackageListResponse=} [properties] Properties to set
                     */
                    function NixPackageListResponse(properties) {
                        this.packages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackageListResponse packages.
                     * @member {Array.<replit.goval.api.NixPackage>} packages
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @instance
                     */
                    NixPackageListResponse.prototype.packages = $util.emptyArray;
    
                    /**
                     * Creates a new NixPackageListResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {replit.goval.api.INixPackageListResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageListResponse} NixPackageListResponse instance
                     */
                    NixPackageListResponse.create = function create(properties) {
                        return NixPackageListResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageListResponse message. Does not implicitly {@link replit.goval.api.NixPackageListResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {replit.goval.api.NixPackageListResponse} message NixPackageListResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageListResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packages != null && message.packages.length)
                            for (var i = 0; i < message.packages.length; ++i)
                                $root.replit.goval.api.NixPackage.encode(message.packages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageListResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageListResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {replit.goval.api.NixPackageListResponse} message NixPackageListResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageListResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageListResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageListResponse} NixPackageListResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageListResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageListResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.packages && message.packages.length))
                                    message.packages = [];
                                message.packages.push($root.replit.goval.api.NixPackage.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageListResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageListResponse} NixPackageListResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageListResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageListResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageListResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packages != null && message.hasOwnProperty("packages")) {
                            if (!Array.isArray(message.packages))
                                return "packages: array expected";
                            for (var i = 0; i < message.packages.length; ++i) {
                                var error = $root.replit.goval.api.NixPackage.verify(message.packages[i]);
                                if (error)
                                    return "packages." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageListResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageListResponse} NixPackageListResponse
                     */
                    NixPackageListResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageListResponse)
                            return object;
                        var message = new $root.replit.goval.api.NixPackageListResponse();
                        if (object.packages) {
                            if (!Array.isArray(object.packages))
                                throw TypeError(".replit.goval.api.NixPackageListResponse.packages: array expected");
                            message.packages = [];
                            for (var i = 0; i < object.packages.length; ++i) {
                                if (typeof object.packages[i] !== "object")
                                    throw TypeError(".replit.goval.api.NixPackageListResponse.packages: object expected");
                                message.packages[i] = $root.replit.goval.api.NixPackage.fromObject(object.packages[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackageListResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @static
                     * @param {replit.goval.api.NixPackageListResponse} message NixPackageListResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageListResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.packages = [];
                        if (message.packages && message.packages.length) {
                            object.packages = [];
                            for (var j = 0; j < message.packages.length; ++j)
                                object.packages[j] = $root.replit.goval.api.NixPackage.toObject(message.packages[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixPackageListResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageListResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageListResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageListResponse;
                })();
    
                api.NixPackage = (function() {
    
                    /**
                     * Properties of a NixPackage.
                     * @memberof replit.goval.api
                     * @interface INixPackage
                     * @property {string|null} [name] NixPackage name
                     * @property {string|null} [description] NixPackage description
                     * @property {string|null} [version] NixPackage version
                     * @property {Array.<string>|null} [homepageURL] NixPackage homepageURL
                     * @property {Array.<string>|null} [maintainers] NixPackage maintainers
                     * @property {Array.<string>|null} [licenses] NixPackage licenses
                     */
    
                    /**
                     * Constructs a new NixPackage.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackage.
                     * @constructor
                     * @param {replit.goval.api.INixPackage=} [properties] Properties to set
                     */
                    function NixPackage(properties) {
                        this.homepageURL = [];
                        this.maintainers = [];
                        this.licenses = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackage name.
                     * @member {string} name
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.name = "";
    
                    /**
                     * NixPackage description.
                     * @member {string} description
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.description = "";
    
                    /**
                     * NixPackage version.
                     * @member {string} version
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.version = "";
    
                    /**
                     * NixPackage homepageURL.
                     * @member {Array.<string>} homepageURL
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.homepageURL = $util.emptyArray;
    
                    /**
                     * NixPackage maintainers.
                     * @member {Array.<string>} maintainers
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.maintainers = $util.emptyArray;
    
                    /**
                     * NixPackage licenses.
                     * @member {Array.<string>} licenses
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     */
                    NixPackage.prototype.licenses = $util.emptyArray;
    
                    /**
                     * Creates a new NixPackage instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {replit.goval.api.INixPackage=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackage} NixPackage instance
                     */
                    NixPackage.create = function create(properties) {
                        return NixPackage.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackage message. Does not implicitly {@link replit.goval.api.NixPackage.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {replit.goval.api.NixPackage} message NixPackage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.version);
                        if (message.homepageURL != null && message.homepageURL.length)
                            for (var i = 0; i < message.homepageURL.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.homepageURL[i]);
                        if (message.maintainers != null && message.maintainers.length)
                            for (var i = 0; i < message.maintainers.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.maintainers[i]);
                        if (message.licenses != null && message.licenses.length)
                            for (var i = 0; i < message.licenses.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.licenses[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackage message, length delimited. Does not implicitly {@link replit.goval.api.NixPackage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {replit.goval.api.NixPackage} message NixPackage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackage message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackage} NixPackage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.version = reader.string();
                                break;
                            case 4:
                                if (!(message.homepageURL && message.homepageURL.length))
                                    message.homepageURL = [];
                                message.homepageURL.push(reader.string());
                                break;
                            case 5:
                                if (!(message.maintainers && message.maintainers.length))
                                    message.maintainers = [];
                                message.maintainers.push(reader.string());
                                break;
                            case 6:
                                if (!(message.licenses && message.licenses.length))
                                    message.licenses = [];
                                message.licenses.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackage} NixPackage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackage message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        if (message.homepageURL != null && message.hasOwnProperty("homepageURL")) {
                            if (!Array.isArray(message.homepageURL))
                                return "homepageURL: array expected";
                            for (var i = 0; i < message.homepageURL.length; ++i)
                                if (!$util.isString(message.homepageURL[i]))
                                    return "homepageURL: string[] expected";
                        }
                        if (message.maintainers != null && message.hasOwnProperty("maintainers")) {
                            if (!Array.isArray(message.maintainers))
                                return "maintainers: array expected";
                            for (var i = 0; i < message.maintainers.length; ++i)
                                if (!$util.isString(message.maintainers[i]))
                                    return "maintainers: string[] expected";
                        }
                        if (message.licenses != null && message.hasOwnProperty("licenses")) {
                            if (!Array.isArray(message.licenses))
                                return "licenses: array expected";
                            for (var i = 0; i < message.licenses.length; ++i)
                                if (!$util.isString(message.licenses[i]))
                                    return "licenses: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixPackage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackage} NixPackage
                     */
                    NixPackage.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackage)
                            return object;
                        var message = new $root.replit.goval.api.NixPackage();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.version != null)
                            message.version = String(object.version);
                        if (object.homepageURL) {
                            if (!Array.isArray(object.homepageURL))
                                throw TypeError(".replit.goval.api.NixPackage.homepageURL: array expected");
                            message.homepageURL = [];
                            for (var i = 0; i < object.homepageURL.length; ++i)
                                message.homepageURL[i] = String(object.homepageURL[i]);
                        }
                        if (object.maintainers) {
                            if (!Array.isArray(object.maintainers))
                                throw TypeError(".replit.goval.api.NixPackage.maintainers: array expected");
                            message.maintainers = [];
                            for (var i = 0; i < object.maintainers.length; ++i)
                                message.maintainers[i] = String(object.maintainers[i]);
                        }
                        if (object.licenses) {
                            if (!Array.isArray(object.licenses))
                                throw TypeError(".replit.goval.api.NixPackage.licenses: array expected");
                            message.licenses = [];
                            for (var i = 0; i < object.licenses.length; ++i)
                                message.licenses[i] = String(object.licenses[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackage
                     * @static
                     * @param {replit.goval.api.NixPackage} message NixPackage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.homepageURL = [];
                            object.maintainers = [];
                            object.licenses = [];
                        }
                        if (options.defaults) {
                            object.name = "";
                            object.description = "";
                            object.version = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.homepageURL && message.homepageURL.length) {
                            object.homepageURL = [];
                            for (var j = 0; j < message.homepageURL.length; ++j)
                                object.homepageURL[j] = message.homepageURL[j];
                        }
                        if (message.maintainers && message.maintainers.length) {
                            object.maintainers = [];
                            for (var j = 0; j < message.maintainers.length; ++j)
                                object.maintainers[j] = message.maintainers[j];
                        }
                        if (message.licenses && message.licenses.length) {
                            object.licenses = [];
                            for (var j = 0; j < message.licenses.length; ++j)
                                object.licenses[j] = message.licenses[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixPackage to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackage;
                })();
    
                api.NixChannelsRequest = (function() {
    
                    /**
                     * Properties of a NixChannelsRequest.
                     * @memberof replit.goval.api
                     * @interface INixChannelsRequest
                     */
    
                    /**
                     * Constructs a new NixChannelsRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixChannelsRequest.
                     * @constructor
                     * @param {replit.goval.api.INixChannelsRequest=} [properties] Properties to set
                     */
                    function NixChannelsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NixChannelsRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {replit.goval.api.INixChannelsRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixChannelsRequest} NixChannelsRequest instance
                     */
                    NixChannelsRequest.create = function create(properties) {
                        return NixChannelsRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixChannelsRequest message. Does not implicitly {@link replit.goval.api.NixChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {replit.goval.api.NixChannelsRequest} message NixChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixChannelsRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixChannelsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {replit.goval.api.NixChannelsRequest} message NixChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixChannelsRequest} NixChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixChannelsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixChannelsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixChannelsRequest} NixChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixChannelsRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixChannelsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixChannelsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixChannelsRequest} NixChannelsRequest
                     */
                    NixChannelsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixChannelsRequest)
                            return object;
                        return new $root.replit.goval.api.NixChannelsRequest();
                    };
    
                    /**
                     * Creates a plain object from a NixChannelsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @static
                     * @param {replit.goval.api.NixChannelsRequest} message NixChannelsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixChannelsRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NixChannelsRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixChannelsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixChannelsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixChannelsRequest;
                })();
    
                api.NixChannelsResponse = (function() {
    
                    /**
                     * Properties of a NixChannelsResponse.
                     * @memberof replit.goval.api
                     * @interface INixChannelsResponse
                     * @property {Array.<string>|null} [channels] NixChannelsResponse channels
                     */
    
                    /**
                     * Constructs a new NixChannelsResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixChannelsResponse.
                     * @constructor
                     * @param {replit.goval.api.INixChannelsResponse=} [properties] Properties to set
                     */
                    function NixChannelsResponse(properties) {
                        this.channels = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixChannelsResponse channels.
                     * @member {Array.<string>} channels
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @instance
                     */
                    NixChannelsResponse.prototype.channels = $util.emptyArray;
    
                    /**
                     * Creates a new NixChannelsResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {replit.goval.api.INixChannelsResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixChannelsResponse} NixChannelsResponse instance
                     */
                    NixChannelsResponse.create = function create(properties) {
                        return NixChannelsResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixChannelsResponse message. Does not implicitly {@link replit.goval.api.NixChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {replit.goval.api.NixChannelsResponse} message NixChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (var i = 0; i < message.channels.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.channels[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixChannelsResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixChannelsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {replit.goval.api.NixChannelsResponse} message NixChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixChannelsResponse} NixChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixChannelsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixChannelsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixChannelsResponse} NixChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixChannelsResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixChannelsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (var i = 0; i < message.channels.length; ++i)
                                if (!$util.isString(message.channels[i]))
                                    return "channels: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixChannelsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixChannelsResponse} NixChannelsResponse
                     */
                    NixChannelsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixChannelsResponse)
                            return object;
                        var message = new $root.replit.goval.api.NixChannelsResponse();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".replit.goval.api.NixChannelsResponse.channels: array expected");
                            message.channels = [];
                            for (var i = 0; i < object.channels.length; ++i)
                                message.channels[i] = String(object.channels[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixChannelsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @static
                     * @param {replit.goval.api.NixChannelsResponse} message NixChannelsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixChannelsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.channels = [];
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (var j = 0; j < message.channels.length; ++j)
                                object.channels[j] = message.channels[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixChannelsResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixChannelsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixChannelsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixChannelsResponse;
                })();
    
                api.NixChannelLatestStableRequest = (function() {
    
                    /**
                     * Properties of a NixChannelLatestStableRequest.
                     * @memberof replit.goval.api
                     * @interface INixChannelLatestStableRequest
                     */
    
                    /**
                     * Constructs a new NixChannelLatestStableRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixChannelLatestStableRequest.
                     * @constructor
                     * @param {replit.goval.api.INixChannelLatestStableRequest=} [properties] Properties to set
                     */
                    function NixChannelLatestStableRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NixChannelLatestStableRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {replit.goval.api.INixChannelLatestStableRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixChannelLatestStableRequest} NixChannelLatestStableRequest instance
                     */
                    NixChannelLatestStableRequest.create = function create(properties) {
                        return NixChannelLatestStableRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixChannelLatestStableRequest message. Does not implicitly {@link replit.goval.api.NixChannelLatestStableRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableRequest} message NixChannelLatestStableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelLatestStableRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixChannelLatestStableRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixChannelLatestStableRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableRequest} message NixChannelLatestStableRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelLatestStableRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixChannelLatestStableRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixChannelLatestStableRequest} NixChannelLatestStableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelLatestStableRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixChannelLatestStableRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixChannelLatestStableRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixChannelLatestStableRequest} NixChannelLatestStableRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelLatestStableRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixChannelLatestStableRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixChannelLatestStableRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixChannelLatestStableRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixChannelLatestStableRequest} NixChannelLatestStableRequest
                     */
                    NixChannelLatestStableRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixChannelLatestStableRequest)
                            return object;
                        return new $root.replit.goval.api.NixChannelLatestStableRequest();
                    };
    
                    /**
                     * Creates a plain object from a NixChannelLatestStableRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableRequest} message NixChannelLatestStableRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixChannelLatestStableRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NixChannelLatestStableRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixChannelLatestStableRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixChannelLatestStableRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixChannelLatestStableRequest;
                })();
    
                api.NixChannelLatestStableResponse = (function() {
    
                    /**
                     * Properties of a NixChannelLatestStableResponse.
                     * @memberof replit.goval.api
                     * @interface INixChannelLatestStableResponse
                     * @property {string|null} [channel] NixChannelLatestStableResponse channel
                     */
    
                    /**
                     * Constructs a new NixChannelLatestStableResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixChannelLatestStableResponse.
                     * @constructor
                     * @param {replit.goval.api.INixChannelLatestStableResponse=} [properties] Properties to set
                     */
                    function NixChannelLatestStableResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixChannelLatestStableResponse channel.
                     * @member {string} channel
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @instance
                     */
                    NixChannelLatestStableResponse.prototype.channel = "";
    
                    /**
                     * Creates a new NixChannelLatestStableResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {replit.goval.api.INixChannelLatestStableResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixChannelLatestStableResponse} NixChannelLatestStableResponse instance
                     */
                    NixChannelLatestStableResponse.create = function create(properties) {
                        return NixChannelLatestStableResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixChannelLatestStableResponse message. Does not implicitly {@link replit.goval.api.NixChannelLatestStableResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableResponse} message NixChannelLatestStableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelLatestStableResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.channel);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixChannelLatestStableResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixChannelLatestStableResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableResponse} message NixChannelLatestStableResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixChannelLatestStableResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixChannelLatestStableResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixChannelLatestStableResponse} NixChannelLatestStableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelLatestStableResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixChannelLatestStableResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixChannelLatestStableResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixChannelLatestStableResponse} NixChannelLatestStableResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixChannelLatestStableResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixChannelLatestStableResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixChannelLatestStableResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            if (!$util.isString(message.channel))
                                return "channel: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixChannelLatestStableResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixChannelLatestStableResponse} NixChannelLatestStableResponse
                     */
                    NixChannelLatestStableResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixChannelLatestStableResponse)
                            return object;
                        var message = new $root.replit.goval.api.NixChannelLatestStableResponse();
                        if (object.channel != null)
                            message.channel = String(object.channel);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixChannelLatestStableResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @static
                     * @param {replit.goval.api.NixChannelLatestStableResponse} message NixChannelLatestStableResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixChannelLatestStableResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.channel = "";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = message.channel;
                        return object;
                    };
    
                    /**
                     * Converts this NixChannelLatestStableResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixChannelLatestStableResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixChannelLatestStableResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixChannelLatestStableResponse;
                })();
    
                api.NixPackageSearchRequest = (function() {
    
                    /**
                     * Properties of a NixPackageSearchRequest.
                     * @memberof replit.goval.api
                     * @interface INixPackageSearchRequest
                     * @property {string|null} [query] NixPackageSearchRequest query
                     */
    
                    /**
                     * Constructs a new NixPackageSearchRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageSearchRequest.
                     * @constructor
                     * @param {replit.goval.api.INixPackageSearchRequest=} [properties] Properties to set
                     */
                    function NixPackageSearchRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackageSearchRequest query.
                     * @member {string} query
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @instance
                     */
                    NixPackageSearchRequest.prototype.query = "";
    
                    /**
                     * Creates a new NixPackageSearchRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {replit.goval.api.INixPackageSearchRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageSearchRequest} NixPackageSearchRequest instance
                     */
                    NixPackageSearchRequest.create = function create(properties) {
                        return NixPackageSearchRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageSearchRequest message. Does not implicitly {@link replit.goval.api.NixPackageSearchRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {replit.goval.api.NixPackageSearchRequest} message NixPackageSearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageSearchRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.query);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageSearchRequest message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageSearchRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {replit.goval.api.NixPackageSearchRequest} message NixPackageSearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageSearchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageSearchRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageSearchRequest} NixPackageSearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageSearchRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageSearchRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.query = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageSearchRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageSearchRequest} NixPackageSearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageSearchRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageSearchRequest message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageSearchRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.query != null && message.hasOwnProperty("query"))
                            if (!$util.isString(message.query))
                                return "query: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageSearchRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageSearchRequest} NixPackageSearchRequest
                     */
                    NixPackageSearchRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageSearchRequest)
                            return object;
                        var message = new $root.replit.goval.api.NixPackageSearchRequest();
                        if (object.query != null)
                            message.query = String(object.query);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackageSearchRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @static
                     * @param {replit.goval.api.NixPackageSearchRequest} message NixPackageSearchRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageSearchRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.query = "";
                        if (message.query != null && message.hasOwnProperty("query"))
                            object.query = message.query;
                        return object;
                    };
    
                    /**
                     * Converts this NixPackageSearchRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageSearchRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageSearchRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageSearchRequest;
                })();
    
                api.NixPackageSearchResponse = (function() {
    
                    /**
                     * Properties of a NixPackageSearchResponse.
                     * @memberof replit.goval.api
                     * @interface INixPackageSearchResponse
                     * @property {Array.<replit.goval.api.NixPackage|replit.goval.api.INixPackage>|null} [packages] NixPackageSearchResponse packages
                     */
    
                    /**
                     * Constructs a new NixPackageSearchResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixPackageSearchResponse.
                     * @constructor
                     * @param {replit.goval.api.INixPackageSearchResponse=} [properties] Properties to set
                     */
                    function NixPackageSearchResponse(properties) {
                        this.packages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixPackageSearchResponse packages.
                     * @member {Array.<replit.goval.api.NixPackage>} packages
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @instance
                     */
                    NixPackageSearchResponse.prototype.packages = $util.emptyArray;
    
                    /**
                     * Creates a new NixPackageSearchResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {replit.goval.api.INixPackageSearchResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.NixPackageSearchResponse} NixPackageSearchResponse instance
                     */
                    NixPackageSearchResponse.create = function create(properties) {
                        return NixPackageSearchResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixPackageSearchResponse message. Does not implicitly {@link replit.goval.api.NixPackageSearchResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {replit.goval.api.NixPackageSearchResponse} message NixPackageSearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageSearchResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packages != null && message.packages.length)
                            for (var i = 0; i < message.packages.length; ++i)
                                $root.replit.goval.api.NixPackage.encode(message.packages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixPackageSearchResponse message, length delimited. Does not implicitly {@link replit.goval.api.NixPackageSearchResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {replit.goval.api.NixPackageSearchResponse} message NixPackageSearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixPackageSearchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixPackageSearchResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixPackageSearchResponse} NixPackageSearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageSearchResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixPackageSearchResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.packages && message.packages.length))
                                    message.packages = [];
                                message.packages.push($root.replit.goval.api.NixPackage.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixPackageSearchResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixPackageSearchResponse} NixPackageSearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixPackageSearchResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixPackageSearchResponse message.
                     * @function verify
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixPackageSearchResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packages != null && message.hasOwnProperty("packages")) {
                            if (!Array.isArray(message.packages))
                                return "packages: array expected";
                            for (var i = 0; i < message.packages.length; ++i) {
                                var error = $root.replit.goval.api.NixPackage.verify(message.packages[i]);
                                if (error)
                                    return "packages." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NixPackageSearchResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixPackageSearchResponse} NixPackageSearchResponse
                     */
                    NixPackageSearchResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixPackageSearchResponse)
                            return object;
                        var message = new $root.replit.goval.api.NixPackageSearchResponse();
                        if (object.packages) {
                            if (!Array.isArray(object.packages))
                                throw TypeError(".replit.goval.api.NixPackageSearchResponse.packages: array expected");
                            message.packages = [];
                            for (var i = 0; i < object.packages.length; ++i) {
                                if (typeof object.packages[i] !== "object")
                                    throw TypeError(".replit.goval.api.NixPackageSearchResponse.packages: object expected");
                                message.packages[i] = $root.replit.goval.api.NixPackage.fromObject(object.packages[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixPackageSearchResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @static
                     * @param {replit.goval.api.NixPackageSearchResponse} message NixPackageSearchResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixPackageSearchResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.packages = [];
                        if (message.packages && message.packages.length) {
                            object.packages = [];
                            for (var j = 0; j < message.packages.length; ++j)
                                object.packages[j] = $root.replit.goval.api.NixPackage.toObject(message.packages[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NixPackageSearchResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixPackageSearchResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixPackageSearchResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixPackageSearchResponse;
                })();
    
                api.StartLSP = (function() {
    
                    /**
                     * Properties of a StartLSP.
                     * @memberof replit.goval.api
                     * @interface IStartLSP
                     * @property {string|null} [language] StartLSP language
                     */
    
                    /**
                     * Constructs a new StartLSP.
                     * @memberof replit.goval.api
                     * @classdesc Represents a StartLSP.
                     * @constructor
                     * @param {replit.goval.api.IStartLSP=} [properties] Properties to set
                     */
                    function StartLSP(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StartLSP language.
                     * @member {string} language
                     * @memberof replit.goval.api.StartLSP
                     * @instance
                     */
                    StartLSP.prototype.language = "";
    
                    /**
                     * Creates a new StartLSP instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {replit.goval.api.IStartLSP=} [properties] Properties to set
                     * @returns {replit.goval.api.StartLSP} StartLSP instance
                     */
                    StartLSP.create = function create(properties) {
                        return StartLSP.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified StartLSP message. Does not implicitly {@link replit.goval.api.StartLSP.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {replit.goval.api.StartLSP} message StartLSP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StartLSP.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.language);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StartLSP message, length delimited. Does not implicitly {@link replit.goval.api.StartLSP.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {replit.goval.api.StartLSP} message StartLSP message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StartLSP.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StartLSP message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.StartLSP} StartLSP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StartLSP.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.StartLSP();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.language = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StartLSP message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.StartLSP} StartLSP
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StartLSP.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StartLSP message.
                     * @function verify
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StartLSP.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.language != null && message.hasOwnProperty("language"))
                            if (!$util.isString(message.language))
                                return "language: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a StartLSP message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.StartLSP} StartLSP
                     */
                    StartLSP.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.StartLSP)
                            return object;
                        var message = new $root.replit.goval.api.StartLSP();
                        if (object.language != null)
                            message.language = String(object.language);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StartLSP message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.StartLSP
                     * @static
                     * @param {replit.goval.api.StartLSP} message StartLSP
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StartLSP.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.language = "";
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = message.language;
                        return object;
                    };
    
                    /**
                     * Converts this StartLSP to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.StartLSP
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StartLSP.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StartLSP;
                })();
    
                api.Audio = (function() {
    
                    /**
                     * Properties of an Audio.
                     * @memberof replit.goval.api
                     * @interface IAudio
                     * @property {Array.<number>|null} [data] Audio data
                     */
    
                    /**
                     * Constructs a new Audio.
                     * @memberof replit.goval.api
                     * @classdesc Represents an Audio.
                     * @constructor
                     * @param {replit.goval.api.IAudio=} [properties] Properties to set
                     */
                    function Audio(properties) {
                        this.data = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Audio data.
                     * @member {Array.<number>} data
                     * @memberof replit.goval.api.Audio
                     * @instance
                     */
                    Audio.prototype.data = $util.emptyArray;
    
                    /**
                     * Creates a new Audio instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {replit.goval.api.IAudio=} [properties] Properties to set
                     * @returns {replit.goval.api.Audio} Audio instance
                     */
                    Audio.create = function create(properties) {
                        return Audio.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Audio message. Does not implicitly {@link replit.goval.api.Audio.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {replit.goval.api.Audio} message Audio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Audio.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.data != null && message.data.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.data.length; ++i)
                                writer.int32(message.data[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Audio message, length delimited. Does not implicitly {@link replit.goval.api.Audio.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {replit.goval.api.Audio} message Audio message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Audio.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Audio message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Audio} Audio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Audio.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Audio();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.data && message.data.length))
                                    message.data = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.data.push(reader.int32());
                                } else
                                    message.data.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Audio message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Audio} Audio
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Audio.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Audio message.
                     * @function verify
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Audio.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.data != null && message.hasOwnProperty("data")) {
                            if (!Array.isArray(message.data))
                                return "data: array expected";
                            for (var i = 0; i < message.data.length; ++i)
                                if (!$util.isInteger(message.data[i]))
                                    return "data: integer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Audio message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Audio} Audio
                     */
                    Audio.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Audio)
                            return object;
                        var message = new $root.replit.goval.api.Audio();
                        if (object.data) {
                            if (!Array.isArray(object.data))
                                throw TypeError(".replit.goval.api.Audio.data: array expected");
                            message.data = [];
                            for (var i = 0; i < object.data.length; ++i)
                                message.data[i] = object.data[i] | 0;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Audio message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Audio
                     * @static
                     * @param {replit.goval.api.Audio} message Audio
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Audio.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.data = [];
                        if (message.data && message.data.length) {
                            object.data = [];
                            for (var j = 0; j < message.data.length; ++j)
                                object.data[j] = message.data[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Audio to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Audio
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Audio.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Audio;
                })();
    
                api.Audio2 = (function() {
    
                    /**
                     * Properties of an Audio2.
                     * @memberof replit.goval.api
                     * @interface IAudio2
                     * @property {Array.<number>|null} [data] Audio2 data
                     * @property {number|null} [samples] Audio2 samples
                     */
    
                    /**
                     * Constructs a new Audio2.
                     * @memberof replit.goval.api
                     * @classdesc Represents an Audio2.
                     * @constructor
                     * @param {replit.goval.api.IAudio2=} [properties] Properties to set
                     */
                    function Audio2(properties) {
                        this.data = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Audio2 data.
                     * @member {Array.<number>} data
                     * @memberof replit.goval.api.Audio2
                     * @instance
                     */
                    Audio2.prototype.data = $util.emptyArray;
    
                    /**
                     * Audio2 samples.
                     * @member {number} samples
                     * @memberof replit.goval.api.Audio2
                     * @instance
                     */
                    Audio2.prototype.samples = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new Audio2 instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {replit.goval.api.IAudio2=} [properties] Properties to set
                     * @returns {replit.goval.api.Audio2} Audio2 instance
                     */
                    Audio2.create = function create(properties) {
                        return Audio2.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Audio2 message. Does not implicitly {@link replit.goval.api.Audio2.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {replit.goval.api.Audio2} message Audio2 message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Audio2.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.data != null && message.data.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.data.length; ++i)
                                writer.sint32(message.data[i]);
                            writer.ldelim();
                        }
                        if (message.samples != null && Object.hasOwnProperty.call(message, "samples"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.samples);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Audio2 message, length delimited. Does not implicitly {@link replit.goval.api.Audio2.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {replit.goval.api.Audio2} message Audio2 message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Audio2.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Audio2 message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Audio2} Audio2
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Audio2.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Audio2();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.data && message.data.length))
                                    message.data = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.data.push(reader.sint32());
                                } else
                                    message.data.push(reader.sint32());
                                break;
                            case 2:
                                message.samples = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Audio2 message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Audio2} Audio2
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Audio2.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Audio2 message.
                     * @function verify
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Audio2.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.data != null && message.hasOwnProperty("data")) {
                            if (!Array.isArray(message.data))
                                return "data: array expected";
                            for (var i = 0; i < message.data.length; ++i)
                                if (!$util.isInteger(message.data[i]))
                                    return "data: integer[] expected";
                        }
                        if (message.samples != null && message.hasOwnProperty("samples"))
                            if (!$util.isInteger(message.samples) && !(message.samples && $util.isInteger(message.samples.low) && $util.isInteger(message.samples.high)))
                                return "samples: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates an Audio2 message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Audio2} Audio2
                     */
                    Audio2.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Audio2)
                            return object;
                        var message = new $root.replit.goval.api.Audio2();
                        if (object.data) {
                            if (!Array.isArray(object.data))
                                throw TypeError(".replit.goval.api.Audio2.data: array expected");
                            message.data = [];
                            for (var i = 0; i < object.data.length; ++i)
                                message.data[i] = object.data[i] | 0;
                        }
                        if (object.samples != null)
                            if ($util.Long)
                                (message.samples = $util.Long.fromValue(object.samples)).unsigned = false;
                            else if (typeof object.samples === "string")
                                message.samples = parseInt(object.samples, 10);
                            else if (typeof object.samples === "number")
                                message.samples = object.samples;
                            else if (typeof object.samples === "object")
                                message.samples = new $util.LongBits(object.samples.low >>> 0, object.samples.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Audio2 message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Audio2
                     * @static
                     * @param {replit.goval.api.Audio2} message Audio2
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Audio2.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.data = [];
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.samples = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.samples = options.longs === String ? "0" : 0;
                        if (message.data && message.data.length) {
                            object.data = [];
                            for (var j = 0; j < message.data.length; ++j)
                                object.data[j] = message.data[j];
                        }
                        if (message.samples != null && message.hasOwnProperty("samples"))
                            if (typeof message.samples === "number")
                                object.samples = options.longs === String ? String(message.samples) : message.samples;
                            else
                                object.samples = options.longs === String ? $util.Long.prototype.toString.call(message.samples) : options.longs === Number ? new $util.LongBits(message.samples.low >>> 0, message.samples.high >>> 0).toNumber() : message.samples;
                        return object;
                    };
    
                    /**
                     * Converts this Audio2 to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Audio2
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Audio2.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Audio2;
                })();
    
                api.Preconditions = (function() {
    
                    /**
                     * Properties of a Preconditions.
                     * @memberof replit.goval.api
                     * @interface IPreconditions
                     * @property {number|null} [generation] Preconditions generation
                     * @property {number|null} [metageneration] Preconditions metageneration
                     * @property {boolean|null} [doesNotExist] Preconditions doesNotExist
                     */
    
                    /**
                     * Constructs a new Preconditions.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Preconditions.
                     * @constructor
                     * @param {replit.goval.api.IPreconditions=} [properties] Properties to set
                     */
                    function Preconditions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Preconditions generation.
                     * @member {number} generation
                     * @memberof replit.goval.api.Preconditions
                     * @instance
                     */
                    Preconditions.prototype.generation = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Preconditions metageneration.
                     * @member {number} metageneration
                     * @memberof replit.goval.api.Preconditions
                     * @instance
                     */
                    Preconditions.prototype.metageneration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Preconditions doesNotExist.
                     * @member {boolean} doesNotExist
                     * @memberof replit.goval.api.Preconditions
                     * @instance
                     */
                    Preconditions.prototype.doesNotExist = false;
    
                    /**
                     * Creates a new Preconditions instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {replit.goval.api.IPreconditions=} [properties] Properties to set
                     * @returns {replit.goval.api.Preconditions} Preconditions instance
                     */
                    Preconditions.create = function create(properties) {
                        return Preconditions.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Preconditions message. Does not implicitly {@link replit.goval.api.Preconditions.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {replit.goval.api.Preconditions} message Preconditions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Preconditions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.generation != null && Object.hasOwnProperty.call(message, "generation"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.generation);
                        if (message.metageneration != null && Object.hasOwnProperty.call(message, "metageneration"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.metageneration);
                        if (message.doesNotExist != null && Object.hasOwnProperty.call(message, "doesNotExist"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.doesNotExist);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Preconditions message, length delimited. Does not implicitly {@link replit.goval.api.Preconditions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {replit.goval.api.Preconditions} message Preconditions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Preconditions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Preconditions message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Preconditions} Preconditions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Preconditions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Preconditions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.generation = reader.int64();
                                break;
                            case 2:
                                message.metageneration = reader.int64();
                                break;
                            case 3:
                                message.doesNotExist = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Preconditions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Preconditions} Preconditions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Preconditions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Preconditions message.
                     * @function verify
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Preconditions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (!$util.isInteger(message.generation) && !(message.generation && $util.isInteger(message.generation.low) && $util.isInteger(message.generation.high)))
                                return "generation: integer|Long expected";
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (!$util.isInteger(message.metageneration) && !(message.metageneration && $util.isInteger(message.metageneration.low) && $util.isInteger(message.metageneration.high)))
                                return "metageneration: integer|Long expected";
                        if (message.doesNotExist != null && message.hasOwnProperty("doesNotExist"))
                            if (typeof message.doesNotExist !== "boolean")
                                return "doesNotExist: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Preconditions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Preconditions} Preconditions
                     */
                    Preconditions.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Preconditions)
                            return object;
                        var message = new $root.replit.goval.api.Preconditions();
                        if (object.generation != null)
                            if ($util.Long)
                                (message.generation = $util.Long.fromValue(object.generation)).unsigned = false;
                            else if (typeof object.generation === "string")
                                message.generation = parseInt(object.generation, 10);
                            else if (typeof object.generation === "number")
                                message.generation = object.generation;
                            else if (typeof object.generation === "object")
                                message.generation = new $util.LongBits(object.generation.low >>> 0, object.generation.high >>> 0).toNumber();
                        if (object.metageneration != null)
                            if ($util.Long)
                                (message.metageneration = $util.Long.fromValue(object.metageneration)).unsigned = false;
                            else if (typeof object.metageneration === "string")
                                message.metageneration = parseInt(object.metageneration, 10);
                            else if (typeof object.metageneration === "number")
                                message.metageneration = object.metageneration;
                            else if (typeof object.metageneration === "object")
                                message.metageneration = new $util.LongBits(object.metageneration.low >>> 0, object.metageneration.high >>> 0).toNumber();
                        if (object.doesNotExist != null)
                            message.doesNotExist = Boolean(object.doesNotExist);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Preconditions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Preconditions
                     * @static
                     * @param {replit.goval.api.Preconditions} message Preconditions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Preconditions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.generation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.generation = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.metageneration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.metageneration = options.longs === String ? "0" : 0;
                            object.doesNotExist = false;
                        }
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (typeof message.generation === "number")
                                object.generation = options.longs === String ? String(message.generation) : message.generation;
                            else
                                object.generation = options.longs === String ? $util.Long.prototype.toString.call(message.generation) : options.longs === Number ? new $util.LongBits(message.generation.low >>> 0, message.generation.high >>> 0).toNumber() : message.generation;
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (typeof message.metageneration === "number")
                                object.metageneration = options.longs === String ? String(message.metageneration) : message.metageneration;
                            else
                                object.metageneration = options.longs === String ? $util.Long.prototype.toString.call(message.metageneration) : options.longs === Number ? new $util.LongBits(message.metageneration.low >>> 0, message.metageneration.high >>> 0).toNumber() : message.metageneration;
                        if (message.doesNotExist != null && message.hasOwnProperty("doesNotExist"))
                            object.doesNotExist = message.doesNotExist;
                        return object;
                    };
    
                    /**
                     * Converts this Preconditions to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Preconditions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Preconditions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Preconditions;
                })();
    
                api.ReadMetaRequest = (function() {
    
                    /**
                     * Properties of a ReadMetaRequest.
                     * @memberof replit.goval.api
                     * @interface IReadMetaRequest
                     * @property {string|null} [key] ReadMetaRequest key
                     * @property {boolean|null} [exists] ReadMetaRequest exists
                     * @property {Uint8Array|null} [data] ReadMetaRequest data
                     */
    
                    /**
                     * Constructs a new ReadMetaRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReadMetaRequest.
                     * @constructor
                     * @param {replit.goval.api.IReadMetaRequest=} [properties] Properties to set
                     */
                    function ReadMetaRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadMetaRequest key.
                     * @member {string} key
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @instance
                     */
                    ReadMetaRequest.prototype.key = "";
    
                    /**
                     * ReadMetaRequest exists.
                     * @member {boolean} exists
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @instance
                     */
                    ReadMetaRequest.prototype.exists = false;
    
                    /**
                     * ReadMetaRequest data.
                     * @member {Uint8Array} data
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @instance
                     */
                    ReadMetaRequest.prototype.data = $util.newBuffer([]);
    
                    /**
                     * Creates a new ReadMetaRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {replit.goval.api.IReadMetaRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.ReadMetaRequest} ReadMetaRequest instance
                     */
                    ReadMetaRequest.create = function create(properties) {
                        return ReadMetaRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReadMetaRequest message. Does not implicitly {@link replit.goval.api.ReadMetaRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {replit.goval.api.ReadMetaRequest} message ReadMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadMetaRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                        if (message.exists != null && Object.hasOwnProperty.call(message, "exists"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.exists);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadMetaRequest message, length delimited. Does not implicitly {@link replit.goval.api.ReadMetaRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {replit.goval.api.ReadMetaRequest} message ReadMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadMetaRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadMetaRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReadMetaRequest} ReadMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadMetaRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReadMetaRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.string();
                                break;
                            case 2:
                                message.exists = reader.bool();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadMetaRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReadMetaRequest} ReadMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadMetaRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadMetaRequest message.
                     * @function verify
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadMetaRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!$util.isString(message.key))
                                return "key: string expected";
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            if (typeof message.exists !== "boolean")
                                return "exists: boolean expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadMetaRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReadMetaRequest} ReadMetaRequest
                     */
                    ReadMetaRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReadMetaRequest)
                            return object;
                        var message = new $root.replit.goval.api.ReadMetaRequest();
                        if (object.key != null)
                            message.key = String(object.key);
                        if (object.exists != null)
                            message.exists = Boolean(object.exists);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadMetaRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @static
                     * @param {replit.goval.api.ReadMetaRequest} message ReadMetaRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadMetaRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.key = "";
                            object.exists = false;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = message.key;
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            object.exists = message.exists;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };
    
                    /**
                     * Converts this ReadMetaRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReadMetaRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadMetaRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadMetaRequest;
                })();
    
                api.ReadMetaResponse = (function() {
    
                    /**
                     * Properties of a ReadMetaResponse.
                     * @memberof replit.goval.api
                     * @interface IReadMetaResponse
                     * @property {string|null} [key] ReadMetaResponse key
                     * @property {boolean|null} [exists] ReadMetaResponse exists
                     * @property {Uint8Array|null} [data] ReadMetaResponse data
                     * @property {number|null} [generation] ReadMetaResponse generation
                     * @property {number|null} [metageneration] ReadMetaResponse metageneration
                     */
    
                    /**
                     * Constructs a new ReadMetaResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReadMetaResponse.
                     * @constructor
                     * @param {replit.goval.api.IReadMetaResponse=} [properties] Properties to set
                     */
                    function ReadMetaResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReadMetaResponse key.
                     * @member {string} key
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     */
                    ReadMetaResponse.prototype.key = "";
    
                    /**
                     * ReadMetaResponse exists.
                     * @member {boolean} exists
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     */
                    ReadMetaResponse.prototype.exists = false;
    
                    /**
                     * ReadMetaResponse data.
                     * @member {Uint8Array} data
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     */
                    ReadMetaResponse.prototype.data = $util.newBuffer([]);
    
                    /**
                     * ReadMetaResponse generation.
                     * @member {number} generation
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     */
                    ReadMetaResponse.prototype.generation = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * ReadMetaResponse metageneration.
                     * @member {number} metageneration
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     */
                    ReadMetaResponse.prototype.metageneration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new ReadMetaResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {replit.goval.api.IReadMetaResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.ReadMetaResponse} ReadMetaResponse instance
                     */
                    ReadMetaResponse.create = function create(properties) {
                        return ReadMetaResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReadMetaResponse message. Does not implicitly {@link replit.goval.api.ReadMetaResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {replit.goval.api.ReadMetaResponse} message ReadMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadMetaResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                        if (message.exists != null && Object.hasOwnProperty.call(message, "exists"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.exists);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        if (message.generation != null && Object.hasOwnProperty.call(message, "generation"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.generation);
                        if (message.metageneration != null && Object.hasOwnProperty.call(message, "metageneration"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.metageneration);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadMetaResponse message, length delimited. Does not implicitly {@link replit.goval.api.ReadMetaResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {replit.goval.api.ReadMetaResponse} message ReadMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadMetaResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadMetaResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReadMetaResponse} ReadMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadMetaResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReadMetaResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.string();
                                break;
                            case 2:
                                message.exists = reader.bool();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            case 4:
                                message.generation = reader.int64();
                                break;
                            case 5:
                                message.metageneration = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadMetaResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReadMetaResponse} ReadMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadMetaResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadMetaResponse message.
                     * @function verify
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadMetaResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!$util.isString(message.key))
                                return "key: string expected";
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            if (typeof message.exists !== "boolean")
                                return "exists: boolean expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (!$util.isInteger(message.generation) && !(message.generation && $util.isInteger(message.generation.low) && $util.isInteger(message.generation.high)))
                                return "generation: integer|Long expected";
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (!$util.isInteger(message.metageneration) && !(message.metageneration && $util.isInteger(message.metageneration.low) && $util.isInteger(message.metageneration.high)))
                                return "metageneration: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadMetaResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReadMetaResponse} ReadMetaResponse
                     */
                    ReadMetaResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReadMetaResponse)
                            return object;
                        var message = new $root.replit.goval.api.ReadMetaResponse();
                        if (object.key != null)
                            message.key = String(object.key);
                        if (object.exists != null)
                            message.exists = Boolean(object.exists);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.generation != null)
                            if ($util.Long)
                                (message.generation = $util.Long.fromValue(object.generation)).unsigned = false;
                            else if (typeof object.generation === "string")
                                message.generation = parseInt(object.generation, 10);
                            else if (typeof object.generation === "number")
                                message.generation = object.generation;
                            else if (typeof object.generation === "object")
                                message.generation = new $util.LongBits(object.generation.low >>> 0, object.generation.high >>> 0).toNumber();
                        if (object.metageneration != null)
                            if ($util.Long)
                                (message.metageneration = $util.Long.fromValue(object.metageneration)).unsigned = false;
                            else if (typeof object.metageneration === "string")
                                message.metageneration = parseInt(object.metageneration, 10);
                            else if (typeof object.metageneration === "number")
                                message.metageneration = object.metageneration;
                            else if (typeof object.metageneration === "object")
                                message.metageneration = new $util.LongBits(object.metageneration.low >>> 0, object.metageneration.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReadMetaResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @static
                     * @param {replit.goval.api.ReadMetaResponse} message ReadMetaResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadMetaResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.key = "";
                            object.exists = false;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.generation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.generation = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.metageneration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.metageneration = options.longs === String ? "0" : 0;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = message.key;
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            object.exists = message.exists;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (typeof message.generation === "number")
                                object.generation = options.longs === String ? String(message.generation) : message.generation;
                            else
                                object.generation = options.longs === String ? $util.Long.prototype.toString.call(message.generation) : options.longs === Number ? new $util.LongBits(message.generation.low >>> 0, message.generation.high >>> 0).toNumber() : message.generation;
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (typeof message.metageneration === "number")
                                object.metageneration = options.longs === String ? String(message.metageneration) : message.metageneration;
                            else
                                object.metageneration = options.longs === String ? $util.Long.prototype.toString.call(message.metageneration) : options.longs === Number ? new $util.LongBits(message.metageneration.low >>> 0, message.metageneration.high >>> 0).toNumber() : message.metageneration;
                        return object;
                    };
    
                    /**
                     * Converts this ReadMetaResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReadMetaResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadMetaResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadMetaResponse;
                })();
    
                api.WriteMetaRequest = (function() {
    
                    /**
                     * Properties of a WriteMetaRequest.
                     * @memberof replit.goval.api
                     * @interface IWriteMetaRequest
                     * @property {string|null} [key] WriteMetaRequest key
                     * @property {Uint8Array|null} [data] WriteMetaRequest data
                     * @property {replit.goval.api.Preconditions|replit.goval.api.IPreconditions|null} [preconditions] WriteMetaRequest preconditions
                     */
    
                    /**
                     * Constructs a new WriteMetaRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a WriteMetaRequest.
                     * @constructor
                     * @param {replit.goval.api.IWriteMetaRequest=} [properties] Properties to set
                     */
                    function WriteMetaRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WriteMetaRequest key.
                     * @member {string} key
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @instance
                     */
                    WriteMetaRequest.prototype.key = "";
    
                    /**
                     * WriteMetaRequest data.
                     * @member {Uint8Array} data
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @instance
                     */
                    WriteMetaRequest.prototype.data = $util.newBuffer([]);
    
                    /**
                     * WriteMetaRequest preconditions.
                     * @member {replit.goval.api.Preconditions|null|undefined} preconditions
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @instance
                     */
                    WriteMetaRequest.prototype.preconditions = null;
    
                    /**
                     * Creates a new WriteMetaRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {replit.goval.api.IWriteMetaRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.WriteMetaRequest} WriteMetaRequest instance
                     */
                    WriteMetaRequest.create = function create(properties) {
                        return WriteMetaRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified WriteMetaRequest message. Does not implicitly {@link replit.goval.api.WriteMetaRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {replit.goval.api.WriteMetaRequest} message WriteMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WriteMetaRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                        if (message.preconditions != null && Object.hasOwnProperty.call(message, "preconditions"))
                            $root.replit.goval.api.Preconditions.encode(message.preconditions, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WriteMetaRequest message, length delimited. Does not implicitly {@link replit.goval.api.WriteMetaRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {replit.goval.api.WriteMetaRequest} message WriteMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WriteMetaRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WriteMetaRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.WriteMetaRequest} WriteMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WriteMetaRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.WriteMetaRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.string();
                                break;
                            case 2:
                                message.data = reader.bytes();
                                break;
                            case 5:
                                message.preconditions = $root.replit.goval.api.Preconditions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WriteMetaRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.WriteMetaRequest} WriteMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WriteMetaRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WriteMetaRequest message.
                     * @function verify
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WriteMetaRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!$util.isString(message.key))
                                return "key: string expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.preconditions != null && message.hasOwnProperty("preconditions")) {
                            var error = $root.replit.goval.api.Preconditions.verify(message.preconditions);
                            if (error)
                                return "preconditions." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a WriteMetaRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.WriteMetaRequest} WriteMetaRequest
                     */
                    WriteMetaRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.WriteMetaRequest)
                            return object;
                        var message = new $root.replit.goval.api.WriteMetaRequest();
                        if (object.key != null)
                            message.key = String(object.key);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.preconditions != null) {
                            if (typeof object.preconditions !== "object")
                                throw TypeError(".replit.goval.api.WriteMetaRequest.preconditions: object expected");
                            message.preconditions = $root.replit.goval.api.Preconditions.fromObject(object.preconditions);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WriteMetaRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @static
                     * @param {replit.goval.api.WriteMetaRequest} message WriteMetaRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WriteMetaRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.key = "";
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            object.preconditions = null;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = message.key;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.preconditions != null && message.hasOwnProperty("preconditions"))
                            object.preconditions = $root.replit.goval.api.Preconditions.toObject(message.preconditions, options);
                        return object;
                    };
    
                    /**
                     * Converts this WriteMetaRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.WriteMetaRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WriteMetaRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return WriteMetaRequest;
                })();
    
                api.WriteMetaResponse = (function() {
    
                    /**
                     * Properties of a WriteMetaResponse.
                     * @memberof replit.goval.api
                     * @interface IWriteMetaResponse
                     * @property {number|null} [generation] WriteMetaResponse generation
                     * @property {number|null} [metageneration] WriteMetaResponse metageneration
                     */
    
                    /**
                     * Constructs a new WriteMetaResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a WriteMetaResponse.
                     * @constructor
                     * @param {replit.goval.api.IWriteMetaResponse=} [properties] Properties to set
                     */
                    function WriteMetaResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WriteMetaResponse generation.
                     * @member {number} generation
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @instance
                     */
                    WriteMetaResponse.prototype.generation = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * WriteMetaResponse metageneration.
                     * @member {number} metageneration
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @instance
                     */
                    WriteMetaResponse.prototype.metageneration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new WriteMetaResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {replit.goval.api.IWriteMetaResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.WriteMetaResponse} WriteMetaResponse instance
                     */
                    WriteMetaResponse.create = function create(properties) {
                        return WriteMetaResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified WriteMetaResponse message. Does not implicitly {@link replit.goval.api.WriteMetaResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {replit.goval.api.WriteMetaResponse} message WriteMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WriteMetaResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.generation != null && Object.hasOwnProperty.call(message, "generation"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.generation);
                        if (message.metageneration != null && Object.hasOwnProperty.call(message, "metageneration"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.metageneration);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WriteMetaResponse message, length delimited. Does not implicitly {@link replit.goval.api.WriteMetaResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {replit.goval.api.WriteMetaResponse} message WriteMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WriteMetaResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WriteMetaResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.WriteMetaResponse} WriteMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WriteMetaResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.WriteMetaResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.generation = reader.int64();
                                break;
                            case 2:
                                message.metageneration = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WriteMetaResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.WriteMetaResponse} WriteMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WriteMetaResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WriteMetaResponse message.
                     * @function verify
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WriteMetaResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (!$util.isInteger(message.generation) && !(message.generation && $util.isInteger(message.generation.low) && $util.isInteger(message.generation.high)))
                                return "generation: integer|Long expected";
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (!$util.isInteger(message.metageneration) && !(message.metageneration && $util.isInteger(message.metageneration.low) && $util.isInteger(message.metageneration.high)))
                                return "metageneration: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a WriteMetaResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.WriteMetaResponse} WriteMetaResponse
                     */
                    WriteMetaResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.WriteMetaResponse)
                            return object;
                        var message = new $root.replit.goval.api.WriteMetaResponse();
                        if (object.generation != null)
                            if ($util.Long)
                                (message.generation = $util.Long.fromValue(object.generation)).unsigned = false;
                            else if (typeof object.generation === "string")
                                message.generation = parseInt(object.generation, 10);
                            else if (typeof object.generation === "number")
                                message.generation = object.generation;
                            else if (typeof object.generation === "object")
                                message.generation = new $util.LongBits(object.generation.low >>> 0, object.generation.high >>> 0).toNumber();
                        if (object.metageneration != null)
                            if ($util.Long)
                                (message.metageneration = $util.Long.fromValue(object.metageneration)).unsigned = false;
                            else if (typeof object.metageneration === "string")
                                message.metageneration = parseInt(object.metageneration, 10);
                            else if (typeof object.metageneration === "number")
                                message.metageneration = object.metageneration;
                            else if (typeof object.metageneration === "object")
                                message.metageneration = new $util.LongBits(object.metageneration.low >>> 0, object.metageneration.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WriteMetaResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @static
                     * @param {replit.goval.api.WriteMetaResponse} message WriteMetaResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WriteMetaResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.generation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.generation = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.metageneration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.metageneration = options.longs === String ? "0" : 0;
                        }
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (typeof message.generation === "number")
                                object.generation = options.longs === String ? String(message.generation) : message.generation;
                            else
                                object.generation = options.longs === String ? $util.Long.prototype.toString.call(message.generation) : options.longs === Number ? new $util.LongBits(message.generation.low >>> 0, message.generation.high >>> 0).toNumber() : message.generation;
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (typeof message.metageneration === "number")
                                object.metageneration = options.longs === String ? String(message.metageneration) : message.metageneration;
                            else
                                object.metageneration = options.longs === String ? $util.Long.prototype.toString.call(message.metageneration) : options.longs === Number ? new $util.LongBits(message.metageneration.low >>> 0, message.metageneration.high >>> 0).toNumber() : message.metageneration;
                        return object;
                    };
    
                    /**
                     * Converts this WriteMetaResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.WriteMetaResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WriteMetaResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return WriteMetaResponse;
                })();
    
                api.AppendMetaRequest = (function() {
    
                    /**
                     * Properties of an AppendMetaRequest.
                     * @memberof replit.goval.api
                     * @interface IAppendMetaRequest
                     * @property {string|null} [key] AppendMetaRequest key
                     * @property {Uint8Array|null} [data] AppendMetaRequest data
                     * @property {replit.goval.api.Preconditions|replit.goval.api.IPreconditions|null} [preconditions] AppendMetaRequest preconditions
                     */
    
                    /**
                     * Constructs a new AppendMetaRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents an AppendMetaRequest.
                     * @constructor
                     * @param {replit.goval.api.IAppendMetaRequest=} [properties] Properties to set
                     */
                    function AppendMetaRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AppendMetaRequest key.
                     * @member {string} key
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @instance
                     */
                    AppendMetaRequest.prototype.key = "";
    
                    /**
                     * AppendMetaRequest data.
                     * @member {Uint8Array} data
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @instance
                     */
                    AppendMetaRequest.prototype.data = $util.newBuffer([]);
    
                    /**
                     * AppendMetaRequest preconditions.
                     * @member {replit.goval.api.Preconditions|null|undefined} preconditions
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @instance
                     */
                    AppendMetaRequest.prototype.preconditions = null;
    
                    /**
                     * Creates a new AppendMetaRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {replit.goval.api.IAppendMetaRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.AppendMetaRequest} AppendMetaRequest instance
                     */
                    AppendMetaRequest.create = function create(properties) {
                        return AppendMetaRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified AppendMetaRequest message. Does not implicitly {@link replit.goval.api.AppendMetaRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {replit.goval.api.AppendMetaRequest} message AppendMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AppendMetaRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                        if (message.preconditions != null && Object.hasOwnProperty.call(message, "preconditions"))
                            $root.replit.goval.api.Preconditions.encode(message.preconditions, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AppendMetaRequest message, length delimited. Does not implicitly {@link replit.goval.api.AppendMetaRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {replit.goval.api.AppendMetaRequest} message AppendMetaRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AppendMetaRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AppendMetaRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.AppendMetaRequest} AppendMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AppendMetaRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.AppendMetaRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.string();
                                break;
                            case 2:
                                message.data = reader.bytes();
                                break;
                            case 5:
                                message.preconditions = $root.replit.goval.api.Preconditions.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AppendMetaRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.AppendMetaRequest} AppendMetaRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AppendMetaRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AppendMetaRequest message.
                     * @function verify
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AppendMetaRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!$util.isString(message.key))
                                return "key: string expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.preconditions != null && message.hasOwnProperty("preconditions")) {
                            var error = $root.replit.goval.api.Preconditions.verify(message.preconditions);
                            if (error)
                                return "preconditions." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AppendMetaRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.AppendMetaRequest} AppendMetaRequest
                     */
                    AppendMetaRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.AppendMetaRequest)
                            return object;
                        var message = new $root.replit.goval.api.AppendMetaRequest();
                        if (object.key != null)
                            message.key = String(object.key);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.preconditions != null) {
                            if (typeof object.preconditions !== "object")
                                throw TypeError(".replit.goval.api.AppendMetaRequest.preconditions: object expected");
                            message.preconditions = $root.replit.goval.api.Preconditions.fromObject(object.preconditions);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AppendMetaRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @static
                     * @param {replit.goval.api.AppendMetaRequest} message AppendMetaRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AppendMetaRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.key = "";
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            object.preconditions = null;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = message.key;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.preconditions != null && message.hasOwnProperty("preconditions"))
                            object.preconditions = $root.replit.goval.api.Preconditions.toObject(message.preconditions, options);
                        return object;
                    };
    
                    /**
                     * Converts this AppendMetaRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.AppendMetaRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AppendMetaRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AppendMetaRequest;
                })();
    
                api.AppendMetaResponse = (function() {
    
                    /**
                     * Properties of an AppendMetaResponse.
                     * @memberof replit.goval.api
                     * @interface IAppendMetaResponse
                     * @property {number|null} [generation] AppendMetaResponse generation
                     * @property {number|null} [metageneration] AppendMetaResponse metageneration
                     */
    
                    /**
                     * Constructs a new AppendMetaResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents an AppendMetaResponse.
                     * @constructor
                     * @param {replit.goval.api.IAppendMetaResponse=} [properties] Properties to set
                     */
                    function AppendMetaResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AppendMetaResponse generation.
                     * @member {number} generation
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @instance
                     */
                    AppendMetaResponse.prototype.generation = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * AppendMetaResponse metageneration.
                     * @member {number} metageneration
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @instance
                     */
                    AppendMetaResponse.prototype.metageneration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new AppendMetaResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {replit.goval.api.IAppendMetaResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.AppendMetaResponse} AppendMetaResponse instance
                     */
                    AppendMetaResponse.create = function create(properties) {
                        return AppendMetaResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified AppendMetaResponse message. Does not implicitly {@link replit.goval.api.AppendMetaResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {replit.goval.api.AppendMetaResponse} message AppendMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AppendMetaResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.generation != null && Object.hasOwnProperty.call(message, "generation"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.generation);
                        if (message.metageneration != null && Object.hasOwnProperty.call(message, "metageneration"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.metageneration);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AppendMetaResponse message, length delimited. Does not implicitly {@link replit.goval.api.AppendMetaResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {replit.goval.api.AppendMetaResponse} message AppendMetaResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AppendMetaResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AppendMetaResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.AppendMetaResponse} AppendMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AppendMetaResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.AppendMetaResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.generation = reader.int64();
                                break;
                            case 2:
                                message.metageneration = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AppendMetaResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.AppendMetaResponse} AppendMetaResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AppendMetaResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AppendMetaResponse message.
                     * @function verify
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AppendMetaResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (!$util.isInteger(message.generation) && !(message.generation && $util.isInteger(message.generation.low) && $util.isInteger(message.generation.high)))
                                return "generation: integer|Long expected";
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (!$util.isInteger(message.metageneration) && !(message.metageneration && $util.isInteger(message.metageneration.low) && $util.isInteger(message.metageneration.high)))
                                return "metageneration: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates an AppendMetaResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.AppendMetaResponse} AppendMetaResponse
                     */
                    AppendMetaResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.AppendMetaResponse)
                            return object;
                        var message = new $root.replit.goval.api.AppendMetaResponse();
                        if (object.generation != null)
                            if ($util.Long)
                                (message.generation = $util.Long.fromValue(object.generation)).unsigned = false;
                            else if (typeof object.generation === "string")
                                message.generation = parseInt(object.generation, 10);
                            else if (typeof object.generation === "number")
                                message.generation = object.generation;
                            else if (typeof object.generation === "object")
                                message.generation = new $util.LongBits(object.generation.low >>> 0, object.generation.high >>> 0).toNumber();
                        if (object.metageneration != null)
                            if ($util.Long)
                                (message.metageneration = $util.Long.fromValue(object.metageneration)).unsigned = false;
                            else if (typeof object.metageneration === "string")
                                message.metageneration = parseInt(object.metageneration, 10);
                            else if (typeof object.metageneration === "number")
                                message.metageneration = object.metageneration;
                            else if (typeof object.metageneration === "object")
                                message.metageneration = new $util.LongBits(object.metageneration.low >>> 0, object.metageneration.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AppendMetaResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @static
                     * @param {replit.goval.api.AppendMetaResponse} message AppendMetaResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AppendMetaResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.generation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.generation = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.metageneration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.metageneration = options.longs === String ? "0" : 0;
                        }
                        if (message.generation != null && message.hasOwnProperty("generation"))
                            if (typeof message.generation === "number")
                                object.generation = options.longs === String ? String(message.generation) : message.generation;
                            else
                                object.generation = options.longs === String ? $util.Long.prototype.toString.call(message.generation) : options.longs === Number ? new $util.LongBits(message.generation.low >>> 0, message.generation.high >>> 0).toNumber() : message.generation;
                        if (message.metageneration != null && message.hasOwnProperty("metageneration"))
                            if (typeof message.metageneration === "number")
                                object.metageneration = options.longs === String ? String(message.metageneration) : message.metageneration;
                            else
                                object.metageneration = options.longs === String ? $util.Long.prototype.toString.call(message.metageneration) : options.longs === Number ? new $util.LongBits(message.metageneration.low >>> 0, message.metageneration.high >>> 0).toNumber() : message.metageneration;
                        return object;
                    };
    
                    /**
                     * Converts this AppendMetaResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.AppendMetaResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AppendMetaResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AppendMetaResponse;
                })();
    
                api.BootStatus = (function() {
    
                    /**
                     * Properties of a BootStatus.
                     * @memberof replit.goval.api
                     * @interface IBootStatus
                     * @property {replit.goval.api.BootStatus.Stage|null} [stage] BootStatus stage
                     * @property {number|null} [progress] BootStatus progress
                     * @property {number|null} [total] BootStatus total
                     */
    
                    /**
                     * Constructs a new BootStatus.
                     * @memberof replit.goval.api
                     * @classdesc Represents a BootStatus.
                     * @constructor
                     * @param {replit.goval.api.IBootStatus=} [properties] Properties to set
                     */
                    function BootStatus(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BootStatus stage.
                     * @member {replit.goval.api.BootStatus.Stage} stage
                     * @memberof replit.goval.api.BootStatus
                     * @instance
                     */
                    BootStatus.prototype.stage = 0;
    
                    /**
                     * BootStatus progress.
                     * @member {number} progress
                     * @memberof replit.goval.api.BootStatus
                     * @instance
                     */
                    BootStatus.prototype.progress = 0;
    
                    /**
                     * BootStatus total.
                     * @member {number} total
                     * @memberof replit.goval.api.BootStatus
                     * @instance
                     */
                    BootStatus.prototype.total = 0;
    
                    /**
                     * Creates a new BootStatus instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {replit.goval.api.IBootStatus=} [properties] Properties to set
                     * @returns {replit.goval.api.BootStatus} BootStatus instance
                     */
                    BootStatus.create = function create(properties) {
                        return BootStatus.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified BootStatus message. Does not implicitly {@link replit.goval.api.BootStatus.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {replit.goval.api.BootStatus} message BootStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BootStatus.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.stage != null && Object.hasOwnProperty.call(message, "stage"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stage);
                        if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.progress);
                        if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.total);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BootStatus message, length delimited. Does not implicitly {@link replit.goval.api.BootStatus.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {replit.goval.api.BootStatus} message BootStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BootStatus.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BootStatus message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.BootStatus} BootStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BootStatus.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.BootStatus();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.stage = reader.int32();
                                break;
                            case 2:
                                message.progress = reader.uint32();
                                break;
                            case 3:
                                message.total = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BootStatus message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.BootStatus} BootStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BootStatus.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BootStatus message.
                     * @function verify
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BootStatus.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.stage != null && message.hasOwnProperty("stage"))
                            switch (message.stage) {
                            default:
                                return "stage: enum value expected";
                            case 0:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                                break;
                            }
                        if (message.progress != null && message.hasOwnProperty("progress"))
                            if (!$util.isInteger(message.progress))
                                return "progress: integer expected";
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (!$util.isInteger(message.total))
                                return "total: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a BootStatus message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.BootStatus} BootStatus
                     */
                    BootStatus.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.BootStatus)
                            return object;
                        var message = new $root.replit.goval.api.BootStatus();
                        switch (object.stage) {
                        case "HANDSHAKE":
                        case 0:
                            message.stage = 0;
                            break;
                        case "ACQUIRING":
                        case 3:
                            message.stage = 3;
                            break;
                        case "COMPLETE":
                        case 4:
                            message.stage = 4;
                            break;
                        case "PROXY":
                        case 5:
                            message.stage = 5;
                            break;
                        case "PULL_FILES":
                        case 6:
                            message.stage = 6;
                            break;
                        case "LOAD_BLOCK":
                        case 7:
                            message.stage = 7;
                            break;
                        case "RETRY":
                        case 8:
                            message.stage = 8;
                            break;
                        }
                        if (object.progress != null)
                            message.progress = object.progress >>> 0;
                        if (object.total != null)
                            message.total = object.total >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BootStatus message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.BootStatus
                     * @static
                     * @param {replit.goval.api.BootStatus} message BootStatus
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BootStatus.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.stage = options.enums === String ? "HANDSHAKE" : 0;
                            object.progress = 0;
                            object.total = 0;
                        }
                        if (message.stage != null && message.hasOwnProperty("stage"))
                            object.stage = options.enums === String ? $root.replit.goval.api.BootStatus.Stage[message.stage] : message.stage;
                        if (message.progress != null && message.hasOwnProperty("progress"))
                            object.progress = message.progress;
                        if (message.total != null && message.hasOwnProperty("total"))
                            object.total = message.total;
                        return object;
                    };
    
                    /**
                     * Converts this BootStatus to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.BootStatus
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BootStatus.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Stage enum.
                     * @name replit.goval.api.BootStatus.Stage
                     * @enum {number}
                     * @property {number} HANDSHAKE=0 HANDSHAKE value
                     * @property {number} ACQUIRING=3 ACQUIRING value
                     * @property {number} COMPLETE=4 COMPLETE value
                     * @property {number} PROXY=5 PROXY value
                     * @property {number} PULL_FILES=6 PULL_FILES value
                     * @property {number} LOAD_BLOCK=7 LOAD_BLOCK value
                     * @property {number} RETRY=8 RETRY value
                     */
                    BootStatus.Stage = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "HANDSHAKE"] = 0;
                        values[valuesById[3] = "ACQUIRING"] = 3;
                        values[valuesById[4] = "COMPLETE"] = 4;
                        values[valuesById[5] = "PROXY"] = 5;
                        values[valuesById[6] = "PULL_FILES"] = 6;
                        values[valuesById[7] = "LOAD_BLOCK"] = 7;
                        values[valuesById[8] = "RETRY"] = 8;
                        return values;
                    })();
    
                    return BootStatus;
                })();
    
                api.Pid1Config = (function() {
    
                    /**
                     * Properties of a Pid1Config.
                     * @memberof replit.goval.api
                     * @interface IPid1Config
                     * @property {string|null} [cwd] Pid1Config cwd
                     * @property {string|null} [language] Pid1Config language
                     * @property {Object.<string,string>|null} [env] Pid1Config env
                     * @property {boolean|null} [noStore] Pid1Config noStore
                     * @property {boolean|null} [noninteractiveFSChange] Pid1Config noninteractiveFSChange
                     */
    
                    /**
                     * Constructs a new Pid1Config.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Pid1Config.
                     * @constructor
                     * @param {replit.goval.api.IPid1Config=} [properties] Properties to set
                     */
                    function Pid1Config(properties) {
                        this.env = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Pid1Config cwd.
                     * @member {string} cwd
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     */
                    Pid1Config.prototype.cwd = "";
    
                    /**
                     * Pid1Config language.
                     * @member {string} language
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     */
                    Pid1Config.prototype.language = "";
    
                    /**
                     * Pid1Config env.
                     * @member {Object.<string,string>} env
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     */
                    Pid1Config.prototype.env = $util.emptyObject;
    
                    /**
                     * Pid1Config noStore.
                     * @member {boolean} noStore
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     */
                    Pid1Config.prototype.noStore = false;
    
                    /**
                     * Pid1Config noninteractiveFSChange.
                     * @member {boolean} noninteractiveFSChange
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     */
                    Pid1Config.prototype.noninteractiveFSChange = false;
    
                    /**
                     * Creates a new Pid1Config instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {replit.goval.api.IPid1Config=} [properties] Properties to set
                     * @returns {replit.goval.api.Pid1Config} Pid1Config instance
                     */
                    Pid1Config.create = function create(properties) {
                        return Pid1Config.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Pid1Config message. Does not implicitly {@link replit.goval.api.Pid1Config.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {replit.goval.api.Pid1Config} message Pid1Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pid1Config.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cwd != null && Object.hasOwnProperty.call(message, "cwd"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cwd);
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                        if (message.env != null && Object.hasOwnProperty.call(message, "env"))
                            for (var keys = Object.keys(message.env), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.env[keys[i]]).ldelim();
                        if (message.noStore != null && Object.hasOwnProperty.call(message, "noStore"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.noStore);
                        if (message.noninteractiveFSChange != null && Object.hasOwnProperty.call(message, "noninteractiveFSChange"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.noninteractiveFSChange);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Pid1Config message, length delimited. Does not implicitly {@link replit.goval.api.Pid1Config.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {replit.goval.api.Pid1Config} message Pid1Config message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pid1Config.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Pid1Config message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Pid1Config} Pid1Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pid1Config.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Pid1Config(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.cwd = reader.string();
                                break;
                            case 2:
                                message.language = reader.string();
                                break;
                            case 3:
                                if (message.env === $util.emptyObject)
                                    message.env = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.env[key] = value;
                                break;
                            case 4:
                                message.noStore = reader.bool();
                                break;
                            case 5:
                                message.noninteractiveFSChange = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Pid1Config message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Pid1Config} Pid1Config
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pid1Config.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Pid1Config message.
                     * @function verify
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pid1Config.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cwd != null && message.hasOwnProperty("cwd"))
                            if (!$util.isString(message.cwd))
                                return "cwd: string expected";
                        if (message.language != null && message.hasOwnProperty("language"))
                            if (!$util.isString(message.language))
                                return "language: string expected";
                        if (message.env != null && message.hasOwnProperty("env")) {
                            if (!$util.isObject(message.env))
                                return "env: object expected";
                            var key = Object.keys(message.env);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.env[key[i]]))
                                    return "env: string{k:string} expected";
                        }
                        if (message.noStore != null && message.hasOwnProperty("noStore"))
                            if (typeof message.noStore !== "boolean")
                                return "noStore: boolean expected";
                        if (message.noninteractiveFSChange != null && message.hasOwnProperty("noninteractiveFSChange"))
                            if (typeof message.noninteractiveFSChange !== "boolean")
                                return "noninteractiveFSChange: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Pid1Config message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Pid1Config} Pid1Config
                     */
                    Pid1Config.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Pid1Config)
                            return object;
                        var message = new $root.replit.goval.api.Pid1Config();
                        if (object.cwd != null)
                            message.cwd = String(object.cwd);
                        if (object.language != null)
                            message.language = String(object.language);
                        if (object.env) {
                            if (typeof object.env !== "object")
                                throw TypeError(".replit.goval.api.Pid1Config.env: object expected");
                            message.env = {};
                            for (var keys = Object.keys(object.env), i = 0; i < keys.length; ++i)
                                message.env[keys[i]] = String(object.env[keys[i]]);
                        }
                        if (object.noStore != null)
                            message.noStore = Boolean(object.noStore);
                        if (object.noninteractiveFSChange != null)
                            message.noninteractiveFSChange = Boolean(object.noninteractiveFSChange);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Pid1Config message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Pid1Config
                     * @static
                     * @param {replit.goval.api.Pid1Config} message Pid1Config
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pid1Config.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.env = {};
                        if (options.defaults) {
                            object.cwd = "";
                            object.language = "";
                            object.noStore = false;
                            object.noninteractiveFSChange = false;
                        }
                        if (message.cwd != null && message.hasOwnProperty("cwd"))
                            object.cwd = message.cwd;
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = message.language;
                        var keys2;
                        if (message.env && (keys2 = Object.keys(message.env)).length) {
                            object.env = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.env[keys2[j]] = message.env[keys2[j]];
                        }
                        if (message.noStore != null && message.hasOwnProperty("noStore"))
                            object.noStore = message.noStore;
                        if (message.noninteractiveFSChange != null && message.hasOwnProperty("noninteractiveFSChange"))
                            object.noninteractiveFSChange = message.noninteractiveFSChange;
                        return object;
                    };
    
                    /**
                     * Converts this Pid1Config to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Pid1Config
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pid1Config.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Pid1Config;
                })();
    
                api.FSLock = (function() {
    
                    /**
                     * Properties of a FSLock.
                     * @memberof replit.goval.api
                     * @interface IFSLock
                     * @property {string|null} [name] FSLock name
                     */
    
                    /**
                     * Constructs a new FSLock.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FSLock.
                     * @constructor
                     * @param {replit.goval.api.IFSLock=} [properties] Properties to set
                     */
                    function FSLock(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FSLock name.
                     * @member {string} name
                     * @memberof replit.goval.api.FSLock
                     * @instance
                     */
                    FSLock.prototype.name = "";
    
                    /**
                     * Creates a new FSLock instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {replit.goval.api.IFSLock=} [properties] Properties to set
                     * @returns {replit.goval.api.FSLock} FSLock instance
                     */
                    FSLock.create = function create(properties) {
                        return FSLock.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FSLock message. Does not implicitly {@link replit.goval.api.FSLock.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {replit.goval.api.FSLock} message FSLock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSLock.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FSLock message, length delimited. Does not implicitly {@link replit.goval.api.FSLock.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {replit.goval.api.FSLock} message FSLock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSLock.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FSLock message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FSLock} FSLock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSLock.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FSLock();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FSLock message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FSLock} FSLock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSLock.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FSLock message.
                     * @function verify
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FSLock.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a FSLock message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FSLock} FSLock
                     */
                    FSLock.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FSLock)
                            return object;
                        var message = new $root.replit.goval.api.FSLock();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FSLock message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FSLock
                     * @static
                     * @param {replit.goval.api.FSLock} message FSLock
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FSLock.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };
    
                    /**
                     * Converts this FSLock to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FSLock
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FSLock.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FSLock;
                })();
    
                api.FSSnapshot = (function() {
    
                    /**
                     * Properties of a FSSnapshot.
                     * @memberof replit.goval.api
                     * @interface IFSSnapshot
                     */
    
                    /**
                     * Constructs a new FSSnapshot.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FSSnapshot.
                     * @constructor
                     * @param {replit.goval.api.IFSSnapshot=} [properties] Properties to set
                     */
                    function FSSnapshot(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new FSSnapshot instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {replit.goval.api.IFSSnapshot=} [properties] Properties to set
                     * @returns {replit.goval.api.FSSnapshot} FSSnapshot instance
                     */
                    FSSnapshot.create = function create(properties) {
                        return FSSnapshot.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FSSnapshot message. Does not implicitly {@link replit.goval.api.FSSnapshot.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {replit.goval.api.FSSnapshot} message FSSnapshot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSSnapshot.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FSSnapshot message, length delimited. Does not implicitly {@link replit.goval.api.FSSnapshot.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {replit.goval.api.FSSnapshot} message FSSnapshot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FSSnapshot message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FSSnapshot} FSSnapshot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSSnapshot.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FSSnapshot();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FSSnapshot message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FSSnapshot} FSSnapshot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSSnapshot.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FSSnapshot message.
                     * @function verify
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FSSnapshot.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a FSSnapshot message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FSSnapshot} FSSnapshot
                     */
                    FSSnapshot.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FSSnapshot)
                            return object;
                        return new $root.replit.goval.api.FSSnapshot();
                    };
    
                    /**
                     * Creates a plain object from a FSSnapshot message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FSSnapshot
                     * @static
                     * @param {replit.goval.api.FSSnapshot} message FSSnapshot
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FSSnapshot.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this FSSnapshot to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FSSnapshot
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FSSnapshot.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FSSnapshot;
                })();
    
                api.FSSnapshotEvent = (function() {
    
                    /**
                     * Properties of a FSSnapshotEvent.
                     * @memberof replit.goval.api
                     * @interface IFSSnapshotEvent
                     * @property {Array.<string>|null} [sources] FSSnapshotEvent sources
                     */
    
                    /**
                     * Constructs a new FSSnapshotEvent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FSSnapshotEvent.
                     * @constructor
                     * @param {replit.goval.api.IFSSnapshotEvent=} [properties] Properties to set
                     */
                    function FSSnapshotEvent(properties) {
                        this.sources = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FSSnapshotEvent sources.
                     * @member {Array.<string>} sources
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @instance
                     */
                    FSSnapshotEvent.prototype.sources = $util.emptyArray;
    
                    /**
                     * Creates a new FSSnapshotEvent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {replit.goval.api.IFSSnapshotEvent=} [properties] Properties to set
                     * @returns {replit.goval.api.FSSnapshotEvent} FSSnapshotEvent instance
                     */
                    FSSnapshotEvent.create = function create(properties) {
                        return FSSnapshotEvent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FSSnapshotEvent message. Does not implicitly {@link replit.goval.api.FSSnapshotEvent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {replit.goval.api.FSSnapshotEvent} message FSSnapshotEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSSnapshotEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sources != null && message.sources.length)
                            for (var i = 0; i < message.sources.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sources[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FSSnapshotEvent message, length delimited. Does not implicitly {@link replit.goval.api.FSSnapshotEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {replit.goval.api.FSSnapshotEvent} message FSSnapshotEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FSSnapshotEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FSSnapshotEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FSSnapshotEvent} FSSnapshotEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSSnapshotEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FSSnapshotEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sources && message.sources.length))
                                    message.sources = [];
                                message.sources.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FSSnapshotEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FSSnapshotEvent} FSSnapshotEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FSSnapshotEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FSSnapshotEvent message.
                     * @function verify
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FSSnapshotEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sources != null && message.hasOwnProperty("sources")) {
                            if (!Array.isArray(message.sources))
                                return "sources: array expected";
                            for (var i = 0; i < message.sources.length; ++i)
                                if (!$util.isString(message.sources[i]))
                                    return "sources: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a FSSnapshotEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FSSnapshotEvent} FSSnapshotEvent
                     */
                    FSSnapshotEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FSSnapshotEvent)
                            return object;
                        var message = new $root.replit.goval.api.FSSnapshotEvent();
                        if (object.sources) {
                            if (!Array.isArray(object.sources))
                                throw TypeError(".replit.goval.api.FSSnapshotEvent.sources: array expected");
                            message.sources = [];
                            for (var i = 0; i < object.sources.length; ++i)
                                message.sources[i] = String(object.sources[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FSSnapshotEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @static
                     * @param {replit.goval.api.FSSnapshotEvent} message FSSnapshotEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FSSnapshotEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.sources = [];
                        if (message.sources && message.sources.length) {
                            object.sources = [];
                            for (var j = 0; j < message.sources.length; ++j)
                                object.sources[j] = message.sources[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this FSSnapshotEvent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FSSnapshotEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FSSnapshotEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FSSnapshotEvent;
                })();
    
                api.SnapshotEvent = (function() {
    
                    /**
                     * Properties of a SnapshotEvent.
                     * @memberof replit.goval.api
                     * @interface ISnapshotEvent
                     * @property {Array.<string>|null} [sources] SnapshotEvent sources
                     */
    
                    /**
                     * Constructs a new SnapshotEvent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a SnapshotEvent.
                     * @constructor
                     * @param {replit.goval.api.ISnapshotEvent=} [properties] Properties to set
                     */
                    function SnapshotEvent(properties) {
                        this.sources = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SnapshotEvent sources.
                     * @member {Array.<string>} sources
                     * @memberof replit.goval.api.SnapshotEvent
                     * @instance
                     */
                    SnapshotEvent.prototype.sources = $util.emptyArray;
    
                    /**
                     * Creates a new SnapshotEvent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {replit.goval.api.ISnapshotEvent=} [properties] Properties to set
                     * @returns {replit.goval.api.SnapshotEvent} SnapshotEvent instance
                     */
                    SnapshotEvent.create = function create(properties) {
                        return SnapshotEvent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified SnapshotEvent message. Does not implicitly {@link replit.goval.api.SnapshotEvent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {replit.goval.api.SnapshotEvent} message SnapshotEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SnapshotEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sources != null && message.sources.length)
                            for (var i = 0; i < message.sources.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sources[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SnapshotEvent message, length delimited. Does not implicitly {@link replit.goval.api.SnapshotEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {replit.goval.api.SnapshotEvent} message SnapshotEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SnapshotEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SnapshotEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.SnapshotEvent} SnapshotEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SnapshotEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.SnapshotEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sources && message.sources.length))
                                    message.sources = [];
                                message.sources.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SnapshotEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.SnapshotEvent} SnapshotEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SnapshotEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SnapshotEvent message.
                     * @function verify
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SnapshotEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sources != null && message.hasOwnProperty("sources")) {
                            if (!Array.isArray(message.sources))
                                return "sources: array expected";
                            for (var i = 0; i < message.sources.length; ++i)
                                if (!$util.isString(message.sources[i]))
                                    return "sources: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SnapshotEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.SnapshotEvent} SnapshotEvent
                     */
                    SnapshotEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.SnapshotEvent)
                            return object;
                        var message = new $root.replit.goval.api.SnapshotEvent();
                        if (object.sources) {
                            if (!Array.isArray(object.sources))
                                throw TypeError(".replit.goval.api.SnapshotEvent.sources: array expected");
                            message.sources = [];
                            for (var i = 0; i < object.sources.length; ++i)
                                message.sources[i] = String(object.sources[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SnapshotEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.SnapshotEvent
                     * @static
                     * @param {replit.goval.api.SnapshotEvent} message SnapshotEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SnapshotEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.sources = [];
                        if (message.sources && message.sources.length) {
                            object.sources = [];
                            for (var j = 0; j < message.sources.length; ++j)
                                object.sources[j] = message.sources[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SnapshotEvent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.SnapshotEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SnapshotEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SnapshotEvent;
                })();
    
                api.SubscribeFile = (function() {
    
                    /**
                     * Properties of a SubscribeFile.
                     * @memberof replit.goval.api
                     * @interface ISubscribeFile
                     * @property {Array.<replit.goval.api.File|replit.goval.api.IFile>|null} [files] SubscribeFile files
                     */
    
                    /**
                     * Constructs a new SubscribeFile.
                     * @memberof replit.goval.api
                     * @classdesc Represents a SubscribeFile.
                     * @constructor
                     * @param {replit.goval.api.ISubscribeFile=} [properties] Properties to set
                     */
                    function SubscribeFile(properties) {
                        this.files = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SubscribeFile files.
                     * @member {Array.<replit.goval.api.File>} files
                     * @memberof replit.goval.api.SubscribeFile
                     * @instance
                     */
                    SubscribeFile.prototype.files = $util.emptyArray;
    
                    /**
                     * Creates a new SubscribeFile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {replit.goval.api.ISubscribeFile=} [properties] Properties to set
                     * @returns {replit.goval.api.SubscribeFile} SubscribeFile instance
                     */
                    SubscribeFile.create = function create(properties) {
                        return SubscribeFile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified SubscribeFile message. Does not implicitly {@link replit.goval.api.SubscribeFile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {replit.goval.api.SubscribeFile} message SubscribeFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SubscribeFile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.files != null && message.files.length)
                            for (var i = 0; i < message.files.length; ++i)
                                $root.replit.goval.api.File.encode(message.files[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SubscribeFile message, length delimited. Does not implicitly {@link replit.goval.api.SubscribeFile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {replit.goval.api.SubscribeFile} message SubscribeFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SubscribeFile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SubscribeFile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.SubscribeFile} SubscribeFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SubscribeFile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.SubscribeFile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.files && message.files.length))
                                    message.files = [];
                                message.files.push($root.replit.goval.api.File.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SubscribeFile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.SubscribeFile} SubscribeFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SubscribeFile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SubscribeFile message.
                     * @function verify
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SubscribeFile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.files != null && message.hasOwnProperty("files")) {
                            if (!Array.isArray(message.files))
                                return "files: array expected";
                            for (var i = 0; i < message.files.length; ++i) {
                                var error = $root.replit.goval.api.File.verify(message.files[i]);
                                if (error)
                                    return "files." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SubscribeFile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.SubscribeFile} SubscribeFile
                     */
                    SubscribeFile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.SubscribeFile)
                            return object;
                        var message = new $root.replit.goval.api.SubscribeFile();
                        if (object.files) {
                            if (!Array.isArray(object.files))
                                throw TypeError(".replit.goval.api.SubscribeFile.files: array expected");
                            message.files = [];
                            for (var i = 0; i < object.files.length; ++i) {
                                if (typeof object.files[i] !== "object")
                                    throw TypeError(".replit.goval.api.SubscribeFile.files: object expected");
                                message.files[i] = $root.replit.goval.api.File.fromObject(object.files[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SubscribeFile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.SubscribeFile
                     * @static
                     * @param {replit.goval.api.SubscribeFile} message SubscribeFile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SubscribeFile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.files = [];
                        if (message.files && message.files.length) {
                            object.files = [];
                            for (var j = 0; j < message.files.length; ++j)
                                object.files[j] = $root.replit.goval.api.File.toObject(message.files[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this SubscribeFile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.SubscribeFile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SubscribeFile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SubscribeFile;
                })();
    
                api.FileEvent = (function() {
    
                    /**
                     * Properties of a FileEvent.
                     * @memberof replit.goval.api
                     * @interface IFileEvent
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] FileEvent file
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [dest] FileEvent dest
                     * @property {replit.goval.api.FileEvent.Op|null} [op] FileEvent op
                     */
    
                    /**
                     * Constructs a new FileEvent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FileEvent.
                     * @constructor
                     * @param {replit.goval.api.IFileEvent=} [properties] Properties to set
                     */
                    function FileEvent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FileEvent file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.FileEvent
                     * @instance
                     */
                    FileEvent.prototype.file = null;
    
                    /**
                     * FileEvent dest.
                     * @member {replit.goval.api.File|null|undefined} dest
                     * @memberof replit.goval.api.FileEvent
                     * @instance
                     */
                    FileEvent.prototype.dest = null;
    
                    /**
                     * FileEvent op.
                     * @member {replit.goval.api.FileEvent.Op} op
                     * @memberof replit.goval.api.FileEvent
                     * @instance
                     */
                    FileEvent.prototype.op = 0;
    
                    /**
                     * Creates a new FileEvent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {replit.goval.api.IFileEvent=} [properties] Properties to set
                     * @returns {replit.goval.api.FileEvent} FileEvent instance
                     */
                    FileEvent.create = function create(properties) {
                        return FileEvent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FileEvent message. Does not implicitly {@link replit.goval.api.FileEvent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {replit.goval.api.FileEvent} message FileEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.op != null && Object.hasOwnProperty.call(message, "op"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.op);
                        if (message.dest != null && Object.hasOwnProperty.call(message, "dest"))
                            $root.replit.goval.api.File.encode(message.dest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FileEvent message, length delimited. Does not implicitly {@link replit.goval.api.FileEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {replit.goval.api.FileEvent} message FileEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FileEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FileEvent} FileEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FileEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.dest = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.op = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FileEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FileEvent} FileEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FileEvent message.
                     * @function verify
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FileEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file")) {
                            var error = $root.replit.goval.api.File.verify(message.file);
                            if (error)
                                return "file." + error;
                        }
                        if (message.dest != null && message.hasOwnProperty("dest")) {
                            var error = $root.replit.goval.api.File.verify(message.dest);
                            if (error)
                                return "dest." + error;
                        }
                        if (message.op != null && message.hasOwnProperty("op"))
                            switch (message.op) {
                            default:
                                return "op: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a FileEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FileEvent} FileEvent
                     */
                    FileEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FileEvent)
                            return object;
                        var message = new $root.replit.goval.api.FileEvent();
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.FileEvent.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        if (object.dest != null) {
                            if (typeof object.dest !== "object")
                                throw TypeError(".replit.goval.api.FileEvent.dest: object expected");
                            message.dest = $root.replit.goval.api.File.fromObject(object.dest);
                        }
                        switch (object.op) {
                        case "Create":
                        case 0:
                            message.op = 0;
                            break;
                        case "Move":
                        case 1:
                            message.op = 1;
                            break;
                        case "Remove":
                        case 2:
                            message.op = 2;
                            break;
                        case "Modify":
                        case 3:
                            message.op = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FileEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FileEvent
                     * @static
                     * @param {replit.goval.api.FileEvent} message FileEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FileEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = null;
                            object.op = options.enums === String ? "Create" : 0;
                            object.dest = null;
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                        if (message.op != null && message.hasOwnProperty("op"))
                            object.op = options.enums === String ? $root.replit.goval.api.FileEvent.Op[message.op] : message.op;
                        if (message.dest != null && message.hasOwnProperty("dest"))
                            object.dest = $root.replit.goval.api.File.toObject(message.dest, options);
                        return object;
                    };
    
                    /**
                     * Converts this FileEvent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FileEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FileEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Op enum.
                     * @name replit.goval.api.FileEvent.Op
                     * @enum {number}
                     * @property {number} Create=0 Create value
                     * @property {number} Move=1 Move value
                     * @property {number} Remove=2 Remove value
                     * @property {number} Modify=3 Modify value
                     */
                    FileEvent.Op = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Create"] = 0;
                        values[valuesById[1] = "Move"] = 1;
                        values[valuesById[2] = "Remove"] = 2;
                        values[valuesById[3] = "Modify"] = 3;
                        return values;
                    })();
    
                    return FileEvent;
                })();
    
                api.Flush = (function() {
    
                    /**
                     * Properties of a Flush.
                     * @memberof replit.goval.api
                     * @interface IFlush
                     * @property {replit.goval.api.Flush.Consistency|null} [consistency] Flush consistency
                     */
    
                    /**
                     * Constructs a new Flush.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Flush.
                     * @constructor
                     * @param {replit.goval.api.IFlush=} [properties] Properties to set
                     */
                    function Flush(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Flush consistency.
                     * @member {replit.goval.api.Flush.Consistency} consistency
                     * @memberof replit.goval.api.Flush
                     * @instance
                     */
                    Flush.prototype.consistency = 0;
    
                    /**
                     * Creates a new Flush instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {replit.goval.api.IFlush=} [properties] Properties to set
                     * @returns {replit.goval.api.Flush} Flush instance
                     */
                    Flush.create = function create(properties) {
                        return Flush.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Flush message. Does not implicitly {@link replit.goval.api.Flush.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {replit.goval.api.Flush} message Flush message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Flush.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consistency != null && Object.hasOwnProperty.call(message, "consistency"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.consistency);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Flush message, length delimited. Does not implicitly {@link replit.goval.api.Flush.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {replit.goval.api.Flush} message Flush message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Flush.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Flush message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Flush} Flush
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Flush.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Flush();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consistency = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Flush message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Flush} Flush
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Flush.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Flush message.
                     * @function verify
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Flush.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consistency != null && message.hasOwnProperty("consistency"))
                            switch (message.consistency) {
                            default:
                                return "consistency: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a Flush message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Flush} Flush
                     */
                    Flush.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Flush)
                            return object;
                        var message = new $root.replit.goval.api.Flush();
                        switch (object.consistency) {
                        case "PermanentStorage":
                        case 0:
                            message.consistency = 0;
                            break;
                        case "Disk":
                        case 1:
                            message.consistency = 1;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Flush message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Flush
                     * @static
                     * @param {replit.goval.api.Flush} message Flush
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Flush.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.consistency = options.enums === String ? "PermanentStorage" : 0;
                        if (message.consistency != null && message.hasOwnProperty("consistency"))
                            object.consistency = options.enums === String ? $root.replit.goval.api.Flush.Consistency[message.consistency] : message.consistency;
                        return object;
                    };
    
                    /**
                     * Converts this Flush to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Flush
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Flush.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Consistency enum.
                     * @name replit.goval.api.Flush.Consistency
                     * @enum {number}
                     * @property {number} PermanentStorage=0 PermanentStorage value
                     * @property {number} Disk=1 Disk value
                     */
                    Flush.Consistency = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PermanentStorage"] = 0;
                        values[valuesById[1] = "Disk"] = 1;
                        return values;
                    })();
    
                    return Flush;
                })();
    
                api.OTLinkFile = (function() {
    
                    /**
                     * Properties of a OTLinkFile.
                     * @memberof replit.goval.api
                     * @interface IOTLinkFile
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] OTLinkFile file
                     * @property {boolean|null} [highConsistency] OTLinkFile highConsistency
                     * @property {boolean|null} [OBSOLETEUseModTime] OTLinkFile OBSOLETEUseModTime
                     */
    
                    /**
                     * Constructs a new OTLinkFile.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTLinkFile.
                     * @constructor
                     * @param {replit.goval.api.IOTLinkFile=} [properties] Properties to set
                     */
                    function OTLinkFile(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTLinkFile file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.OTLinkFile
                     * @instance
                     */
                    OTLinkFile.prototype.file = null;
    
                    /**
                     * OTLinkFile highConsistency.
                     * @member {boolean} highConsistency
                     * @memberof replit.goval.api.OTLinkFile
                     * @instance
                     */
                    OTLinkFile.prototype.highConsistency = false;
    
                    /**
                     * OTLinkFile OBSOLETEUseModTime.
                     * @member {boolean} OBSOLETEUseModTime
                     * @memberof replit.goval.api.OTLinkFile
                     * @instance
                     */
                    OTLinkFile.prototype.OBSOLETEUseModTime = false;
    
                    /**
                     * Creates a new OTLinkFile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {replit.goval.api.IOTLinkFile=} [properties] Properties to set
                     * @returns {replit.goval.api.OTLinkFile} OTLinkFile instance
                     */
                    OTLinkFile.create = function create(properties) {
                        return OTLinkFile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTLinkFile message. Does not implicitly {@link replit.goval.api.OTLinkFile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {replit.goval.api.OTLinkFile} message OTLinkFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTLinkFile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.highConsistency != null && Object.hasOwnProperty.call(message, "highConsistency"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.highConsistency);
                        if (message.OBSOLETEUseModTime != null && Object.hasOwnProperty.call(message, "OBSOLETEUseModTime"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.OBSOLETEUseModTime);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTLinkFile message, length delimited. Does not implicitly {@link replit.goval.api.OTLinkFile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {replit.goval.api.OTLinkFile} message OTLinkFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTLinkFile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTLinkFile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTLinkFile} OTLinkFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTLinkFile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTLinkFile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.highConsistency = reader.bool();
                                break;
                            case 3:
                                message.OBSOLETEUseModTime = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTLinkFile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTLinkFile} OTLinkFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTLinkFile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTLinkFile message.
                     * @function verify
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTLinkFile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file")) {
                            var error = $root.replit.goval.api.File.verify(message.file);
                            if (error)
                                return "file." + error;
                        }
                        if (message.highConsistency != null && message.hasOwnProperty("highConsistency"))
                            if (typeof message.highConsistency !== "boolean")
                                return "highConsistency: boolean expected";
                        if (message.OBSOLETEUseModTime != null && message.hasOwnProperty("OBSOLETEUseModTime"))
                            if (typeof message.OBSOLETEUseModTime !== "boolean")
                                return "OBSOLETEUseModTime: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a OTLinkFile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTLinkFile} OTLinkFile
                     */
                    OTLinkFile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTLinkFile)
                            return object;
                        var message = new $root.replit.goval.api.OTLinkFile();
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.OTLinkFile.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        if (object.highConsistency != null)
                            message.highConsistency = Boolean(object.highConsistency);
                        if (object.OBSOLETEUseModTime != null)
                            message.OBSOLETEUseModTime = Boolean(object.OBSOLETEUseModTime);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTLinkFile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTLinkFile
                     * @static
                     * @param {replit.goval.api.OTLinkFile} message OTLinkFile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTLinkFile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = null;
                            object.highConsistency = false;
                            object.OBSOLETEUseModTime = false;
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                        if (message.highConsistency != null && message.hasOwnProperty("highConsistency"))
                            object.highConsistency = message.highConsistency;
                        if (message.OBSOLETEUseModTime != null && message.hasOwnProperty("OBSOLETEUseModTime"))
                            object.OBSOLETEUseModTime = message.OBSOLETEUseModTime;
                        return object;
                    };
    
                    /**
                     * Converts this OTLinkFile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTLinkFile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTLinkFile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTLinkFile;
                })();
    
                api.OTLinkFileResponse = (function() {
    
                    /**
                     * Properties of a OTLinkFileResponse.
                     * @memberof replit.goval.api
                     * @interface IOTLinkFileResponse
                     * @property {number|null} [version] OTLinkFileResponse version
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [linkedFile] OTLinkFileResponse linkedFile
                     */
    
                    /**
                     * Constructs a new OTLinkFileResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTLinkFileResponse.
                     * @constructor
                     * @param {replit.goval.api.IOTLinkFileResponse=} [properties] Properties to set
                     */
                    function OTLinkFileResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTLinkFileResponse version.
                     * @member {number} version
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @instance
                     */
                    OTLinkFileResponse.prototype.version = 0;
    
                    /**
                     * OTLinkFileResponse linkedFile.
                     * @member {replit.goval.api.File|null|undefined} linkedFile
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @instance
                     */
                    OTLinkFileResponse.prototype.linkedFile = null;
    
                    /**
                     * Creates a new OTLinkFileResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {replit.goval.api.IOTLinkFileResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.OTLinkFileResponse} OTLinkFileResponse instance
                     */
                    OTLinkFileResponse.create = function create(properties) {
                        return OTLinkFileResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTLinkFileResponse message. Does not implicitly {@link replit.goval.api.OTLinkFileResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {replit.goval.api.OTLinkFileResponse} message OTLinkFileResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTLinkFileResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
                        if (message.linkedFile != null && Object.hasOwnProperty.call(message, "linkedFile"))
                            $root.replit.goval.api.File.encode(message.linkedFile, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTLinkFileResponse message, length delimited. Does not implicitly {@link replit.goval.api.OTLinkFileResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {replit.goval.api.OTLinkFileResponse} message OTLinkFileResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTLinkFileResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTLinkFileResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTLinkFileResponse} OTLinkFileResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTLinkFileResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTLinkFileResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.version = reader.uint32();
                                break;
                            case 2:
                                message.linkedFile = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTLinkFileResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTLinkFileResponse} OTLinkFileResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTLinkFileResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTLinkFileResponse message.
                     * @function verify
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTLinkFileResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.linkedFile != null && message.hasOwnProperty("linkedFile")) {
                            var error = $root.replit.goval.api.File.verify(message.linkedFile);
                            if (error)
                                return "linkedFile." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a OTLinkFileResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTLinkFileResponse} OTLinkFileResponse
                     */
                    OTLinkFileResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTLinkFileResponse)
                            return object;
                        var message = new $root.replit.goval.api.OTLinkFileResponse();
                        if (object.version != null)
                            message.version = object.version >>> 0;
                        if (object.linkedFile != null) {
                            if (typeof object.linkedFile !== "object")
                                throw TypeError(".replit.goval.api.OTLinkFileResponse.linkedFile: object expected");
                            message.linkedFile = $root.replit.goval.api.File.fromObject(object.linkedFile);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTLinkFileResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @static
                     * @param {replit.goval.api.OTLinkFileResponse} message OTLinkFileResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTLinkFileResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.version = 0;
                            object.linkedFile = null;
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.linkedFile != null && message.hasOwnProperty("linkedFile"))
                            object.linkedFile = $root.replit.goval.api.File.toObject(message.linkedFile, options);
                        return object;
                    };
    
                    /**
                     * Converts this OTLinkFileResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTLinkFileResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTLinkFileResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTLinkFileResponse;
                })();
    
                api.Auth = (function() {
    
                    /**
                     * Properties of an Auth.
                     * @memberof replit.goval.api
                     * @interface IAuth
                     * @property {string|null} [token] Auth token
                     * @property {string|null} [containerID] Auth containerID
                     */
    
                    /**
                     * Constructs a new Auth.
                     * @memberof replit.goval.api
                     * @classdesc Represents an Auth.
                     * @constructor
                     * @param {replit.goval.api.IAuth=} [properties] Properties to set
                     */
                    function Auth(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Auth token.
                     * @member {string} token
                     * @memberof replit.goval.api.Auth
                     * @instance
                     */
                    Auth.prototype.token = "";
    
                    /**
                     * Auth containerID.
                     * @member {string} containerID
                     * @memberof replit.goval.api.Auth
                     * @instance
                     */
                    Auth.prototype.containerID = "";
    
                    /**
                     * Creates a new Auth instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {replit.goval.api.IAuth=} [properties] Properties to set
                     * @returns {replit.goval.api.Auth} Auth instance
                     */
                    Auth.create = function create(properties) {
                        return Auth.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Auth message. Does not implicitly {@link replit.goval.api.Auth.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {replit.goval.api.Auth} message Auth message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Auth.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                        if (message.containerID != null && Object.hasOwnProperty.call(message, "containerID"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.containerID);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Auth message, length delimited. Does not implicitly {@link replit.goval.api.Auth.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {replit.goval.api.Auth} message Auth message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Auth.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Auth message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Auth} Auth
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Auth.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Auth();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.token = reader.string();
                                break;
                            case 2:
                                message.containerID = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Auth message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Auth} Auth
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Auth.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Auth message.
                     * @function verify
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Auth.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        if (message.containerID != null && message.hasOwnProperty("containerID"))
                            if (!$util.isString(message.containerID))
                                return "containerID: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an Auth message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Auth} Auth
                     */
                    Auth.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Auth)
                            return object;
                        var message = new $root.replit.goval.api.Auth();
                        if (object.token != null)
                            message.token = String(object.token);
                        if (object.containerID != null)
                            message.containerID = String(object.containerID);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Auth message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Auth
                     * @static
                     * @param {replit.goval.api.Auth} message Auth
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Auth.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.token = "";
                            object.containerID = "";
                        }
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        if (message.containerID != null && message.hasOwnProperty("containerID"))
                            object.containerID = message.containerID;
                        return object;
                    };
    
                    /**
                     * Converts this Auth to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Auth
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Auth.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Auth;
                })();
    
                api.VCREntry = (function() {
    
                    /**
                     * Properties of a VCREntry.
                     * @memberof replit.goval.api
                     * @interface IVCREntry
                     * @property {number|null} [timestamp] VCREntry timestamp
                     * @property {replit.goval.api.VCREntry.Direction|null} [direction] VCREntry direction
                     * @property {replit.goval.api.Command|replit.goval.api.ICommand|null} [command] VCREntry command
                     * @property {string|null} [uid] VCREntry uid
                     * @property {string|null} [replid] VCREntry replid
                     */
    
                    /**
                     * Constructs a new VCREntry.
                     * @memberof replit.goval.api
                     * @classdesc Represents a VCREntry.
                     * @constructor
                     * @param {replit.goval.api.IVCREntry=} [properties] Properties to set
                     */
                    function VCREntry(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VCREntry timestamp.
                     * @member {number} timestamp
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     */
                    VCREntry.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * VCREntry direction.
                     * @member {replit.goval.api.VCREntry.Direction} direction
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     */
                    VCREntry.prototype.direction = 0;
    
                    /**
                     * VCREntry command.
                     * @member {replit.goval.api.Command|null|undefined} command
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     */
                    VCREntry.prototype.command = null;
    
                    /**
                     * VCREntry uid.
                     * @member {string} uid
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     */
                    VCREntry.prototype.uid = "";
    
                    /**
                     * VCREntry replid.
                     * @member {string} replid
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     */
                    VCREntry.prototype.replid = "";
    
                    /**
                     * Creates a new VCREntry instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {replit.goval.api.IVCREntry=} [properties] Properties to set
                     * @returns {replit.goval.api.VCREntry} VCREntry instance
                     */
                    VCREntry.create = function create(properties) {
                        return VCREntry.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified VCREntry message. Does not implicitly {@link replit.goval.api.VCREntry.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {replit.goval.api.VCREntry} message VCREntry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VCREntry.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.timestamp);
                        if (message.direction != null && Object.hasOwnProperty.call(message, "direction"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.direction);
                        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                            $root.replit.goval.api.Command.encode(message.command, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uid);
                        if (message.replid != null && Object.hasOwnProperty.call(message, "replid"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.replid);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VCREntry message, length delimited. Does not implicitly {@link replit.goval.api.VCREntry.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {replit.goval.api.VCREntry} message VCREntry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VCREntry.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VCREntry message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.VCREntry} VCREntry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VCREntry.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.VCREntry();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timestamp = reader.uint64();
                                break;
                            case 2:
                                message.direction = reader.int32();
                                break;
                            case 3:
                                message.command = $root.replit.goval.api.Command.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.uid = reader.string();
                                break;
                            case 5:
                                message.replid = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VCREntry message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.VCREntry} VCREntry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VCREntry.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VCREntry message.
                     * @function verify
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VCREntry.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.direction != null && message.hasOwnProperty("direction"))
                            switch (message.direction) {
                            default:
                                return "direction: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.command != null && message.hasOwnProperty("command")) {
                            var error = $root.replit.goval.api.Command.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            if (!$util.isString(message.uid))
                                return "uid: string expected";
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            if (!$util.isString(message.replid))
                                return "replid: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a VCREntry message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.VCREntry} VCREntry
                     */
                    VCREntry.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.VCREntry)
                            return object;
                        var message = new $root.replit.goval.api.VCREntry();
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        switch (object.direction) {
                        case "IN":
                        case 0:
                            message.direction = 0;
                            break;
                        case "OUT":
                        case 1:
                            message.direction = 1;
                            break;
                        }
                        if (object.command != null) {
                            if (typeof object.command !== "object")
                                throw TypeError(".replit.goval.api.VCREntry.command: object expected");
                            message.command = $root.replit.goval.api.Command.fromObject(object.command);
                        }
                        if (object.uid != null)
                            message.uid = String(object.uid);
                        if (object.replid != null)
                            message.replid = String(object.replid);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VCREntry message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.VCREntry
                     * @static
                     * @param {replit.goval.api.VCREntry} message VCREntry
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VCREntry.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            object.direction = options.enums === String ? "IN" : 0;
                            object.command = null;
                            object.uid = "";
                            object.replid = "";
                        }
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.direction != null && message.hasOwnProperty("direction"))
                            object.direction = options.enums === String ? $root.replit.goval.api.VCREntry.Direction[message.direction] : message.direction;
                        if (message.command != null && message.hasOwnProperty("command"))
                            object.command = $root.replit.goval.api.Command.toObject(message.command, options);
                        if (message.uid != null && message.hasOwnProperty("uid"))
                            object.uid = message.uid;
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            object.replid = message.replid;
                        return object;
                    };
    
                    /**
                     * Converts this VCREntry to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.VCREntry
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VCREntry.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Direction enum.
                     * @name replit.goval.api.VCREntry.Direction
                     * @enum {number}
                     * @property {number} IN=0 IN value
                     * @property {number} OUT=1 OUT value
                     */
                    VCREntry.Direction = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "IN"] = 0;
                        values[valuesById[1] = "OUT"] = 1;
                        return values;
                    })();
    
                    return VCREntry;
                })();
    
                api.StartVCR = (function() {
    
                    /**
                     * Properties of a StartVCR.
                     * @memberof replit.goval.api
                     * @interface IStartVCR
                     */
    
                    /**
                     * Constructs a new StartVCR.
                     * @memberof replit.goval.api
                     * @classdesc Represents a StartVCR.
                     * @constructor
                     * @param {replit.goval.api.IStartVCR=} [properties] Properties to set
                     */
                    function StartVCR(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new StartVCR instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {replit.goval.api.IStartVCR=} [properties] Properties to set
                     * @returns {replit.goval.api.StartVCR} StartVCR instance
                     */
                    StartVCR.create = function create(properties) {
                        return StartVCR.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified StartVCR message. Does not implicitly {@link replit.goval.api.StartVCR.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {replit.goval.api.StartVCR} message StartVCR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StartVCR.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StartVCR message, length delimited. Does not implicitly {@link replit.goval.api.StartVCR.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {replit.goval.api.StartVCR} message StartVCR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StartVCR.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StartVCR message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.StartVCR} StartVCR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StartVCR.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.StartVCR();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StartVCR message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.StartVCR} StartVCR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StartVCR.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StartVCR message.
                     * @function verify
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StartVCR.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a StartVCR message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.StartVCR} StartVCR
                     */
                    StartVCR.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.StartVCR)
                            return object;
                        return new $root.replit.goval.api.StartVCR();
                    };
    
                    /**
                     * Creates a plain object from a StartVCR message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.StartVCR
                     * @static
                     * @param {replit.goval.api.StartVCR} message StartVCR
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StartVCR.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this StartVCR to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.StartVCR
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StartVCR.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StartVCR;
                })();
    
                api.ReadVCR = (function() {
    
                    /**
                     * Properties of a ReadVCR.
                     * @memberof replit.goval.api
                     * @interface IReadVCR
                     */
    
                    /**
                     * Constructs a new ReadVCR.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReadVCR.
                     * @constructor
                     * @param {replit.goval.api.IReadVCR=} [properties] Properties to set
                     */
                    function ReadVCR(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new ReadVCR instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {replit.goval.api.IReadVCR=} [properties] Properties to set
                     * @returns {replit.goval.api.ReadVCR} ReadVCR instance
                     */
                    ReadVCR.create = function create(properties) {
                        return ReadVCR.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReadVCR message. Does not implicitly {@link replit.goval.api.ReadVCR.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {replit.goval.api.ReadVCR} message ReadVCR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadVCR.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReadVCR message, length delimited. Does not implicitly {@link replit.goval.api.ReadVCR.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {replit.goval.api.ReadVCR} message ReadVCR message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReadVCR.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReadVCR message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReadVCR} ReadVCR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadVCR.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReadVCR();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReadVCR message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReadVCR} ReadVCR
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReadVCR.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReadVCR message.
                     * @function verify
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReadVCR.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReadVCR message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReadVCR} ReadVCR
                     */
                    ReadVCR.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReadVCR)
                            return object;
                        return new $root.replit.goval.api.ReadVCR();
                    };
    
                    /**
                     * Creates a plain object from a ReadVCR message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReadVCR
                     * @static
                     * @param {replit.goval.api.ReadVCR} message ReadVCR
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReadVCR.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this ReadVCR to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReadVCR
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReadVCR.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReadVCR;
                })();
    
                api.VCRLog = (function() {
    
                    /**
                     * Properties of a VCRLog.
                     * @memberof replit.goval.api
                     * @interface IVCRLog
                     * @property {Array.<replit.goval.api.VCREntry|replit.goval.api.IVCREntry>|null} [log] VCRLog log
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [logfile] VCRLog logfile
                     */
    
                    /**
                     * Constructs a new VCRLog.
                     * @memberof replit.goval.api
                     * @classdesc Represents a VCRLog.
                     * @constructor
                     * @param {replit.goval.api.IVCRLog=} [properties] Properties to set
                     */
                    function VCRLog(properties) {
                        this.log = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * VCRLog log.
                     * @member {Array.<replit.goval.api.VCREntry>} log
                     * @memberof replit.goval.api.VCRLog
                     * @instance
                     */
                    VCRLog.prototype.log = $util.emptyArray;
    
                    /**
                     * VCRLog logfile.
                     * @member {replit.goval.api.File|null|undefined} logfile
                     * @memberof replit.goval.api.VCRLog
                     * @instance
                     */
                    VCRLog.prototype.logfile = null;
    
                    /**
                     * Creates a new VCRLog instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {replit.goval.api.IVCRLog=} [properties] Properties to set
                     * @returns {replit.goval.api.VCRLog} VCRLog instance
                     */
                    VCRLog.create = function create(properties) {
                        return VCRLog.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified VCRLog message. Does not implicitly {@link replit.goval.api.VCRLog.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {replit.goval.api.VCRLog} message VCRLog message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VCRLog.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.log != null && message.log.length)
                            for (var i = 0; i < message.log.length; ++i)
                                $root.replit.goval.api.VCREntry.encode(message.log[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.logfile != null && Object.hasOwnProperty.call(message, "logfile"))
                            $root.replit.goval.api.File.encode(message.logfile, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified VCRLog message, length delimited. Does not implicitly {@link replit.goval.api.VCRLog.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {replit.goval.api.VCRLog} message VCRLog message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    VCRLog.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a VCRLog message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.VCRLog} VCRLog
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VCRLog.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.VCRLog();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.log && message.log.length))
                                    message.log = [];
                                message.log.push($root.replit.goval.api.VCREntry.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.logfile = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a VCRLog message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.VCRLog} VCRLog
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    VCRLog.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a VCRLog message.
                     * @function verify
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    VCRLog.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.log != null && message.hasOwnProperty("log")) {
                            if (!Array.isArray(message.log))
                                return "log: array expected";
                            for (var i = 0; i < message.log.length; ++i) {
                                var error = $root.replit.goval.api.VCREntry.verify(message.log[i]);
                                if (error)
                                    return "log." + error;
                            }
                        }
                        if (message.logfile != null && message.hasOwnProperty("logfile")) {
                            var error = $root.replit.goval.api.File.verify(message.logfile);
                            if (error)
                                return "logfile." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a VCRLog message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.VCRLog} VCRLog
                     */
                    VCRLog.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.VCRLog)
                            return object;
                        var message = new $root.replit.goval.api.VCRLog();
                        if (object.log) {
                            if (!Array.isArray(object.log))
                                throw TypeError(".replit.goval.api.VCRLog.log: array expected");
                            message.log = [];
                            for (var i = 0; i < object.log.length; ++i) {
                                if (typeof object.log[i] !== "object")
                                    throw TypeError(".replit.goval.api.VCRLog.log: object expected");
                                message.log[i] = $root.replit.goval.api.VCREntry.fromObject(object.log[i]);
                            }
                        }
                        if (object.logfile != null) {
                            if (typeof object.logfile !== "object")
                                throw TypeError(".replit.goval.api.VCRLog.logfile: object expected");
                            message.logfile = $root.replit.goval.api.File.fromObject(object.logfile);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a VCRLog message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.VCRLog
                     * @static
                     * @param {replit.goval.api.VCRLog} message VCRLog
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    VCRLog.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.log = [];
                        if (options.defaults)
                            object.logfile = null;
                        if (message.log && message.log.length) {
                            object.log = [];
                            for (var j = 0; j < message.log.length; ++j)
                                object.log[j] = $root.replit.goval.api.VCREntry.toObject(message.log[j], options);
                        }
                        if (message.logfile != null && message.hasOwnProperty("logfile"))
                            object.logfile = $root.replit.goval.api.File.toObject(message.logfile, options);
                        return object;
                    };
    
                    /**
                     * Converts this VCRLog to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.VCRLog
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    VCRLog.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return VCRLog;
                })();
    
                api.ExecInfo = (function() {
    
                    /**
                     * Properties of an ExecInfo.
                     * @memberof replit.goval.api
                     * @interface IExecInfo
                     * @property {Array.<string>|null} [command] ExecInfo command
                     * @property {string|null} [reason] ExecInfo reason
                     */
    
                    /**
                     * Constructs a new ExecInfo.
                     * @memberof replit.goval.api
                     * @classdesc Represents an ExecInfo.
                     * @constructor
                     * @param {replit.goval.api.IExecInfo=} [properties] Properties to set
                     */
                    function ExecInfo(properties) {
                        this.command = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExecInfo command.
                     * @member {Array.<string>} command
                     * @memberof replit.goval.api.ExecInfo
                     * @instance
                     */
                    ExecInfo.prototype.command = $util.emptyArray;
    
                    /**
                     * ExecInfo reason.
                     * @member {string} reason
                     * @memberof replit.goval.api.ExecInfo
                     * @instance
                     */
                    ExecInfo.prototype.reason = "";
    
                    /**
                     * Creates a new ExecInfo instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {replit.goval.api.IExecInfo=} [properties] Properties to set
                     * @returns {replit.goval.api.ExecInfo} ExecInfo instance
                     */
                    ExecInfo.create = function create(properties) {
                        return ExecInfo.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ExecInfo message. Does not implicitly {@link replit.goval.api.ExecInfo.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {replit.goval.api.ExecInfo} message ExecInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.command != null && message.command.length)
                            for (var i = 0; i < message.command.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.command[i]);
                        if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExecInfo message, length delimited. Does not implicitly {@link replit.goval.api.ExecInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {replit.goval.api.ExecInfo} message ExecInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExecInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExecInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ExecInfo} ExecInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ExecInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.command && message.command.length))
                                    message.command = [];
                                message.command.push(reader.string());
                                break;
                            case 2:
                                message.reason = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExecInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ExecInfo} ExecInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExecInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExecInfo message.
                     * @function verify
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExecInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.command != null && message.hasOwnProperty("command")) {
                            if (!Array.isArray(message.command))
                                return "command: array expected";
                            for (var i = 0; i < message.command.length; ++i)
                                if (!$util.isString(message.command[i]))
                                    return "command: string[] expected";
                        }
                        if (message.reason != null && message.hasOwnProperty("reason"))
                            if (!$util.isString(message.reason))
                                return "reason: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExecInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ExecInfo} ExecInfo
                     */
                    ExecInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ExecInfo)
                            return object;
                        var message = new $root.replit.goval.api.ExecInfo();
                        if (object.command) {
                            if (!Array.isArray(object.command))
                                throw TypeError(".replit.goval.api.ExecInfo.command: array expected");
                            message.command = [];
                            for (var i = 0; i < object.command.length; ++i)
                                message.command[i] = String(object.command[i]);
                        }
                        if (object.reason != null)
                            message.reason = String(object.reason);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExecInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ExecInfo
                     * @static
                     * @param {replit.goval.api.ExecInfo} message ExecInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExecInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.command = [];
                        if (options.defaults)
                            object.reason = "";
                        if (message.command && message.command.length) {
                            object.command = [];
                            for (var j = 0; j < message.command.length; ++j)
                                object.command[j] = message.command[j];
                        }
                        if (message.reason != null && message.hasOwnProperty("reason"))
                            object.reason = message.reason;
                        return object;
                    };
    
                    /**
                     * Converts this ExecInfo to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ExecInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExecInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExecInfo;
                })();
    
                api.Debug = (function() {
    
                    /**
                     * Properties of a Debug.
                     * @memberof replit.goval.api
                     * @interface IDebug
                     * @property {string|null} [text] Debug text
                     */
    
                    /**
                     * Constructs a new Debug.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Debug.
                     * @constructor
                     * @param {replit.goval.api.IDebug=} [properties] Properties to set
                     */
                    function Debug(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Debug text.
                     * @member {string} text
                     * @memberof replit.goval.api.Debug
                     * @instance
                     */
                    Debug.prototype.text = "";
    
                    /**
                     * Creates a new Debug instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {replit.goval.api.IDebug=} [properties] Properties to set
                     * @returns {replit.goval.api.Debug} Debug instance
                     */
                    Debug.create = function create(properties) {
                        return Debug.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Debug message. Does not implicitly {@link replit.goval.api.Debug.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {replit.goval.api.Debug} message Debug message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Debug.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Debug message, length delimited. Does not implicitly {@link replit.goval.api.Debug.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {replit.goval.api.Debug} message Debug message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Debug.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Debug message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Debug} Debug
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Debug.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Debug();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Debug message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Debug} Debug
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Debug.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Debug message.
                     * @function verify
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Debug.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Debug message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Debug} Debug
                     */
                    Debug.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Debug)
                            return object;
                        var message = new $root.replit.goval.api.Debug();
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Debug message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Debug
                     * @static
                     * @param {replit.goval.api.Debug} message Debug
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Debug.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.text = "";
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this Debug to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Debug
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Debug.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Debug;
                })();
    
                /**
                 * FileAuthMethod enum.
                 * @name replit.goval.api.FileAuthMethod
                 * @enum {number}
                 * @property {number} GET=0 GET value
                 * @property {number} HEAD=1 HEAD value
                 * @property {number} PUT=2 PUT value
                 * @property {number} DELETE=3 DELETE value
                 */
                api.FileAuthMethod = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "GET"] = 0;
                    values[valuesById[1] = "HEAD"] = 1;
                    values[valuesById[2] = "PUT"] = 2;
                    values[valuesById[3] = "DELETE"] = 3;
                    return values;
                })();
    
                api.FileAuthReq = (function() {
    
                    /**
                     * Properties of a FileAuthReq.
                     * @memberof replit.goval.api
                     * @interface IFileAuthReq
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] FileAuthReq file
                     * @property {replit.goval.api.FileAuthMethod|null} [method] FileAuthReq method
                     */
    
                    /**
                     * Constructs a new FileAuthReq.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FileAuthReq.
                     * @constructor
                     * @param {replit.goval.api.IFileAuthReq=} [properties] Properties to set
                     */
                    function FileAuthReq(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FileAuthReq file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.FileAuthReq
                     * @instance
                     */
                    FileAuthReq.prototype.file = null;
    
                    /**
                     * FileAuthReq method.
                     * @member {replit.goval.api.FileAuthMethod} method
                     * @memberof replit.goval.api.FileAuthReq
                     * @instance
                     */
                    FileAuthReq.prototype.method = 0;
    
                    /**
                     * Creates a new FileAuthReq instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {replit.goval.api.IFileAuthReq=} [properties] Properties to set
                     * @returns {replit.goval.api.FileAuthReq} FileAuthReq instance
                     */
                    FileAuthReq.create = function create(properties) {
                        return FileAuthReq.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FileAuthReq message. Does not implicitly {@link replit.goval.api.FileAuthReq.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {replit.goval.api.FileAuthReq} message FileAuthReq message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileAuthReq.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.method != null && Object.hasOwnProperty.call(message, "method"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.method);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FileAuthReq message, length delimited. Does not implicitly {@link replit.goval.api.FileAuthReq.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {replit.goval.api.FileAuthReq} message FileAuthReq message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileAuthReq.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FileAuthReq message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FileAuthReq} FileAuthReq
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileAuthReq.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FileAuthReq();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.method = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FileAuthReq message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FileAuthReq} FileAuthReq
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileAuthReq.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FileAuthReq message.
                     * @function verify
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FileAuthReq.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file")) {
                            var error = $root.replit.goval.api.File.verify(message.file);
                            if (error)
                                return "file." + error;
                        }
                        if (message.method != null && message.hasOwnProperty("method"))
                            switch (message.method) {
                            default:
                                return "method: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a FileAuthReq message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FileAuthReq} FileAuthReq
                     */
                    FileAuthReq.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FileAuthReq)
                            return object;
                        var message = new $root.replit.goval.api.FileAuthReq();
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.FileAuthReq.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        switch (object.method) {
                        case "GET":
                        case 0:
                            message.method = 0;
                            break;
                        case "HEAD":
                        case 1:
                            message.method = 1;
                            break;
                        case "PUT":
                        case 2:
                            message.method = 2;
                            break;
                        case "DELETE":
                        case 3:
                            message.method = 3;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FileAuthReq message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FileAuthReq
                     * @static
                     * @param {replit.goval.api.FileAuthReq} message FileAuthReq
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FileAuthReq.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = null;
                            object.method = options.enums === String ? "GET" : 0;
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                        if (message.method != null && message.hasOwnProperty("method"))
                            object.method = options.enums === String ? $root.replit.goval.api.FileAuthMethod[message.method] : message.method;
                        return object;
                    };
    
                    /**
                     * Converts this FileAuthReq to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FileAuthReq
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FileAuthReq.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FileAuthReq;
                })();
    
                api.MultiFileAuthRes = (function() {
    
                    /**
                     * Properties of a MultiFileAuthRes.
                     * @memberof replit.goval.api
                     * @interface IMultiFileAuthRes
                     * @property {replit.goval.api.FileAuthRes|replit.goval.api.IFileAuthRes|null} [put] MultiFileAuthRes put
                     * @property {replit.goval.api.FileAuthRes|replit.goval.api.IFileAuthRes|null} [del] MultiFileAuthRes del
                     * @property {replit.goval.api.FileAuthRes|replit.goval.api.IFileAuthRes|null} [get] MultiFileAuthRes get
                     */
    
                    /**
                     * Constructs a new MultiFileAuthRes.
                     * @memberof replit.goval.api
                     * @classdesc Represents a MultiFileAuthRes.
                     * @constructor
                     * @param {replit.goval.api.IMultiFileAuthRes=} [properties] Properties to set
                     */
                    function MultiFileAuthRes(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MultiFileAuthRes put.
                     * @member {replit.goval.api.FileAuthRes|null|undefined} put
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @instance
                     */
                    MultiFileAuthRes.prototype.put = null;
    
                    /**
                     * MultiFileAuthRes del.
                     * @member {replit.goval.api.FileAuthRes|null|undefined} del
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @instance
                     */
                    MultiFileAuthRes.prototype.del = null;
    
                    /**
                     * MultiFileAuthRes get.
                     * @member {replit.goval.api.FileAuthRes|null|undefined} get
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @instance
                     */
                    MultiFileAuthRes.prototype.get = null;
    
                    /**
                     * Creates a new MultiFileAuthRes instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {replit.goval.api.IMultiFileAuthRes=} [properties] Properties to set
                     * @returns {replit.goval.api.MultiFileAuthRes} MultiFileAuthRes instance
                     */
                    MultiFileAuthRes.create = function create(properties) {
                        return MultiFileAuthRes.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified MultiFileAuthRes message. Does not implicitly {@link replit.goval.api.MultiFileAuthRes.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {replit.goval.api.MultiFileAuthRes} message MultiFileAuthRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiFileAuthRes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                            $root.replit.goval.api.FileAuthRes.encode(message.put, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.del != null && Object.hasOwnProperty.call(message, "del"))
                            $root.replit.goval.api.FileAuthRes.encode(message.del, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                            $root.replit.goval.api.FileAuthRes.encode(message.get, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MultiFileAuthRes message, length delimited. Does not implicitly {@link replit.goval.api.MultiFileAuthRes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {replit.goval.api.MultiFileAuthRes} message MultiFileAuthRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiFileAuthRes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MultiFileAuthRes message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.MultiFileAuthRes} MultiFileAuthRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiFileAuthRes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.MultiFileAuthRes();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.put = $root.replit.goval.api.FileAuthRes.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.del = $root.replit.goval.api.FileAuthRes.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.get = $root.replit.goval.api.FileAuthRes.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MultiFileAuthRes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.MultiFileAuthRes} MultiFileAuthRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiFileAuthRes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MultiFileAuthRes message.
                     * @function verify
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MultiFileAuthRes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.put != null && message.hasOwnProperty("put")) {
                            var error = $root.replit.goval.api.FileAuthRes.verify(message.put);
                            if (error)
                                return "put." + error;
                        }
                        if (message.del != null && message.hasOwnProperty("del")) {
                            var error = $root.replit.goval.api.FileAuthRes.verify(message.del);
                            if (error)
                                return "del." + error;
                        }
                        if (message.get != null && message.hasOwnProperty("get")) {
                            var error = $root.replit.goval.api.FileAuthRes.verify(message.get);
                            if (error)
                                return "get." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MultiFileAuthRes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.MultiFileAuthRes} MultiFileAuthRes
                     */
                    MultiFileAuthRes.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.MultiFileAuthRes)
                            return object;
                        var message = new $root.replit.goval.api.MultiFileAuthRes();
                        if (object.put != null) {
                            if (typeof object.put !== "object")
                                throw TypeError(".replit.goval.api.MultiFileAuthRes.put: object expected");
                            message.put = $root.replit.goval.api.FileAuthRes.fromObject(object.put);
                        }
                        if (object.del != null) {
                            if (typeof object.del !== "object")
                                throw TypeError(".replit.goval.api.MultiFileAuthRes.del: object expected");
                            message.del = $root.replit.goval.api.FileAuthRes.fromObject(object.del);
                        }
                        if (object.get != null) {
                            if (typeof object.get !== "object")
                                throw TypeError(".replit.goval.api.MultiFileAuthRes.get: object expected");
                            message.get = $root.replit.goval.api.FileAuthRes.fromObject(object.get);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MultiFileAuthRes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @static
                     * @param {replit.goval.api.MultiFileAuthRes} message MultiFileAuthRes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MultiFileAuthRes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.put = null;
                            object.del = null;
                            object.get = null;
                        }
                        if (message.put != null && message.hasOwnProperty("put"))
                            object.put = $root.replit.goval.api.FileAuthRes.toObject(message.put, options);
                        if (message.del != null && message.hasOwnProperty("del"))
                            object.del = $root.replit.goval.api.FileAuthRes.toObject(message.del, options);
                        if (message.get != null && message.hasOwnProperty("get"))
                            object.get = $root.replit.goval.api.FileAuthRes.toObject(message.get, options);
                        return object;
                    };
    
                    /**
                     * Converts this MultiFileAuthRes to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.MultiFileAuthRes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MultiFileAuthRes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MultiFileAuthRes;
                })();
    
                api.FileAuthRes = (function() {
    
                    /**
                     * Properties of a FileAuthRes.
                     * @memberof replit.goval.api
                     * @interface IFileAuthRes
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] FileAuthRes file
                     * @property {string|null} [url] FileAuthRes url
                     * @property {replit.goval.api.FileAuthMethod|null} [method] FileAuthRes method
                     * @property {number|null} [expire] FileAuthRes expire
                     * @property {string|null} [error] FileAuthRes error
                     * @property {boolean|null} [replError] FileAuthRes replError
                     */
    
                    /**
                     * Constructs a new FileAuthRes.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FileAuthRes.
                     * @constructor
                     * @param {replit.goval.api.IFileAuthRes=} [properties] Properties to set
                     */
                    function FileAuthRes(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FileAuthRes file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.file = null;
    
                    /**
                     * FileAuthRes url.
                     * @member {string} url
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.url = "";
    
                    /**
                     * FileAuthRes method.
                     * @member {replit.goval.api.FileAuthMethod} method
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.method = 0;
    
                    /**
                     * FileAuthRes expire.
                     * @member {number} expire
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.expire = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * FileAuthRes error.
                     * @member {string} error
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.error = "";
    
                    /**
                     * FileAuthRes replError.
                     * @member {boolean} replError
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     */
                    FileAuthRes.prototype.replError = false;
    
                    /**
                     * Creates a new FileAuthRes instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {replit.goval.api.IFileAuthRes=} [properties] Properties to set
                     * @returns {replit.goval.api.FileAuthRes} FileAuthRes instance
                     */
                    FileAuthRes.create = function create(properties) {
                        return FileAuthRes.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FileAuthRes message. Does not implicitly {@link replit.goval.api.FileAuthRes.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {replit.goval.api.FileAuthRes} message FileAuthRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileAuthRes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                        if (message.method != null && Object.hasOwnProperty.call(message, "method"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.method);
                        if (message.expire != null && Object.hasOwnProperty.call(message, "expire"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.expire);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.error);
                        if (message.replError != null && Object.hasOwnProperty.call(message, "replError"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.replError);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FileAuthRes message, length delimited. Does not implicitly {@link replit.goval.api.FileAuthRes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {replit.goval.api.FileAuthRes} message FileAuthRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileAuthRes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FileAuthRes message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FileAuthRes} FileAuthRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileAuthRes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FileAuthRes();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.url = reader.string();
                                break;
                            case 3:
                                message.method = reader.int32();
                                break;
                            case 4:
                                message.expire = reader.int64();
                                break;
                            case 5:
                                message.error = reader.string();
                                break;
                            case 7:
                                message.replError = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FileAuthRes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FileAuthRes} FileAuthRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileAuthRes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FileAuthRes message.
                     * @function verify
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FileAuthRes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file")) {
                            var error = $root.replit.goval.api.File.verify(message.file);
                            if (error)
                                return "file." + error;
                        }
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        if (message.method != null && message.hasOwnProperty("method"))
                            switch (message.method) {
                            default:
                                return "method: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.expire != null && message.hasOwnProperty("expire"))
                            if (!$util.isInteger(message.expire) && !(message.expire && $util.isInteger(message.expire.low) && $util.isInteger(message.expire.high)))
                                return "expire: integer|Long expected";
                        if (message.error != null && message.hasOwnProperty("error"))
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        if (message.replError != null && message.hasOwnProperty("replError"))
                            if (typeof message.replError !== "boolean")
                                return "replError: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a FileAuthRes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FileAuthRes} FileAuthRes
                     */
                    FileAuthRes.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FileAuthRes)
                            return object;
                        var message = new $root.replit.goval.api.FileAuthRes();
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.FileAuthRes.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        if (object.url != null)
                            message.url = String(object.url);
                        switch (object.method) {
                        case "GET":
                        case 0:
                            message.method = 0;
                            break;
                        case "HEAD":
                        case 1:
                            message.method = 1;
                            break;
                        case "PUT":
                        case 2:
                            message.method = 2;
                            break;
                        case "DELETE":
                        case 3:
                            message.method = 3;
                            break;
                        }
                        if (object.expire != null)
                            if ($util.Long)
                                (message.expire = $util.Long.fromValue(object.expire)).unsigned = false;
                            else if (typeof object.expire === "string")
                                message.expire = parseInt(object.expire, 10);
                            else if (typeof object.expire === "number")
                                message.expire = object.expire;
                            else if (typeof object.expire === "object")
                                message.expire = new $util.LongBits(object.expire.low >>> 0, object.expire.high >>> 0).toNumber();
                        if (object.error != null)
                            message.error = String(object.error);
                        if (object.replError != null)
                            message.replError = Boolean(object.replError);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FileAuthRes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FileAuthRes
                     * @static
                     * @param {replit.goval.api.FileAuthRes} message FileAuthRes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FileAuthRes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = null;
                            object.url = "";
                            object.method = options.enums === String ? "GET" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.expire = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.expire = options.longs === String ? "0" : 0;
                            object.error = "";
                            object.replError = false;
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        if (message.method != null && message.hasOwnProperty("method"))
                            object.method = options.enums === String ? $root.replit.goval.api.FileAuthMethod[message.method] : message.method;
                        if (message.expire != null && message.hasOwnProperty("expire"))
                            if (typeof message.expire === "number")
                                object.expire = options.longs === String ? String(message.expire) : message.expire;
                            else
                                object.expire = options.longs === String ? $util.Long.prototype.toString.call(message.expire) : options.longs === Number ? new $util.LongBits(message.expire.low >>> 0, message.expire.high >>> 0).toNumber() : message.expire;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = message.error;
                        if (message.replError != null && message.hasOwnProperty("replError"))
                            object.replError = message.replError;
                        return object;
                    };
    
                    /**
                     * Converts this FileAuthRes to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FileAuthRes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FileAuthRes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FileAuthRes;
                })();
    
                api.ListObjects = (function() {
    
                    /**
                     * Properties of a ListObjects.
                     * @memberof replit.goval.api
                     * @interface IListObjects
                     * @property {string|null} [prefix] ListObjects prefix
                     */
    
                    /**
                     * Constructs a new ListObjects.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ListObjects.
                     * @constructor
                     * @param {replit.goval.api.IListObjects=} [properties] Properties to set
                     */
                    function ListObjects(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListObjects prefix.
                     * @member {string} prefix
                     * @memberof replit.goval.api.ListObjects
                     * @instance
                     */
                    ListObjects.prototype.prefix = "";
    
                    /**
                     * Creates a new ListObjects instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {replit.goval.api.IListObjects=} [properties] Properties to set
                     * @returns {replit.goval.api.ListObjects} ListObjects instance
                     */
                    ListObjects.create = function create(properties) {
                        return ListObjects.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ListObjects message. Does not implicitly {@link replit.goval.api.ListObjects.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {replit.goval.api.ListObjects} message ListObjects message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListObjects.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.prefix);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListObjects message, length delimited. Does not implicitly {@link replit.goval.api.ListObjects.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {replit.goval.api.ListObjects} message ListObjects message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListObjects.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListObjects message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ListObjects} ListObjects
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListObjects.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ListObjects();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.prefix = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListObjects message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ListObjects} ListObjects
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListObjects.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListObjects message.
                     * @function verify
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListObjects.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            if (!$util.isString(message.prefix))
                                return "prefix: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ListObjects message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ListObjects} ListObjects
                     */
                    ListObjects.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ListObjects)
                            return object;
                        var message = new $root.replit.goval.api.ListObjects();
                        if (object.prefix != null)
                            message.prefix = String(object.prefix);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListObjects message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ListObjects
                     * @static
                     * @param {replit.goval.api.ListObjects} message ListObjects
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListObjects.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.prefix = "";
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            object.prefix = message.prefix;
                        return object;
                    };
    
                    /**
                     * Converts this ListObjects to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ListObjects
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListObjects.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListObjects;
                })();
    
                api.ListObjectsResp = (function() {
    
                    /**
                     * Properties of a ListObjectsResp.
                     * @memberof replit.goval.api
                     * @interface IListObjectsResp
                     * @property {Array.<string>|null} [objects] ListObjectsResp objects
                     */
    
                    /**
                     * Constructs a new ListObjectsResp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ListObjectsResp.
                     * @constructor
                     * @param {replit.goval.api.IListObjectsResp=} [properties] Properties to set
                     */
                    function ListObjectsResp(properties) {
                        this.objects = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ListObjectsResp objects.
                     * @member {Array.<string>} objects
                     * @memberof replit.goval.api.ListObjectsResp
                     * @instance
                     */
                    ListObjectsResp.prototype.objects = $util.emptyArray;
    
                    /**
                     * Creates a new ListObjectsResp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {replit.goval.api.IListObjectsResp=} [properties] Properties to set
                     * @returns {replit.goval.api.ListObjectsResp} ListObjectsResp instance
                     */
                    ListObjectsResp.create = function create(properties) {
                        return ListObjectsResp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ListObjectsResp message. Does not implicitly {@link replit.goval.api.ListObjectsResp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {replit.goval.api.ListObjectsResp} message ListObjectsResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListObjectsResp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.objects != null && message.objects.length)
                            for (var i = 0; i < message.objects.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.objects[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ListObjectsResp message, length delimited. Does not implicitly {@link replit.goval.api.ListObjectsResp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {replit.goval.api.ListObjectsResp} message ListObjectsResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ListObjectsResp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ListObjectsResp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ListObjectsResp} ListObjectsResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListObjectsResp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ListObjectsResp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.objects && message.objects.length))
                                    message.objects = [];
                                message.objects.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ListObjectsResp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ListObjectsResp} ListObjectsResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ListObjectsResp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ListObjectsResp message.
                     * @function verify
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ListObjectsResp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.objects != null && message.hasOwnProperty("objects")) {
                            if (!Array.isArray(message.objects))
                                return "objects: array expected";
                            for (var i = 0; i < message.objects.length; ++i)
                                if (!$util.isString(message.objects[i]))
                                    return "objects: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ListObjectsResp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ListObjectsResp} ListObjectsResp
                     */
                    ListObjectsResp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ListObjectsResp)
                            return object;
                        var message = new $root.replit.goval.api.ListObjectsResp();
                        if (object.objects) {
                            if (!Array.isArray(object.objects))
                                throw TypeError(".replit.goval.api.ListObjectsResp.objects: array expected");
                            message.objects = [];
                            for (var i = 0; i < object.objects.length; ++i)
                                message.objects[i] = String(object.objects[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ListObjectsResp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ListObjectsResp
                     * @static
                     * @param {replit.goval.api.ListObjectsResp} message ListObjectsResp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ListObjectsResp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.objects = [];
                        if (message.objects && message.objects.length) {
                            object.objects = [];
                            for (var j = 0; j < message.objects.length; ++j)
                                object.objects[j] = message.objects[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ListObjectsResp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ListObjectsResp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ListObjectsResp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ListObjectsResp;
                })();
    
                api.Disconnect = (function() {
    
                    /**
                     * Properties of a Disconnect.
                     * @memberof replit.goval.api
                     * @interface IDisconnect
                     * @property {string|null} [error] Disconnect error
                     */
    
                    /**
                     * Constructs a new Disconnect.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Disconnect.
                     * @constructor
                     * @param {replit.goval.api.IDisconnect=} [properties] Properties to set
                     */
                    function Disconnect(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Disconnect error.
                     * @member {string} error
                     * @memberof replit.goval.api.Disconnect
                     * @instance
                     */
                    Disconnect.prototype.error = "";
    
                    /**
                     * Creates a new Disconnect instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {replit.goval.api.IDisconnect=} [properties] Properties to set
                     * @returns {replit.goval.api.Disconnect} Disconnect instance
                     */
                    Disconnect.create = function create(properties) {
                        return Disconnect.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Disconnect message. Does not implicitly {@link replit.goval.api.Disconnect.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {replit.goval.api.Disconnect} message Disconnect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Disconnect.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.error);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link replit.goval.api.Disconnect.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {replit.goval.api.Disconnect} message Disconnect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Disconnect.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Disconnect message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Disconnect} Disconnect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Disconnect.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Disconnect();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.error = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Disconnect message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Disconnect} Disconnect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Disconnect.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Disconnect message.
                     * @function verify
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Disconnect.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.error != null && message.hasOwnProperty("error"))
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Disconnect} Disconnect
                     */
                    Disconnect.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Disconnect)
                            return object;
                        var message = new $root.replit.goval.api.Disconnect();
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Disconnect message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Disconnect
                     * @static
                     * @param {replit.goval.api.Disconnect} message Disconnect
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Disconnect.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.error = "";
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = message.error;
                        return object;
                    };
    
                    /**
                     * Converts this Disconnect to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Disconnect
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Disconnect.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Disconnect;
                })();
    
                api.Send = (function() {
    
                    /**
                     * Properties of a Send.
                     * @memberof replit.goval.api
                     * @interface ISend
                     * @property {Uint8Array|null} [buff] Send buff
                     */
    
                    /**
                     * Constructs a new Send.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Send.
                     * @constructor
                     * @param {replit.goval.api.ISend=} [properties] Properties to set
                     */
                    function Send(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Send buff.
                     * @member {Uint8Array} buff
                     * @memberof replit.goval.api.Send
                     * @instance
                     */
                    Send.prototype.buff = $util.newBuffer([]);
    
                    /**
                     * Creates a new Send instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {replit.goval.api.ISend=} [properties] Properties to set
                     * @returns {replit.goval.api.Send} Send instance
                     */
                    Send.create = function create(properties) {
                        return Send.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Send message. Does not implicitly {@link replit.goval.api.Send.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {replit.goval.api.Send} message Send message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Send.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.buff != null && Object.hasOwnProperty.call(message, "buff"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.buff);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Send message, length delimited. Does not implicitly {@link replit.goval.api.Send.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {replit.goval.api.Send} message Send message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Send.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Send message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Send} Send
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Send.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Send();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.buff = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Send message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Send} Send
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Send.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Send message.
                     * @function verify
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Send.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.buff != null && message.hasOwnProperty("buff"))
                            if (!(message.buff && typeof message.buff.length === "number" || $util.isString(message.buff)))
                                return "buff: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Send message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Send} Send
                     */
                    Send.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Send)
                            return object;
                        var message = new $root.replit.goval.api.Send();
                        if (object.buff != null)
                            if (typeof object.buff === "string")
                                $util.base64.decode(object.buff, message.buff = $util.newBuffer($util.base64.length(object.buff)), 0);
                            else if (object.buff.length)
                                message.buff = object.buff;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Send message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Send
                     * @static
                     * @param {replit.goval.api.Send} message Send
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Send.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.buff = "";
                            else {
                                object.buff = [];
                                if (options.bytes !== Array)
                                    object.buff = $util.newBuffer(object.buff);
                            }
                        if (message.buff != null && message.hasOwnProperty("buff"))
                            object.buff = options.bytes === String ? $util.base64.encode(message.buff, 0, message.buff.length) : options.bytes === Array ? Array.prototype.slice.call(message.buff) : message.buff;
                        return object;
                    };
    
                    /**
                     * Converts this Send to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Send
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Send.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Send;
                })();
    
                api.Recv = (function() {
    
                    /**
                     * Properties of a Recv.
                     * @memberof replit.goval.api
                     * @interface IRecv
                     * @property {Uint8Array|null} [buff] Recv buff
                     */
    
                    /**
                     * Constructs a new Recv.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Recv.
                     * @constructor
                     * @param {replit.goval.api.IRecv=} [properties] Properties to set
                     */
                    function Recv(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Recv buff.
                     * @member {Uint8Array} buff
                     * @memberof replit.goval.api.Recv
                     * @instance
                     */
                    Recv.prototype.buff = $util.newBuffer([]);
    
                    /**
                     * Creates a new Recv instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {replit.goval.api.IRecv=} [properties] Properties to set
                     * @returns {replit.goval.api.Recv} Recv instance
                     */
                    Recv.create = function create(properties) {
                        return Recv.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Recv message. Does not implicitly {@link replit.goval.api.Recv.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {replit.goval.api.Recv} message Recv message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Recv.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.buff != null && Object.hasOwnProperty.call(message, "buff"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.buff);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Recv message, length delimited. Does not implicitly {@link replit.goval.api.Recv.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {replit.goval.api.Recv} message Recv message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Recv.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Recv message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Recv} Recv
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Recv.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Recv();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.buff = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Recv message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Recv} Recv
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Recv.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Recv message.
                     * @function verify
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Recv.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.buff != null && message.hasOwnProperty("buff"))
                            if (!(message.buff && typeof message.buff.length === "number" || $util.isString(message.buff)))
                                return "buff: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Recv message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Recv} Recv
                     */
                    Recv.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Recv)
                            return object;
                        var message = new $root.replit.goval.api.Recv();
                        if (object.buff != null)
                            if (typeof object.buff === "string")
                                $util.base64.decode(object.buff, message.buff = $util.newBuffer($util.base64.length(object.buff)), 0);
                            else if (object.buff.length)
                                message.buff = object.buff;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Recv message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Recv
                     * @static
                     * @param {replit.goval.api.Recv} message Recv
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Recv.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.buff = "";
                            else {
                                object.buff = [];
                                if (options.bytes !== Array)
                                    object.buff = $util.newBuffer(object.buff);
                            }
                        if (message.buff != null && message.hasOwnProperty("buff"))
                            object.buff = options.bytes === String ? $util.base64.encode(message.buff, 0, message.buff.length) : options.bytes === Array ? Array.prototype.slice.call(message.buff) : message.buff;
                        return object;
                    };
    
                    /**
                     * Converts this Recv to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Recv
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Recv.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Recv;
                })();
    
                api.Connect = (function() {
    
                    /**
                     * Properties of a Connect.
                     * @memberof replit.goval.api
                     * @interface IConnect
                     * @property {string|null} [proto] Connect proto
                     * @property {string|null} [addr] Connect addr
                     */
    
                    /**
                     * Constructs a new Connect.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Connect.
                     * @constructor
                     * @param {replit.goval.api.IConnect=} [properties] Properties to set
                     */
                    function Connect(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Connect proto.
                     * @member {string} proto
                     * @memberof replit.goval.api.Connect
                     * @instance
                     */
                    Connect.prototype.proto = "";
    
                    /**
                     * Connect addr.
                     * @member {string} addr
                     * @memberof replit.goval.api.Connect
                     * @instance
                     */
                    Connect.prototype.addr = "";
    
                    /**
                     * Creates a new Connect instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {replit.goval.api.IConnect=} [properties] Properties to set
                     * @returns {replit.goval.api.Connect} Connect instance
                     */
                    Connect.create = function create(properties) {
                        return Connect.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Connect message. Does not implicitly {@link replit.goval.api.Connect.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {replit.goval.api.Connect} message Connect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Connect.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.proto != null && Object.hasOwnProperty.call(message, "proto"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.proto);
                        if (message.addr != null && Object.hasOwnProperty.call(message, "addr"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.addr);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Connect message, length delimited. Does not implicitly {@link replit.goval.api.Connect.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {replit.goval.api.Connect} message Connect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Connect.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Connect message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Connect} Connect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Connect.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Connect();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.proto = reader.string();
                                break;
                            case 2:
                                message.addr = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Connect message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Connect} Connect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Connect.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Connect message.
                     * @function verify
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Connect.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.proto != null && message.hasOwnProperty("proto"))
                            if (!$util.isString(message.proto))
                                return "proto: string expected";
                        if (message.addr != null && message.hasOwnProperty("addr"))
                            if (!$util.isString(message.addr))
                                return "addr: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Connect message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Connect} Connect
                     */
                    Connect.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Connect)
                            return object;
                        var message = new $root.replit.goval.api.Connect();
                        if (object.proto != null)
                            message.proto = String(object.proto);
                        if (object.addr != null)
                            message.addr = String(object.addr);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Connect message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Connect
                     * @static
                     * @param {replit.goval.api.Connect} message Connect
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Connect.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.proto = "";
                            object.addr = "";
                        }
                        if (message.proto != null && message.hasOwnProperty("proto"))
                            object.proto = message.proto;
                        if (message.addr != null && message.hasOwnProperty("addr"))
                            object.addr = message.addr;
                        return object;
                    };
    
                    /**
                     * Converts this Connect to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Connect
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Connect.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Connect;
                })();
    
                api.Hint = (function() {
    
                    /**
                     * Properties of a Hint.
                     * @memberof replit.goval.api
                     * @interface IHint
                     * @property {string|null} [text] Hint text
                     */
    
                    /**
                     * Constructs a new Hint.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Hint.
                     * @constructor
                     * @param {replit.goval.api.IHint=} [properties] Properties to set
                     */
                    function Hint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hint text.
                     * @member {string} text
                     * @memberof replit.goval.api.Hint
                     * @instance
                     */
                    Hint.prototype.text = "";
    
                    /**
                     * Creates a new Hint instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {replit.goval.api.IHint=} [properties] Properties to set
                     * @returns {replit.goval.api.Hint} Hint instance
                     */
                    Hint.create = function create(properties) {
                        return Hint.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Hint message. Does not implicitly {@link replit.goval.api.Hint.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {replit.goval.api.Hint} message Hint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hint message, length delimited. Does not implicitly {@link replit.goval.api.Hint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {replit.goval.api.Hint} message Hint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hint message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Hint} Hint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Hint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Hint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Hint} Hint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hint message.
                     * @function verify
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Hint} Hint
                     */
                    Hint.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Hint)
                            return object;
                        var message = new $root.replit.goval.api.Hint();
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Hint
                     * @static
                     * @param {replit.goval.api.Hint} message Hint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.text = "";
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this Hint to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Hint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Hint;
                })();
    
                api.Ping = (function() {
    
                    /**
                     * Properties of a Ping.
                     * @memberof replit.goval.api
                     * @interface IPing
                     */
    
                    /**
                     * Constructs a new Ping.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Ping.
                     * @constructor
                     * @param {replit.goval.api.IPing=} [properties] Properties to set
                     */
                    function Ping(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new Ping instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {replit.goval.api.IPing=} [properties] Properties to set
                     * @returns {replit.goval.api.Ping} Ping instance
                     */
                    Ping.create = function create(properties) {
                        return Ping.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Ping message. Does not implicitly {@link replit.goval.api.Ping.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {replit.goval.api.Ping} message Ping message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Ping.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Ping message, length delimited. Does not implicitly {@link replit.goval.api.Ping.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {replit.goval.api.Ping} message Ping message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Ping.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Ping message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Ping} Ping
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Ping.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Ping();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Ping message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Ping} Ping
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Ping.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Ping message.
                     * @function verify
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Ping.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a Ping message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Ping} Ping
                     */
                    Ping.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Ping)
                            return object;
                        return new $root.replit.goval.api.Ping();
                    };
    
                    /**
                     * Creates a plain object from a Ping message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Ping
                     * @static
                     * @param {replit.goval.api.Ping} message Ping
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Ping.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this Ping to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Ping
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Ping.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Ping;
                })();
    
                api.Pong = (function() {
    
                    /**
                     * Properties of a Pong.
                     * @memberof replit.goval.api
                     * @interface IPong
                     */
    
                    /**
                     * Constructs a new Pong.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Pong.
                     * @constructor
                     * @param {replit.goval.api.IPong=} [properties] Properties to set
                     */
                    function Pong(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new Pong instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {replit.goval.api.IPong=} [properties] Properties to set
                     * @returns {replit.goval.api.Pong} Pong instance
                     */
                    Pong.create = function create(properties) {
                        return Pong.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Pong message. Does not implicitly {@link replit.goval.api.Pong.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {replit.goval.api.Pong} message Pong message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pong.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Pong message, length delimited. Does not implicitly {@link replit.goval.api.Pong.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {replit.goval.api.Pong} message Pong message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pong.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Pong message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Pong} Pong
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pong.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Pong();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Pong message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Pong} Pong
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pong.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Pong message.
                     * @function verify
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pong.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a Pong message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Pong} Pong
                     */
                    Pong.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Pong)
                            return object;
                        return new $root.replit.goval.api.Pong();
                    };
    
                    /**
                     * Creates a plain object from a Pong message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Pong
                     * @static
                     * @param {replit.goval.api.Pong} message Pong
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pong.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this Pong to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Pong
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pong.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Pong;
                })();
    
                api.Hello = (function() {
    
                    /**
                     * Properties of a Hello.
                     * @memberof replit.goval.api
                     * @interface IHello
                     * @property {number|null} [userid] Hello userid
                     * @property {string|null} [username] Hello username
                     * @property {string|null} [token] Hello token
                     */
    
                    /**
                     * Constructs a new Hello.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Hello.
                     * @constructor
                     * @param {replit.goval.api.IHello=} [properties] Properties to set
                     */
                    function Hello(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hello userid.
                     * @member {number} userid
                     * @memberof replit.goval.api.Hello
                     * @instance
                     */
                    Hello.prototype.userid = 0;
    
                    /**
                     * Hello username.
                     * @member {string} username
                     * @memberof replit.goval.api.Hello
                     * @instance
                     */
                    Hello.prototype.username = "";
    
                    /**
                     * Hello token.
                     * @member {string} token
                     * @memberof replit.goval.api.Hello
                     * @instance
                     */
                    Hello.prototype.token = "";
    
                    /**
                     * Creates a new Hello instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {replit.goval.api.IHello=} [properties] Properties to set
                     * @returns {replit.goval.api.Hello} Hello instance
                     */
                    Hello.create = function create(properties) {
                        return Hello.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Hello message. Does not implicitly {@link replit.goval.api.Hello.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {replit.goval.api.Hello} message Hello message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hello.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.userid != null && Object.hasOwnProperty.call(message, "userid"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userid);
                        if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.username);
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.token);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hello message, length delimited. Does not implicitly {@link replit.goval.api.Hello.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {replit.goval.api.Hello} message Hello message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hello.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hello message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Hello} Hello
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hello.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Hello();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.userid = reader.uint32();
                                break;
                            case 2:
                                message.username = reader.string();
                                break;
                            case 3:
                                message.token = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Hello message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Hello} Hello
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hello.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hello message.
                     * @function verify
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hello.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.userid != null && message.hasOwnProperty("userid"))
                            if (!$util.isInteger(message.userid))
                                return "userid: integer expected";
                        if (message.username != null && message.hasOwnProperty("username"))
                            if (!$util.isString(message.username))
                                return "username: string expected";
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hello message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Hello} Hello
                     */
                    Hello.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Hello)
                            return object;
                        var message = new $root.replit.goval.api.Hello();
                        if (object.userid != null)
                            message.userid = object.userid >>> 0;
                        if (object.username != null)
                            message.username = String(object.username);
                        if (object.token != null)
                            message.token = String(object.token);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hello message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Hello
                     * @static
                     * @param {replit.goval.api.Hello} message Hello
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hello.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.userid = 0;
                            object.username = "";
                            object.token = "";
                        }
                        if (message.userid != null && message.hasOwnProperty("userid"))
                            object.userid = message.userid;
                        if (message.username != null && message.hasOwnProperty("username"))
                            object.username = message.username;
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        return object;
                    };
    
                    /**
                     * Converts this Hello to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Hello
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hello.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Hello;
                })();
    
                api.Goodbye = (function() {
    
                    /**
                     * Properties of a Goodbye.
                     * @memberof replit.goval.api
                     * @interface IGoodbye
                     */
    
                    /**
                     * Constructs a new Goodbye.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Goodbye.
                     * @constructor
                     * @param {replit.goval.api.IGoodbye=} [properties] Properties to set
                     */
                    function Goodbye(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new Goodbye instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {replit.goval.api.IGoodbye=} [properties] Properties to set
                     * @returns {replit.goval.api.Goodbye} Goodbye instance
                     */
                    Goodbye.create = function create(properties) {
                        return Goodbye.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Goodbye message. Does not implicitly {@link replit.goval.api.Goodbye.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {replit.goval.api.Goodbye} message Goodbye message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Goodbye.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Goodbye message, length delimited. Does not implicitly {@link replit.goval.api.Goodbye.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {replit.goval.api.Goodbye} message Goodbye message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Goodbye.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Goodbye message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Goodbye} Goodbye
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Goodbye.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Goodbye();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Goodbye message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Goodbye} Goodbye
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Goodbye.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Goodbye message.
                     * @function verify
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Goodbye.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a Goodbye message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Goodbye} Goodbye
                     */
                    Goodbye.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Goodbye)
                            return object;
                        return new $root.replit.goval.api.Goodbye();
                    };
    
                    /**
                     * Creates a plain object from a Goodbye message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Goodbye
                     * @static
                     * @param {replit.goval.api.Goodbye} message Goodbye
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Goodbye.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this Goodbye to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Goodbye
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Goodbye.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Goodbye;
                })();
    
                /**
                 * State enum.
                 * @name replit.goval.api.State
                 * @enum {number}
                 * @property {number} Stopped=0 Stopped value
                 * @property {number} Running=1 Running value
                 */
                api.State = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "Stopped"] = 0;
                    values[valuesById[1] = "Running"] = 1;
                    return values;
                })();
    
                api.CheckChanges = (function() {
    
                    /**
                     * Properties of a CheckChanges.
                     * @memberof replit.goval.api
                     * @interface ICheckChanges
                     */
    
                    /**
                     * Constructs a new CheckChanges.
                     * @memberof replit.goval.api
                     * @classdesc Represents a CheckChanges.
                     * @constructor
                     * @param {replit.goval.api.ICheckChanges=} [properties] Properties to set
                     */
                    function CheckChanges(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new CheckChanges instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {replit.goval.api.ICheckChanges=} [properties] Properties to set
                     * @returns {replit.goval.api.CheckChanges} CheckChanges instance
                     */
                    CheckChanges.create = function create(properties) {
                        return CheckChanges.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified CheckChanges message. Does not implicitly {@link replit.goval.api.CheckChanges.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {replit.goval.api.CheckChanges} message CheckChanges message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckChanges.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CheckChanges message, length delimited. Does not implicitly {@link replit.goval.api.CheckChanges.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {replit.goval.api.CheckChanges} message CheckChanges message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CheckChanges.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CheckChanges message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.CheckChanges} CheckChanges
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckChanges.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.CheckChanges();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CheckChanges message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.CheckChanges} CheckChanges
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CheckChanges.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CheckChanges message.
                     * @function verify
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CheckChanges.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a CheckChanges message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.CheckChanges} CheckChanges
                     */
                    CheckChanges.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.CheckChanges)
                            return object;
                        return new $root.replit.goval.api.CheckChanges();
                    };
    
                    /**
                     * Creates a plain object from a CheckChanges message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.CheckChanges
                     * @static
                     * @param {replit.goval.api.CheckChanges} message CheckChanges
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CheckChanges.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this CheckChanges to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.CheckChanges
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CheckChanges.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CheckChanges;
                })();
    
                api.EnsurePackages = (function() {
    
                    /**
                     * Properties of an EnsurePackages.
                     * @memberof replit.goval.api
                     * @interface IEnsurePackages
                     * @property {boolean|null} [install] EnsurePackages install
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [file] EnsurePackages file
                     */
    
                    /**
                     * Constructs a new EnsurePackages.
                     * @memberof replit.goval.api
                     * @classdesc Represents an EnsurePackages.
                     * @constructor
                     * @param {replit.goval.api.IEnsurePackages=} [properties] Properties to set
                     */
                    function EnsurePackages(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnsurePackages install.
                     * @member {boolean} install
                     * @memberof replit.goval.api.EnsurePackages
                     * @instance
                     */
                    EnsurePackages.prototype.install = false;
    
                    /**
                     * EnsurePackages file.
                     * @member {replit.goval.api.File|null|undefined} file
                     * @memberof replit.goval.api.EnsurePackages
                     * @instance
                     */
                    EnsurePackages.prototype.file = null;
    
                    /**
                     * Creates a new EnsurePackages instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {replit.goval.api.IEnsurePackages=} [properties] Properties to set
                     * @returns {replit.goval.api.EnsurePackages} EnsurePackages instance
                     */
                    EnsurePackages.create = function create(properties) {
                        return EnsurePackages.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified EnsurePackages message. Does not implicitly {@link replit.goval.api.EnsurePackages.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {replit.goval.api.EnsurePackages} message EnsurePackages message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnsurePackages.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.install != null && Object.hasOwnProperty.call(message, "install"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.install);
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            $root.replit.goval.api.File.encode(message.file, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnsurePackages message, length delimited. Does not implicitly {@link replit.goval.api.EnsurePackages.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {replit.goval.api.EnsurePackages} message EnsurePackages message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnsurePackages.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnsurePackages message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.EnsurePackages} EnsurePackages
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnsurePackages.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.EnsurePackages();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.install = reader.bool();
                                break;
                            case 2:
                                message.file = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnsurePackages message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.EnsurePackages} EnsurePackages
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnsurePackages.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnsurePackages message.
                     * @function verify
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnsurePackages.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.install != null && message.hasOwnProperty("install"))
                            if (typeof message.install !== "boolean")
                                return "install: boolean expected";
                        if (message.file != null && message.hasOwnProperty("file")) {
                            var error = $root.replit.goval.api.File.verify(message.file);
                            if (error)
                                return "file." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an EnsurePackages message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.EnsurePackages} EnsurePackages
                     */
                    EnsurePackages.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.EnsurePackages)
                            return object;
                        var message = new $root.replit.goval.api.EnsurePackages();
                        if (object.install != null)
                            message.install = Boolean(object.install);
                        if (object.file != null) {
                            if (typeof object.file !== "object")
                                throw TypeError(".replit.goval.api.EnsurePackages.file: object expected");
                            message.file = $root.replit.goval.api.File.fromObject(object.file);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnsurePackages message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.EnsurePackages
                     * @static
                     * @param {replit.goval.api.EnsurePackages} message EnsurePackages
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnsurePackages.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.install = false;
                            object.file = null;
                        }
                        if (message.install != null && message.hasOwnProperty("install"))
                            object.install = message.install;
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = $root.replit.goval.api.File.toObject(message.file, options);
                        return object;
                    };
    
                    /**
                     * Converts this EnsurePackages to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.EnsurePackages
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnsurePackages.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EnsurePackages;
                })();
    
                api.Start = (function() {
    
                    /**
                     * Properties of a Start.
                     * @memberof replit.goval.api
                     * @interface IStart
                     */
    
                    /**
                     * Constructs a new Start.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Start.
                     * @constructor
                     * @param {replit.goval.api.IStart=} [properties] Properties to set
                     */
                    function Start(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new Start instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {replit.goval.api.IStart=} [properties] Properties to set
                     * @returns {replit.goval.api.Start} Start instance
                     */
                    Start.create = function create(properties) {
                        return Start.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Start message. Does not implicitly {@link replit.goval.api.Start.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {replit.goval.api.Start} message Start message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Start.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Start message, length delimited. Does not implicitly {@link replit.goval.api.Start.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {replit.goval.api.Start} message Start message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Start.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Start message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Start} Start
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Start.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Start();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Start message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Start} Start
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Start.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Start message.
                     * @function verify
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Start.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a Start message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Start} Start
                     */
                    Start.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Start)
                            return object;
                        return new $root.replit.goval.api.Start();
                    };
    
                    /**
                     * Creates a plain object from a Start message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Start
                     * @static
                     * @param {replit.goval.api.Start} message Start
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Start.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this Start to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Start
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Start.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Start;
                })();
    
                api.DebugStatus = (function() {
    
                    /**
                     * Properties of a DebugStatus.
                     * @memberof replit.goval.api
                     * @interface IDebugStatus
                     * @property {boolean|null} [done] DebugStatus done
                     * @property {Array.<replit.goval.api.StackFrame|replit.goval.api.IStackFrame>|null} [stack] DebugStatus stack
                     */
    
                    /**
                     * Constructs a new DebugStatus.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugStatus.
                     * @constructor
                     * @param {replit.goval.api.IDebugStatus=} [properties] Properties to set
                     */
                    function DebugStatus(properties) {
                        this.stack = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugStatus done.
                     * @member {boolean} done
                     * @memberof replit.goval.api.DebugStatus
                     * @instance
                     */
                    DebugStatus.prototype.done = false;
    
                    /**
                     * DebugStatus stack.
                     * @member {Array.<replit.goval.api.StackFrame>} stack
                     * @memberof replit.goval.api.DebugStatus
                     * @instance
                     */
                    DebugStatus.prototype.stack = $util.emptyArray;
    
                    /**
                     * Creates a new DebugStatus instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {replit.goval.api.IDebugStatus=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugStatus} DebugStatus instance
                     */
                    DebugStatus.create = function create(properties) {
                        return DebugStatus.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugStatus message. Does not implicitly {@link replit.goval.api.DebugStatus.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {replit.goval.api.DebugStatus} message DebugStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugStatus.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.done);
                        if (message.stack != null && message.stack.length)
                            for (var i = 0; i < message.stack.length; ++i)
                                $root.replit.goval.api.StackFrame.encode(message.stack[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugStatus message, length delimited. Does not implicitly {@link replit.goval.api.DebugStatus.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {replit.goval.api.DebugStatus} message DebugStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugStatus.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugStatus message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugStatus} DebugStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugStatus.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugStatus();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.done = reader.bool();
                                break;
                            case 2:
                                if (!(message.stack && message.stack.length))
                                    message.stack = [];
                                message.stack.push($root.replit.goval.api.StackFrame.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugStatus message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugStatus} DebugStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugStatus.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugStatus message.
                     * @function verify
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugStatus.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.done != null && message.hasOwnProperty("done"))
                            if (typeof message.done !== "boolean")
                                return "done: boolean expected";
                        if (message.stack != null && message.hasOwnProperty("stack")) {
                            if (!Array.isArray(message.stack))
                                return "stack: array expected";
                            for (var i = 0; i < message.stack.length; ++i) {
                                var error = $root.replit.goval.api.StackFrame.verify(message.stack[i]);
                                if (error)
                                    return "stack." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebugStatus message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugStatus} DebugStatus
                     */
                    DebugStatus.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugStatus)
                            return object;
                        var message = new $root.replit.goval.api.DebugStatus();
                        if (object.done != null)
                            message.done = Boolean(object.done);
                        if (object.stack) {
                            if (!Array.isArray(object.stack))
                                throw TypeError(".replit.goval.api.DebugStatus.stack: array expected");
                            message.stack = [];
                            for (var i = 0; i < object.stack.length; ++i) {
                                if (typeof object.stack[i] !== "object")
                                    throw TypeError(".replit.goval.api.DebugStatus.stack: object expected");
                                message.stack[i] = $root.replit.goval.api.StackFrame.fromObject(object.stack[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugStatus message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugStatus
                     * @static
                     * @param {replit.goval.api.DebugStatus} message DebugStatus
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugStatus.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.stack = [];
                        if (options.defaults)
                            object.done = false;
                        if (message.done != null && message.hasOwnProperty("done"))
                            object.done = message.done;
                        if (message.stack && message.stack.length) {
                            object.stack = [];
                            for (var j = 0; j < message.stack.length; ++j)
                                object.stack[j] = $root.replit.goval.api.StackFrame.toObject(message.stack[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DebugStatus to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugStatus
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugStatus.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugStatus;
                })();
    
                api.StackFrame = (function() {
    
                    /**
                     * Properties of a StackFrame.
                     * @memberof replit.goval.api
                     * @interface IStackFrame
                     * @property {string|null} ["function"] StackFrame function
                     * @property {number|null} [line] StackFrame line
                     */
    
                    /**
                     * Constructs a new StackFrame.
                     * @memberof replit.goval.api
                     * @classdesc Represents a StackFrame.
                     * @constructor
                     * @param {replit.goval.api.IStackFrame=} [properties] Properties to set
                     */
                    function StackFrame(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StackFrame function.
                     * @member {string} function
                     * @memberof replit.goval.api.StackFrame
                     * @instance
                     */
                    StackFrame.prototype["function"] = "";
    
                    /**
                     * StackFrame line.
                     * @member {number} line
                     * @memberof replit.goval.api.StackFrame
                     * @instance
                     */
                    StackFrame.prototype.line = 0;
    
                    /**
                     * Creates a new StackFrame instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {replit.goval.api.IStackFrame=} [properties] Properties to set
                     * @returns {replit.goval.api.StackFrame} StackFrame instance
                     */
                    StackFrame.create = function create(properties) {
                        return StackFrame.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified StackFrame message. Does not implicitly {@link replit.goval.api.StackFrame.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {replit.goval.api.StackFrame} message StackFrame message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StackFrame.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message["function"] != null && Object.hasOwnProperty.call(message, "function"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message["function"]);
                        if (message.line != null && Object.hasOwnProperty.call(message, "line"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.line);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StackFrame message, length delimited. Does not implicitly {@link replit.goval.api.StackFrame.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {replit.goval.api.StackFrame} message StackFrame message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StackFrame.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StackFrame message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.StackFrame} StackFrame
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StackFrame.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.StackFrame();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message["function"] = reader.string();
                                break;
                            case 2:
                                message.line = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StackFrame message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.StackFrame} StackFrame
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StackFrame.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StackFrame message.
                     * @function verify
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StackFrame.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message["function"] != null && message.hasOwnProperty("function"))
                            if (!$util.isString(message["function"]))
                                return "function: string expected";
                        if (message.line != null && message.hasOwnProperty("line"))
                            if (!$util.isInteger(message.line))
                                return "line: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a StackFrame message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.StackFrame} StackFrame
                     */
                    StackFrame.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.StackFrame)
                            return object;
                        var message = new $root.replit.goval.api.StackFrame();
                        if (object["function"] != null)
                            message["function"] = String(object["function"]);
                        if (object.line != null)
                            message.line = object.line >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StackFrame message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.StackFrame
                     * @static
                     * @param {replit.goval.api.StackFrame} message StackFrame
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StackFrame.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object["function"] = "";
                            object.line = 0;
                        }
                        if (message["function"] != null && message.hasOwnProperty("function"))
                            object["function"] = message["function"];
                        if (message.line != null && message.hasOwnProperty("line"))
                            object.line = message.line;
                        return object;
                    };
    
                    /**
                     * Converts this StackFrame to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.StackFrame
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StackFrame.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StackFrame;
                })();
    
                api.ContainedTest = (function() {
    
                    /**
                     * Properties of a ContainedTest.
                     * @memberof replit.goval.api
                     * @interface IContainedTest
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [suite] ContainedTest suite
                     * @property {Array.<replit.goval.api.File|replit.goval.api.IFile>|null} [project] ContainedTest project
                     */
    
                    /**
                     * Constructs a new ContainedTest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ContainedTest.
                     * @constructor
                     * @param {replit.goval.api.IContainedTest=} [properties] Properties to set
                     */
                    function ContainedTest(properties) {
                        this.project = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ContainedTest suite.
                     * @member {replit.goval.api.File|null|undefined} suite
                     * @memberof replit.goval.api.ContainedTest
                     * @instance
                     */
                    ContainedTest.prototype.suite = null;
    
                    /**
                     * ContainedTest project.
                     * @member {Array.<replit.goval.api.File>} project
                     * @memberof replit.goval.api.ContainedTest
                     * @instance
                     */
                    ContainedTest.prototype.project = $util.emptyArray;
    
                    /**
                     * Creates a new ContainedTest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {replit.goval.api.IContainedTest=} [properties] Properties to set
                     * @returns {replit.goval.api.ContainedTest} ContainedTest instance
                     */
                    ContainedTest.create = function create(properties) {
                        return ContainedTest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ContainedTest message. Does not implicitly {@link replit.goval.api.ContainedTest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {replit.goval.api.ContainedTest} message ContainedTest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContainedTest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.suite != null && Object.hasOwnProperty.call(message, "suite"))
                            $root.replit.goval.api.File.encode(message.suite, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.project != null && message.project.length)
                            for (var i = 0; i < message.project.length; ++i)
                                $root.replit.goval.api.File.encode(message.project[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ContainedTest message, length delimited. Does not implicitly {@link replit.goval.api.ContainedTest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {replit.goval.api.ContainedTest} message ContainedTest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContainedTest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ContainedTest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ContainedTest} ContainedTest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContainedTest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ContainedTest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.suite = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.project && message.project.length))
                                    message.project = [];
                                message.project.push($root.replit.goval.api.File.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ContainedTest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ContainedTest} ContainedTest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContainedTest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ContainedTest message.
                     * @function verify
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ContainedTest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.suite != null && message.hasOwnProperty("suite")) {
                            var error = $root.replit.goval.api.File.verify(message.suite);
                            if (error)
                                return "suite." + error;
                        }
                        if (message.project != null && message.hasOwnProperty("project")) {
                            if (!Array.isArray(message.project))
                                return "project: array expected";
                            for (var i = 0; i < message.project.length; ++i) {
                                var error = $root.replit.goval.api.File.verify(message.project[i]);
                                if (error)
                                    return "project." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ContainedTest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ContainedTest} ContainedTest
                     */
                    ContainedTest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ContainedTest)
                            return object;
                        var message = new $root.replit.goval.api.ContainedTest();
                        if (object.suite != null) {
                            if (typeof object.suite !== "object")
                                throw TypeError(".replit.goval.api.ContainedTest.suite: object expected");
                            message.suite = $root.replit.goval.api.File.fromObject(object.suite);
                        }
                        if (object.project) {
                            if (!Array.isArray(object.project))
                                throw TypeError(".replit.goval.api.ContainedTest.project: array expected");
                            message.project = [];
                            for (var i = 0; i < object.project.length; ++i) {
                                if (typeof object.project[i] !== "object")
                                    throw TypeError(".replit.goval.api.ContainedTest.project: object expected");
                                message.project[i] = $root.replit.goval.api.File.fromObject(object.project[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ContainedTest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ContainedTest
                     * @static
                     * @param {replit.goval.api.ContainedTest} message ContainedTest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ContainedTest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.project = [];
                        if (options.defaults)
                            object.suite = null;
                        if (message.suite != null && message.hasOwnProperty("suite"))
                            object.suite = $root.replit.goval.api.File.toObject(message.suite, options);
                        if (message.project && message.project.length) {
                            object.project = [];
                            for (var j = 0; j < message.project.length; ++j)
                                object.project[j] = $root.replit.goval.api.File.toObject(message.project[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ContainedTest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ContainedTest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ContainedTest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ContainedTest;
                })();
    
                api.TestResult = (function() {
    
                    /**
                     * Properties of a TestResult.
                     * @memberof replit.goval.api
                     * @interface ITestResult
                     * @property {boolean|null} [passed] TestResult passed
                     * @property {string|null} [stderr] TestResult stderr
                     * @property {Array.<replit.goval.api.TestFailure|replit.goval.api.ITestFailure>|null} [fails] TestResult fails
                     */
    
                    /**
                     * Constructs a new TestResult.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TestResult.
                     * @constructor
                     * @param {replit.goval.api.ITestResult=} [properties] Properties to set
                     */
                    function TestResult(properties) {
                        this.fails = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestResult passed.
                     * @member {boolean} passed
                     * @memberof replit.goval.api.TestResult
                     * @instance
                     */
                    TestResult.prototype.passed = false;
    
                    /**
                     * TestResult stderr.
                     * @member {string} stderr
                     * @memberof replit.goval.api.TestResult
                     * @instance
                     */
                    TestResult.prototype.stderr = "";
    
                    /**
                     * TestResult fails.
                     * @member {Array.<replit.goval.api.TestFailure>} fails
                     * @memberof replit.goval.api.TestResult
                     * @instance
                     */
                    TestResult.prototype.fails = $util.emptyArray;
    
                    /**
                     * Creates a new TestResult instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {replit.goval.api.ITestResult=} [properties] Properties to set
                     * @returns {replit.goval.api.TestResult} TestResult instance
                     */
                    TestResult.create = function create(properties) {
                        return TestResult.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TestResult message. Does not implicitly {@link replit.goval.api.TestResult.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {replit.goval.api.TestResult} message TestResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestResult.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.passed != null && Object.hasOwnProperty.call(message, "passed"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.passed);
                        if (message.stderr != null && Object.hasOwnProperty.call(message, "stderr"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.stderr);
                        if (message.fails != null && message.fails.length)
                            for (var i = 0; i < message.fails.length; ++i)
                                $root.replit.goval.api.TestFailure.encode(message.fails[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestResult message, length delimited. Does not implicitly {@link replit.goval.api.TestResult.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {replit.goval.api.TestResult} message TestResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestResult.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TestResult} TestResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestResult.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TestResult();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.passed = reader.bool();
                                break;
                            case 2:
                                message.stderr = reader.string();
                                break;
                            case 3:
                                if (!(message.fails && message.fails.length))
                                    message.fails = [];
                                message.fails.push($root.replit.goval.api.TestFailure.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestResult message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TestResult} TestResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestResult.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestResult message.
                     * @function verify
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestResult.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.passed != null && message.hasOwnProperty("passed"))
                            if (typeof message.passed !== "boolean")
                                return "passed: boolean expected";
                        if (message.stderr != null && message.hasOwnProperty("stderr"))
                            if (!$util.isString(message.stderr))
                                return "stderr: string expected";
                        if (message.fails != null && message.hasOwnProperty("fails")) {
                            if (!Array.isArray(message.fails))
                                return "fails: array expected";
                            for (var i = 0; i < message.fails.length; ++i) {
                                var error = $root.replit.goval.api.TestFailure.verify(message.fails[i]);
                                if (error)
                                    return "fails." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TestResult message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TestResult} TestResult
                     */
                    TestResult.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TestResult)
                            return object;
                        var message = new $root.replit.goval.api.TestResult();
                        if (object.passed != null)
                            message.passed = Boolean(object.passed);
                        if (object.stderr != null)
                            message.stderr = String(object.stderr);
                        if (object.fails) {
                            if (!Array.isArray(object.fails))
                                throw TypeError(".replit.goval.api.TestResult.fails: array expected");
                            message.fails = [];
                            for (var i = 0; i < object.fails.length; ++i) {
                                if (typeof object.fails[i] !== "object")
                                    throw TypeError(".replit.goval.api.TestResult.fails: object expected");
                                message.fails[i] = $root.replit.goval.api.TestFailure.fromObject(object.fails[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestResult message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TestResult
                     * @static
                     * @param {replit.goval.api.TestResult} message TestResult
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestResult.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.fails = [];
                        if (options.defaults) {
                            object.passed = false;
                            object.stderr = "";
                        }
                        if (message.passed != null && message.hasOwnProperty("passed"))
                            object.passed = message.passed;
                        if (message.stderr != null && message.hasOwnProperty("stderr"))
                            object.stderr = message.stderr;
                        if (message.fails && message.fails.length) {
                            object.fails = [];
                            for (var j = 0; j < message.fails.length; ++j)
                                object.fails[j] = $root.replit.goval.api.TestFailure.toObject(message.fails[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this TestResult to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TestResult
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestResult.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestResult;
                })();
    
                api.TestFailure = (function() {
    
                    /**
                     * Properties of a TestFailure.
                     * @memberof replit.goval.api
                     * @interface ITestFailure
                     * @property {string|null} [name] TestFailure name
                     * @property {string|null} [trace] TestFailure trace
                     */
    
                    /**
                     * Constructs a new TestFailure.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TestFailure.
                     * @constructor
                     * @param {replit.goval.api.ITestFailure=} [properties] Properties to set
                     */
                    function TestFailure(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TestFailure name.
                     * @member {string} name
                     * @memberof replit.goval.api.TestFailure
                     * @instance
                     */
                    TestFailure.prototype.name = "";
    
                    /**
                     * TestFailure trace.
                     * @member {string} trace
                     * @memberof replit.goval.api.TestFailure
                     * @instance
                     */
                    TestFailure.prototype.trace = "";
    
                    /**
                     * Creates a new TestFailure instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {replit.goval.api.ITestFailure=} [properties] Properties to set
                     * @returns {replit.goval.api.TestFailure} TestFailure instance
                     */
                    TestFailure.create = function create(properties) {
                        return TestFailure.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TestFailure message. Does not implicitly {@link replit.goval.api.TestFailure.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {replit.goval.api.TestFailure} message TestFailure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestFailure.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.trace != null && Object.hasOwnProperty.call(message, "trace"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.trace);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TestFailure message, length delimited. Does not implicitly {@link replit.goval.api.TestFailure.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {replit.goval.api.TestFailure} message TestFailure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TestFailure.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TestFailure message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TestFailure} TestFailure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestFailure.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TestFailure();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.trace = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TestFailure message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TestFailure} TestFailure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TestFailure.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TestFailure message.
                     * @function verify
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TestFailure.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.trace != null && message.hasOwnProperty("trace"))
                            if (!$util.isString(message.trace))
                                return "trace: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a TestFailure message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TestFailure} TestFailure
                     */
                    TestFailure.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TestFailure)
                            return object;
                        var message = new $root.replit.goval.api.TestFailure();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.trace != null)
                            message.trace = String(object.trace);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TestFailure message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TestFailure
                     * @static
                     * @param {replit.goval.api.TestFailure} message TestFailure
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TestFailure.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.trace = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.trace != null && message.hasOwnProperty("trace"))
                            object.trace = message.trace;
                        return object;
                    };
    
                    /**
                     * Converts this TestFailure to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TestFailure
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TestFailure.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TestFailure;
                })();
    
                api.ResizeTerm = (function() {
    
                    /**
                     * Properties of a ResizeTerm.
                     * @memberof replit.goval.api
                     * @interface IResizeTerm
                     * @property {number|null} [rows] ResizeTerm rows
                     * @property {number|null} [cols] ResizeTerm cols
                     */
    
                    /**
                     * Constructs a new ResizeTerm.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ResizeTerm.
                     * @constructor
                     * @param {replit.goval.api.IResizeTerm=} [properties] Properties to set
                     */
                    function ResizeTerm(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ResizeTerm rows.
                     * @member {number} rows
                     * @memberof replit.goval.api.ResizeTerm
                     * @instance
                     */
                    ResizeTerm.prototype.rows = 0;
    
                    /**
                     * ResizeTerm cols.
                     * @member {number} cols
                     * @memberof replit.goval.api.ResizeTerm
                     * @instance
                     */
                    ResizeTerm.prototype.cols = 0;
    
                    /**
                     * Creates a new ResizeTerm instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {replit.goval.api.IResizeTerm=} [properties] Properties to set
                     * @returns {replit.goval.api.ResizeTerm} ResizeTerm instance
                     */
                    ResizeTerm.create = function create(properties) {
                        return ResizeTerm.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ResizeTerm message. Does not implicitly {@link replit.goval.api.ResizeTerm.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {replit.goval.api.ResizeTerm} message ResizeTerm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResizeTerm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.rows != null && Object.hasOwnProperty.call(message, "rows"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rows);
                        if (message.cols != null && Object.hasOwnProperty.call(message, "cols"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cols);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ResizeTerm message, length delimited. Does not implicitly {@link replit.goval.api.ResizeTerm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {replit.goval.api.ResizeTerm} message ResizeTerm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ResizeTerm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ResizeTerm message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ResizeTerm} ResizeTerm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResizeTerm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ResizeTerm();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.rows = reader.uint32();
                                break;
                            case 2:
                                message.cols = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ResizeTerm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ResizeTerm} ResizeTerm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ResizeTerm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ResizeTerm message.
                     * @function verify
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ResizeTerm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.rows != null && message.hasOwnProperty("rows"))
                            if (!$util.isInteger(message.rows))
                                return "rows: integer expected";
                        if (message.cols != null && message.hasOwnProperty("cols"))
                            if (!$util.isInteger(message.cols))
                                return "cols: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ResizeTerm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ResizeTerm} ResizeTerm
                     */
                    ResizeTerm.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ResizeTerm)
                            return object;
                        var message = new $root.replit.goval.api.ResizeTerm();
                        if (object.rows != null)
                            message.rows = object.rows >>> 0;
                        if (object.cols != null)
                            message.cols = object.cols >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ResizeTerm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ResizeTerm
                     * @static
                     * @param {replit.goval.api.ResizeTerm} message ResizeTerm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ResizeTerm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.rows = 0;
                            object.cols = 0;
                        }
                        if (message.rows != null && message.hasOwnProperty("rows"))
                            object.rows = message.rows;
                        if (message.cols != null && message.hasOwnProperty("cols"))
                            object.cols = message.cols;
                        return object;
                    };
    
                    /**
                     * Converts this ResizeTerm to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ResizeTerm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ResizeTerm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ResizeTerm;
                })();
    
                api.SaneTerm = (function() {
    
                    /**
                     * Properties of a SaneTerm.
                     * @memberof replit.goval.api
                     * @interface ISaneTerm
                     */
    
                    /**
                     * Constructs a new SaneTerm.
                     * @memberof replit.goval.api
                     * @classdesc Represents a SaneTerm.
                     * @constructor
                     * @param {replit.goval.api.ISaneTerm=} [properties] Properties to set
                     */
                    function SaneTerm(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new SaneTerm instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {replit.goval.api.ISaneTerm=} [properties] Properties to set
                     * @returns {replit.goval.api.SaneTerm} SaneTerm instance
                     */
                    SaneTerm.create = function create(properties) {
                        return SaneTerm.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified SaneTerm message. Does not implicitly {@link replit.goval.api.SaneTerm.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {replit.goval.api.SaneTerm} message SaneTerm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SaneTerm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SaneTerm message, length delimited. Does not implicitly {@link replit.goval.api.SaneTerm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {replit.goval.api.SaneTerm} message SaneTerm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SaneTerm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SaneTerm message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.SaneTerm} SaneTerm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SaneTerm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.SaneTerm();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SaneTerm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.SaneTerm} SaneTerm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SaneTerm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SaneTerm message.
                     * @function verify
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SaneTerm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a SaneTerm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.SaneTerm} SaneTerm
                     */
                    SaneTerm.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.SaneTerm)
                            return object;
                        return new $root.replit.goval.api.SaneTerm();
                    };
    
                    /**
                     * Creates a plain object from a SaneTerm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.SaneTerm
                     * @static
                     * @param {replit.goval.api.SaneTerm} message SaneTerm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SaneTerm.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this SaneTerm to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.SaneTerm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SaneTerm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SaneTerm;
                })();
    
                api.LintResults = (function() {
    
                    /**
                     * Properties of a LintResults.
                     * @memberof replit.goval.api
                     * @interface ILintResults
                     * @property {Array.<replit.goval.api.LintResult|replit.goval.api.ILintResult>|null} [results] LintResults results
                     */
    
                    /**
                     * Constructs a new LintResults.
                     * @memberof replit.goval.api
                     * @classdesc Represents a LintResults.
                     * @constructor
                     * @param {replit.goval.api.ILintResults=} [properties] Properties to set
                     */
                    function LintResults(properties) {
                        this.results = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LintResults results.
                     * @member {Array.<replit.goval.api.LintResult>} results
                     * @memberof replit.goval.api.LintResults
                     * @instance
                     */
                    LintResults.prototype.results = $util.emptyArray;
    
                    /**
                     * Creates a new LintResults instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {replit.goval.api.ILintResults=} [properties] Properties to set
                     * @returns {replit.goval.api.LintResults} LintResults instance
                     */
                    LintResults.create = function create(properties) {
                        return LintResults.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified LintResults message. Does not implicitly {@link replit.goval.api.LintResults.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {replit.goval.api.LintResults} message LintResults message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LintResults.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.results != null && message.results.length)
                            for (var i = 0; i < message.results.length; ++i)
                                $root.replit.goval.api.LintResult.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LintResults message, length delimited. Does not implicitly {@link replit.goval.api.LintResults.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {replit.goval.api.LintResults} message LintResults message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LintResults.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LintResults message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.LintResults} LintResults
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LintResults.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.LintResults();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.results && message.results.length))
                                    message.results = [];
                                message.results.push($root.replit.goval.api.LintResult.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LintResults message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.LintResults} LintResults
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LintResults.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LintResults message.
                     * @function verify
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LintResults.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.results != null && message.hasOwnProperty("results")) {
                            if (!Array.isArray(message.results))
                                return "results: array expected";
                            for (var i = 0; i < message.results.length; ++i) {
                                var error = $root.replit.goval.api.LintResult.verify(message.results[i]);
                                if (error)
                                    return "results." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LintResults message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.LintResults} LintResults
                     */
                    LintResults.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.LintResults)
                            return object;
                        var message = new $root.replit.goval.api.LintResults();
                        if (object.results) {
                            if (!Array.isArray(object.results))
                                throw TypeError(".replit.goval.api.LintResults.results: array expected");
                            message.results = [];
                            for (var i = 0; i < object.results.length; ++i) {
                                if (typeof object.results[i] !== "object")
                                    throw TypeError(".replit.goval.api.LintResults.results: object expected");
                                message.results[i] = $root.replit.goval.api.LintResult.fromObject(object.results[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LintResults message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.LintResults
                     * @static
                     * @param {replit.goval.api.LintResults} message LintResults
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LintResults.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.results = [];
                        if (message.results && message.results.length) {
                            object.results = [];
                            for (var j = 0; j < message.results.length; ++j)
                                object.results[j] = $root.replit.goval.api.LintResult.toObject(message.results[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this LintResults to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.LintResults
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LintResults.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LintResults;
                })();
    
                api.LintResult = (function() {
    
                    /**
                     * Properties of a LintResult.
                     * @memberof replit.goval.api
                     * @interface ILintResult
                     * @property {string|null} [text] LintResult text
                     * @property {number|null} [row] LintResult row
                     * @property {number|null} [column] LintResult column
                     * @property {string|null} [type] LintResult type
                     */
    
                    /**
                     * Constructs a new LintResult.
                     * @memberof replit.goval.api
                     * @classdesc Represents a LintResult.
                     * @constructor
                     * @param {replit.goval.api.ILintResult=} [properties] Properties to set
                     */
                    function LintResult(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LintResult text.
                     * @member {string} text
                     * @memberof replit.goval.api.LintResult
                     * @instance
                     */
                    LintResult.prototype.text = "";
    
                    /**
                     * LintResult row.
                     * @member {number} row
                     * @memberof replit.goval.api.LintResult
                     * @instance
                     */
                    LintResult.prototype.row = 0;
    
                    /**
                     * LintResult column.
                     * @member {number} column
                     * @memberof replit.goval.api.LintResult
                     * @instance
                     */
                    LintResult.prototype.column = 0;
    
                    /**
                     * LintResult type.
                     * @member {string} type
                     * @memberof replit.goval.api.LintResult
                     * @instance
                     */
                    LintResult.prototype.type = "";
    
                    /**
                     * Creates a new LintResult instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {replit.goval.api.ILintResult=} [properties] Properties to set
                     * @returns {replit.goval.api.LintResult} LintResult instance
                     */
                    LintResult.create = function create(properties) {
                        return LintResult.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified LintResult message. Does not implicitly {@link replit.goval.api.LintResult.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {replit.goval.api.LintResult} message LintResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LintResult.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        if (message.row != null && Object.hasOwnProperty.call(message, "row"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.row);
                        if (message.column != null && Object.hasOwnProperty.call(message, "column"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.column);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LintResult message, length delimited. Does not implicitly {@link replit.goval.api.LintResult.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {replit.goval.api.LintResult} message LintResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LintResult.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LintResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.LintResult} LintResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LintResult.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.LintResult();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            case 2:
                                message.row = reader.int32();
                                break;
                            case 3:
                                message.column = reader.int32();
                                break;
                            case 4:
                                message.type = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LintResult message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.LintResult} LintResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LintResult.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LintResult message.
                     * @function verify
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LintResult.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        if (message.row != null && message.hasOwnProperty("row"))
                            if (!$util.isInteger(message.row))
                                return "row: integer expected";
                        if (message.column != null && message.hasOwnProperty("column"))
                            if (!$util.isInteger(message.column))
                                return "column: integer expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            if (!$util.isString(message.type))
                                return "type: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a LintResult message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.LintResult} LintResult
                     */
                    LintResult.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.LintResult)
                            return object;
                        var message = new $root.replit.goval.api.LintResult();
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.row != null)
                            message.row = object.row | 0;
                        if (object.column != null)
                            message.column = object.column | 0;
                        if (object.type != null)
                            message.type = String(object.type);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LintResult message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.LintResult
                     * @static
                     * @param {replit.goval.api.LintResult} message LintResult
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LintResult.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.text = "";
                            object.row = 0;
                            object.column = 0;
                            object.type = "";
                        }
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        if (message.row != null && message.hasOwnProperty("row"))
                            object.row = message.row;
                        if (message.column != null && message.hasOwnProperty("column"))
                            object.column = message.column;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = message.type;
                        return object;
                    };
    
                    /**
                     * Converts this LintResult to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.LintResult
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LintResult.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LintResult;
                })();
    
                api.OK = (function() {
    
                    /**
                     * Properties of a OK.
                     * @memberof replit.goval.api
                     * @interface IOK
                     */
    
                    /**
                     * Constructs a new OK.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OK.
                     * @constructor
                     * @param {replit.goval.api.IOK=} [properties] Properties to set
                     */
                    function OK(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new OK instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {replit.goval.api.IOK=} [properties] Properties to set
                     * @returns {replit.goval.api.OK} OK instance
                     */
                    OK.create = function create(properties) {
                        return OK.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OK message. Does not implicitly {@link replit.goval.api.OK.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {replit.goval.api.OK} message OK message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OK.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OK message, length delimited. Does not implicitly {@link replit.goval.api.OK.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {replit.goval.api.OK} message OK message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OK.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OK message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OK} OK
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OK.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OK();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OK message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OK} OK
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OK.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OK message.
                     * @function verify
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OK.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a OK message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OK} OK
                     */
                    OK.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OK)
                            return object;
                        return new $root.replit.goval.api.OK();
                    };
    
                    /**
                     * Creates a plain object from a OK message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OK
                     * @static
                     * @param {replit.goval.api.OK} message OK
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OK.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this OK to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OK
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OK.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OK;
                })();
    
                api.Move = (function() {
    
                    /**
                     * Properties of a Move.
                     * @memberof replit.goval.api
                     * @interface IMove
                     * @property {string|null} [oldPath] Move oldPath
                     * @property {string|null} [newPath] Move newPath
                     */
    
                    /**
                     * Constructs a new Move.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Move.
                     * @constructor
                     * @param {replit.goval.api.IMove=} [properties] Properties to set
                     */
                    function Move(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Move oldPath.
                     * @member {string} oldPath
                     * @memberof replit.goval.api.Move
                     * @instance
                     */
                    Move.prototype.oldPath = "";
    
                    /**
                     * Move newPath.
                     * @member {string} newPath
                     * @memberof replit.goval.api.Move
                     * @instance
                     */
                    Move.prototype.newPath = "";
    
                    /**
                     * Creates a new Move instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {replit.goval.api.IMove=} [properties] Properties to set
                     * @returns {replit.goval.api.Move} Move instance
                     */
                    Move.create = function create(properties) {
                        return Move.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Move message. Does not implicitly {@link replit.goval.api.Move.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {replit.goval.api.Move} message Move message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Move.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.oldPath != null && Object.hasOwnProperty.call(message, "oldPath"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.oldPath);
                        if (message.newPath != null && Object.hasOwnProperty.call(message, "newPath"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.newPath);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Move message, length delimited. Does not implicitly {@link replit.goval.api.Move.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {replit.goval.api.Move} message Move message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Move.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Move message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Move} Move
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Move.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Move();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.oldPath = reader.string();
                                break;
                            case 2:
                                message.newPath = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Move message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Move} Move
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Move.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Move message.
                     * @function verify
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Move.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.oldPath != null && message.hasOwnProperty("oldPath"))
                            if (!$util.isString(message.oldPath))
                                return "oldPath: string expected";
                        if (message.newPath != null && message.hasOwnProperty("newPath"))
                            if (!$util.isString(message.newPath))
                                return "newPath: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Move message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Move} Move
                     */
                    Move.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Move)
                            return object;
                        var message = new $root.replit.goval.api.Move();
                        if (object.oldPath != null)
                            message.oldPath = String(object.oldPath);
                        if (object.newPath != null)
                            message.newPath = String(object.newPath);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Move message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Move
                     * @static
                     * @param {replit.goval.api.Move} message Move
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Move.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.oldPath = "";
                            object.newPath = "";
                        }
                        if (message.oldPath != null && message.hasOwnProperty("oldPath"))
                            object.oldPath = message.oldPath;
                        if (message.newPath != null && message.hasOwnProperty("newPath"))
                            object.newPath = message.newPath;
                        return object;
                    };
    
                    /**
                     * Converts this Move to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Move
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Move.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Move;
                })();
    
                api.Files = (function() {
    
                    /**
                     * Properties of a Files.
                     * @memberof replit.goval.api
                     * @interface IFiles
                     * @property {Array.<replit.goval.api.File|replit.goval.api.IFile>|null} [files] Files files
                     */
    
                    /**
                     * Constructs a new Files.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Files.
                     * @constructor
                     * @param {replit.goval.api.IFiles=} [properties] Properties to set
                     */
                    function Files(properties) {
                        this.files = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Files files.
                     * @member {Array.<replit.goval.api.File>} files
                     * @memberof replit.goval.api.Files
                     * @instance
                     */
                    Files.prototype.files = $util.emptyArray;
    
                    /**
                     * Creates a new Files instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {replit.goval.api.IFiles=} [properties] Properties to set
                     * @returns {replit.goval.api.Files} Files instance
                     */
                    Files.create = function create(properties) {
                        return Files.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Files message. Does not implicitly {@link replit.goval.api.Files.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {replit.goval.api.Files} message Files message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Files.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.files != null && message.files.length)
                            for (var i = 0; i < message.files.length; ++i)
                                $root.replit.goval.api.File.encode(message.files[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Files message, length delimited. Does not implicitly {@link replit.goval.api.Files.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {replit.goval.api.Files} message Files message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Files.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Files message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Files} Files
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Files.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Files();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.files && message.files.length))
                                    message.files = [];
                                message.files.push($root.replit.goval.api.File.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Files message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Files} Files
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Files.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Files message.
                     * @function verify
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Files.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.files != null && message.hasOwnProperty("files")) {
                            if (!Array.isArray(message.files))
                                return "files: array expected";
                            for (var i = 0; i < message.files.length; ++i) {
                                var error = $root.replit.goval.api.File.verify(message.files[i]);
                                if (error)
                                    return "files." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Files message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Files} Files
                     */
                    Files.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Files)
                            return object;
                        var message = new $root.replit.goval.api.Files();
                        if (object.files) {
                            if (!Array.isArray(object.files))
                                throw TypeError(".replit.goval.api.Files.files: array expected");
                            message.files = [];
                            for (var i = 0; i < object.files.length; ++i) {
                                if (typeof object.files[i] !== "object")
                                    throw TypeError(".replit.goval.api.Files.files: object expected");
                                message.files[i] = $root.replit.goval.api.File.fromObject(object.files[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Files message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Files
                     * @static
                     * @param {replit.goval.api.Files} message Files
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Files.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.files = [];
                        if (message.files && message.files.length) {
                            object.files = [];
                            for (var j = 0; j < message.files.length; ++j)
                                object.files[j] = $root.replit.goval.api.File.toObject(message.files[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Files to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Files
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Files.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Files;
                })();
    
                api.StatResult = (function() {
    
                    /**
                     * Properties of a StatResult.
                     * @memberof replit.goval.api
                     * @interface IStatResult
                     * @property {boolean|null} [exists] StatResult exists
                     * @property {replit.goval.api.File.Type|null} [type] StatResult type
                     * @property {number|null} [size] StatResult size
                     * @property {string|null} [fileMode] StatResult fileMode
                     * @property {number|null} [modTime] StatResult modTime
                     */
    
                    /**
                     * Constructs a new StatResult.
                     * @memberof replit.goval.api
                     * @classdesc Represents a StatResult.
                     * @constructor
                     * @param {replit.goval.api.IStatResult=} [properties] Properties to set
                     */
                    function StatResult(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * StatResult exists.
                     * @member {boolean} exists
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     */
                    StatResult.prototype.exists = false;
    
                    /**
                     * StatResult type.
                     * @member {replit.goval.api.File.Type} type
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     */
                    StatResult.prototype.type = 0;
    
                    /**
                     * StatResult size.
                     * @member {number} size
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     */
                    StatResult.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * StatResult fileMode.
                     * @member {string} fileMode
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     */
                    StatResult.prototype.fileMode = "";
    
                    /**
                     * StatResult modTime.
                     * @member {number} modTime
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     */
                    StatResult.prototype.modTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new StatResult instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {replit.goval.api.IStatResult=} [properties] Properties to set
                     * @returns {replit.goval.api.StatResult} StatResult instance
                     */
                    StatResult.create = function create(properties) {
                        return StatResult.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified StatResult message. Does not implicitly {@link replit.goval.api.StatResult.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {replit.goval.api.StatResult} message StatResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StatResult.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.exists != null && Object.hasOwnProperty.call(message, "exists"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.exists);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                        if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.size);
                        if (message.fileMode != null && Object.hasOwnProperty.call(message, "fileMode"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.fileMode);
                        if (message.modTime != null && Object.hasOwnProperty.call(message, "modTime"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modTime);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified StatResult message, length delimited. Does not implicitly {@link replit.goval.api.StatResult.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {replit.goval.api.StatResult} message StatResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    StatResult.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a StatResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.StatResult} StatResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StatResult.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.StatResult();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.exists = reader.bool();
                                break;
                            case 2:
                                message.type = reader.int32();
                                break;
                            case 3:
                                message.size = reader.int64();
                                break;
                            case 4:
                                message.fileMode = reader.string();
                                break;
                            case 5:
                                message.modTime = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a StatResult message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.StatResult} StatResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    StatResult.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a StatResult message.
                     * @function verify
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    StatResult.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            if (typeof message.exists !== "boolean")
                                return "exists: boolean expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.size != null && message.hasOwnProperty("size"))
                            if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                                return "size: integer|Long expected";
                        if (message.fileMode != null && message.hasOwnProperty("fileMode"))
                            if (!$util.isString(message.fileMode))
                                return "fileMode: string expected";
                        if (message.modTime != null && message.hasOwnProperty("modTime"))
                            if (!$util.isInteger(message.modTime) && !(message.modTime && $util.isInteger(message.modTime.low) && $util.isInteger(message.modTime.high)))
                                return "modTime: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a StatResult message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.StatResult} StatResult
                     */
                    StatResult.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.StatResult)
                            return object;
                        var message = new $root.replit.goval.api.StatResult();
                        if (object.exists != null)
                            message.exists = Boolean(object.exists);
                        switch (object.type) {
                        case "REGULAR":
                        case 0:
                            message.type = 0;
                            break;
                        case "DIRECTORY":
                        case 1:
                            message.type = 1;
                            break;
                        }
                        if (object.size != null)
                            if ($util.Long)
                                (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                            else if (typeof object.size === "string")
                                message.size = parseInt(object.size, 10);
                            else if (typeof object.size === "number")
                                message.size = object.size;
                            else if (typeof object.size === "object")
                                message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                        if (object.fileMode != null)
                            message.fileMode = String(object.fileMode);
                        if (object.modTime != null)
                            if ($util.Long)
                                (message.modTime = $util.Long.fromValue(object.modTime)).unsigned = false;
                            else if (typeof object.modTime === "string")
                                message.modTime = parseInt(object.modTime, 10);
                            else if (typeof object.modTime === "number")
                                message.modTime = object.modTime;
                            else if (typeof object.modTime === "object")
                                message.modTime = new $util.LongBits(object.modTime.low >>> 0, object.modTime.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a StatResult message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.StatResult
                     * @static
                     * @param {replit.goval.api.StatResult} message StatResult
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    StatResult.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.exists = false;
                            object.type = options.enums === String ? "REGULAR" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.size = options.longs === String ? "0" : 0;
                            object.fileMode = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.modTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.modTime = options.longs === String ? "0" : 0;
                        }
                        if (message.exists != null && message.hasOwnProperty("exists"))
                            object.exists = message.exists;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.replit.goval.api.File.Type[message.type] : message.type;
                        if (message.size != null && message.hasOwnProperty("size"))
                            if (typeof message.size === "number")
                                object.size = options.longs === String ? String(message.size) : message.size;
                            else
                                object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                        if (message.fileMode != null && message.hasOwnProperty("fileMode"))
                            object.fileMode = message.fileMode;
                        if (message.modTime != null && message.hasOwnProperty("modTime"))
                            if (typeof message.modTime === "number")
                                object.modTime = options.longs === String ? String(message.modTime) : message.modTime;
                            else
                                object.modTime = options.longs === String ? $util.Long.prototype.toString.call(message.modTime) : options.longs === Number ? new $util.LongBits(message.modTime.low >>> 0, message.modTime.high >>> 0).toNumber() : message.modTime;
                        return object;
                    };
    
                    /**
                     * Converts this StatResult to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.StatResult
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    StatResult.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return StatResult;
                })();
    
                api.File = (function() {
    
                    /**
                     * Properties of a File.
                     * @memberof replit.goval.api
                     * @interface IFile
                     * @property {string|null} [path] File path
                     * @property {replit.goval.api.File.Type|null} [type] File type
                     * @property {Uint8Array|null} [content] File content
                     */
    
                    /**
                     * Constructs a new File.
                     * @memberof replit.goval.api
                     * @classdesc Represents a File.
                     * @constructor
                     * @param {replit.goval.api.IFile=} [properties] Properties to set
                     */
                    function File(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * File path.
                     * @member {string} path
                     * @memberof replit.goval.api.File
                     * @instance
                     */
                    File.prototype.path = "";
    
                    /**
                     * File type.
                     * @member {replit.goval.api.File.Type} type
                     * @memberof replit.goval.api.File
                     * @instance
                     */
                    File.prototype.type = 0;
    
                    /**
                     * File content.
                     * @member {Uint8Array} content
                     * @memberof replit.goval.api.File
                     * @instance
                     */
                    File.prototype.content = $util.newBuffer([]);
    
                    /**
                     * Creates a new File instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {replit.goval.api.IFile=} [properties] Properties to set
                     * @returns {replit.goval.api.File} File instance
                     */
                    File.create = function create(properties) {
                        return File.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified File message. Does not implicitly {@link replit.goval.api.File.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {replit.goval.api.File} message File message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    File.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.content);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified File message, length delimited. Does not implicitly {@link replit.goval.api.File.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {replit.goval.api.File} message File message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    File.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a File message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.File} File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    File.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.File();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 2:
                                message.type = reader.int32();
                                break;
                            case 3:
                                message.content = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a File message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.File} File
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    File.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a File message.
                     * @function verify
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    File.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.type != null && message.hasOwnProperty("type"))
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                                return "content: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a File message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.File} File
                     */
                    File.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.File)
                            return object;
                        var message = new $root.replit.goval.api.File();
                        if (object.path != null)
                            message.path = String(object.path);
                        switch (object.type) {
                        case "REGULAR":
                        case 0:
                            message.type = 0;
                            break;
                        case "DIRECTORY":
                        case 1:
                            message.type = 1;
                            break;
                        }
                        if (object.content != null)
                            if (typeof object.content === "string")
                                $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                            else if (object.content.length)
                                message.content = object.content;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a File message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.File
                     * @static
                     * @param {replit.goval.api.File} message File
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    File.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.path = "";
                            object.type = options.enums === String ? "REGULAR" : 0;
                            if (options.bytes === String)
                                object.content = "";
                            else {
                                object.content = [];
                                if (options.bytes !== Array)
                                    object.content = $util.newBuffer(object.content);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.type != null && message.hasOwnProperty("type"))
                            object.type = options.enums === String ? $root.replit.goval.api.File.Type[message.type] : message.type;
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                        return object;
                    };
    
                    /**
                     * Converts this File to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.File
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    File.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Type enum.
                     * @name replit.goval.api.File.Type
                     * @enum {number}
                     * @property {number} REGULAR=0 REGULAR value
                     * @property {number} DIRECTORY=1 DIRECTORY value
                     */
                    File.Type = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "REGULAR"] = 0;
                        values[valuesById[1] = "DIRECTORY"] = 1;
                        return values;
                    })();
    
                    return File;
                })();
    
                api.Transfer = (function() {
    
                    /**
                     * Properties of a Transfer.
                     * @memberof replit.goval.api
                     * @interface ITransfer
                     * @property {string|null} [id] Transfer id
                     */
    
                    /**
                     * Constructs a new Transfer.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Transfer.
                     * @constructor
                     * @param {replit.goval.api.ITransfer=} [properties] Properties to set
                     */
                    function Transfer(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Transfer id.
                     * @member {string} id
                     * @memberof replit.goval.api.Transfer
                     * @instance
                     */
                    Transfer.prototype.id = "";
    
                    /**
                     * Creates a new Transfer instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {replit.goval.api.ITransfer=} [properties] Properties to set
                     * @returns {replit.goval.api.Transfer} Transfer instance
                     */
                    Transfer.create = function create(properties) {
                        return Transfer.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Transfer message. Does not implicitly {@link replit.goval.api.Transfer.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {replit.goval.api.Transfer} message Transfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Transfer message, length delimited. Does not implicitly {@link replit.goval.api.Transfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {replit.goval.api.Transfer} message Transfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Transfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Transfer} Transfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Transfer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Transfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Transfer} Transfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Transfer message.
                     * @function verify
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Transfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Transfer} Transfer
                     */
                    Transfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Transfer)
                            return object;
                        var message = new $root.replit.goval.api.Transfer();
                        if (object.id != null)
                            message.id = String(object.id);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Transfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Transfer
                     * @static
                     * @param {replit.goval.api.Transfer} message Transfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.id = "";
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };
    
                    /**
                     * Converts this Transfer to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Transfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Transfer;
                })();
    
                api.TransferStart = (function() {
    
                    /**
                     * Properties of a TransferStart.
                     * @memberof replit.goval.api
                     * @interface ITransferStart
                     * @property {string|null} [path] TransferStart path
                     * @property {number|null} [size] TransferStart size
                     */
    
                    /**
                     * Constructs a new TransferStart.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TransferStart.
                     * @constructor
                     * @param {replit.goval.api.ITransferStart=} [properties] Properties to set
                     */
                    function TransferStart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransferStart path.
                     * @member {string} path
                     * @memberof replit.goval.api.TransferStart
                     * @instance
                     */
                    TransferStart.prototype.path = "";
    
                    /**
                     * TransferStart size.
                     * @member {number} size
                     * @memberof replit.goval.api.TransferStart
                     * @instance
                     */
                    TransferStart.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new TransferStart instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {replit.goval.api.ITransferStart=} [properties] Properties to set
                     * @returns {replit.goval.api.TransferStart} TransferStart instance
                     */
                    TransferStart.create = function create(properties) {
                        return TransferStart.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TransferStart message. Does not implicitly {@link replit.goval.api.TransferStart.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {replit.goval.api.TransferStart} message TransferStart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferStart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.size);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransferStart message, length delimited. Does not implicitly {@link replit.goval.api.TransferStart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {replit.goval.api.TransferStart} message TransferStart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferStart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransferStart message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TransferStart} TransferStart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferStart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TransferStart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 2:
                                message.size = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransferStart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TransferStart} TransferStart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferStart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransferStart message.
                     * @function verify
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransferStart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.size != null && message.hasOwnProperty("size"))
                            if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                                return "size: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a TransferStart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TransferStart} TransferStart
                     */
                    TransferStart.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TransferStart)
                            return object;
                        var message = new $root.replit.goval.api.TransferStart();
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.size != null)
                            if ($util.Long)
                                (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                            else if (typeof object.size === "string")
                                message.size = parseInt(object.size, 10);
                            else if (typeof object.size === "number")
                                message.size = object.size;
                            else if (typeof object.size === "object")
                                message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransferStart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TransferStart
                     * @static
                     * @param {replit.goval.api.TransferStart} message TransferStart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransferStart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.path = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.size = options.longs === String ? "0" : 0;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.size != null && message.hasOwnProperty("size"))
                            if (typeof message.size === "number")
                                object.size = options.longs === String ? String(message.size) : message.size;
                            else
                                object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                        return object;
                    };
    
                    /**
                     * Converts this TransferStart to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TransferStart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransferStart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TransferStart;
                })();
    
                api.TransferChunk = (function() {
    
                    /**
                     * Properties of a TransferChunk.
                     * @memberof replit.goval.api
                     * @interface ITransferChunk
                     * @property {string|null} [id] TransferChunk id
                     * @property {Uint8Array|null} [content] TransferChunk content
                     */
    
                    /**
                     * Constructs a new TransferChunk.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TransferChunk.
                     * @constructor
                     * @param {replit.goval.api.ITransferChunk=} [properties] Properties to set
                     */
                    function TransferChunk(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransferChunk id.
                     * @member {string} id
                     * @memberof replit.goval.api.TransferChunk
                     * @instance
                     */
                    TransferChunk.prototype.id = "";
    
                    /**
                     * TransferChunk content.
                     * @member {Uint8Array} content
                     * @memberof replit.goval.api.TransferChunk
                     * @instance
                     */
                    TransferChunk.prototype.content = $util.newBuffer([]);
    
                    /**
                     * Creates a new TransferChunk instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {replit.goval.api.ITransferChunk=} [properties] Properties to set
                     * @returns {replit.goval.api.TransferChunk} TransferChunk instance
                     */
                    TransferChunk.create = function create(properties) {
                        return TransferChunk.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TransferChunk message. Does not implicitly {@link replit.goval.api.TransferChunk.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {replit.goval.api.TransferChunk} message TransferChunk message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferChunk.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.content);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransferChunk message, length delimited. Does not implicitly {@link replit.goval.api.TransferChunk.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {replit.goval.api.TransferChunk} message TransferChunk message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferChunk.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransferChunk message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TransferChunk} TransferChunk
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferChunk.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TransferChunk();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.content = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransferChunk message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TransferChunk} TransferChunk
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferChunk.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransferChunk message.
                     * @function verify
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransferChunk.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.content != null && message.hasOwnProperty("content"))
                            if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                                return "content: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a TransferChunk message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TransferChunk} TransferChunk
                     */
                    TransferChunk.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TransferChunk)
                            return object;
                        var message = new $root.replit.goval.api.TransferChunk();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.content != null)
                            if (typeof object.content === "string")
                                $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                            else if (object.content.length)
                                message.content = object.content;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransferChunk message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TransferChunk
                     * @static
                     * @param {replit.goval.api.TransferChunk} message TransferChunk
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransferChunk.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = "";
                            if (options.bytes === String)
                                object.content = "";
                            else {
                                object.content = [];
                                if (options.bytes !== Array)
                                    object.content = $util.newBuffer(object.content);
                            }
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.content != null && message.hasOwnProperty("content"))
                            object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                        return object;
                    };
    
                    /**
                     * Converts this TransferChunk to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TransferChunk
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransferChunk.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TransferChunk;
                })();
    
                api.TransferComplete = (function() {
    
                    /**
                     * Properties of a TransferComplete.
                     * @memberof replit.goval.api
                     * @interface ITransferComplete
                     * @property {string|null} [id] TransferComplete id
                     * @property {number|null} [crc32] TransferComplete crc32
                     */
    
                    /**
                     * Constructs a new TransferComplete.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TransferComplete.
                     * @constructor
                     * @param {replit.goval.api.ITransferComplete=} [properties] Properties to set
                     */
                    function TransferComplete(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransferComplete id.
                     * @member {string} id
                     * @memberof replit.goval.api.TransferComplete
                     * @instance
                     */
                    TransferComplete.prototype.id = "";
    
                    /**
                     * TransferComplete crc32.
                     * @member {number} crc32
                     * @memberof replit.goval.api.TransferComplete
                     * @instance
                     */
                    TransferComplete.prototype.crc32 = 0;
    
                    /**
                     * Creates a new TransferComplete instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {replit.goval.api.ITransferComplete=} [properties] Properties to set
                     * @returns {replit.goval.api.TransferComplete} TransferComplete instance
                     */
                    TransferComplete.create = function create(properties) {
                        return TransferComplete.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TransferComplete message. Does not implicitly {@link replit.goval.api.TransferComplete.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {replit.goval.api.TransferComplete} message TransferComplete message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferComplete.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.crc32 != null && Object.hasOwnProperty.call(message, "crc32"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.crc32);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransferComplete message, length delimited. Does not implicitly {@link replit.goval.api.TransferComplete.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {replit.goval.api.TransferComplete} message TransferComplete message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransferComplete.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransferComplete message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TransferComplete} TransferComplete
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferComplete.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TransferComplete();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.crc32 = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransferComplete message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TransferComplete} TransferComplete
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransferComplete.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransferComplete message.
                     * @function verify
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransferComplete.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.crc32 != null && message.hasOwnProperty("crc32"))
                            if (!$util.isInteger(message.crc32))
                                return "crc32: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a TransferComplete message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TransferComplete} TransferComplete
                     */
                    TransferComplete.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TransferComplete)
                            return object;
                        var message = new $root.replit.goval.api.TransferComplete();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.crc32 != null)
                            message.crc32 = object.crc32 >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransferComplete message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TransferComplete
                     * @static
                     * @param {replit.goval.api.TransferComplete} message TransferComplete
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransferComplete.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.crc32 = 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.crc32 != null && message.hasOwnProperty("crc32"))
                            object.crc32 = message.crc32;
                        return object;
                    };
    
                    /**
                     * Converts this TransferComplete to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TransferComplete
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransferComplete.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TransferComplete;
                })();
    
                api.Clear = (function() {
    
                    /**
                     * Properties of a Clear.
                     * @memberof replit.goval.api
                     * @interface IClear
                     */
    
                    /**
                     * Constructs a new Clear.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Clear.
                     * @constructor
                     * @param {replit.goval.api.IClear=} [properties] Properties to set
                     */
                    function Clear(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new Clear instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {replit.goval.api.IClear=} [properties] Properties to set
                     * @returns {replit.goval.api.Clear} Clear instance
                     */
                    Clear.create = function create(properties) {
                        return Clear.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Clear message. Does not implicitly {@link replit.goval.api.Clear.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {replit.goval.api.Clear} message Clear message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Clear.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Clear message, length delimited. Does not implicitly {@link replit.goval.api.Clear.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {replit.goval.api.Clear} message Clear message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Clear.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Clear message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Clear} Clear
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Clear.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Clear();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Clear message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Clear} Clear
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Clear.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Clear message.
                     * @function verify
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Clear.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a Clear message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Clear} Clear
                     */
                    Clear.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Clear)
                            return object;
                        return new $root.replit.goval.api.Clear();
                    };
    
                    /**
                     * Creates a plain object from a Clear message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Clear
                     * @static
                     * @param {replit.goval.api.Clear} message Clear
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Clear.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this Clear to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Clear
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Clear.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Clear;
                })();
    
                api.Toast = (function() {
    
                    /**
                     * Properties of a Toast.
                     * @memberof replit.goval.api
                     * @interface IToast
                     * @property {string|null} [text] Toast text
                     */
    
                    /**
                     * Constructs a new Toast.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Toast.
                     * @constructor
                     * @param {replit.goval.api.IToast=} [properties] Properties to set
                     */
                    function Toast(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Toast text.
                     * @member {string} text
                     * @memberof replit.goval.api.Toast
                     * @instance
                     */
                    Toast.prototype.text = "";
    
                    /**
                     * Creates a new Toast instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {replit.goval.api.IToast=} [properties] Properties to set
                     * @returns {replit.goval.api.Toast} Toast instance
                     */
                    Toast.create = function create(properties) {
                        return Toast.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Toast message. Does not implicitly {@link replit.goval.api.Toast.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {replit.goval.api.Toast} message Toast message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Toast.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Toast message, length delimited. Does not implicitly {@link replit.goval.api.Toast.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {replit.goval.api.Toast} message Toast message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Toast.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Toast message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Toast} Toast
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Toast.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Toast();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Toast message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Toast} Toast
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Toast.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Toast message.
                     * @function verify
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Toast.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Toast message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Toast} Toast
                     */
                    Toast.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Toast)
                            return object;
                        var message = new $root.replit.goval.api.Toast();
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Toast message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Toast
                     * @static
                     * @param {replit.goval.api.Toast} message Toast
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Toast.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.text = "";
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this Toast to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Toast
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Toast.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Toast;
                })();
    
                api.ProtocolError = (function() {
    
                    /**
                     * Properties of a ProtocolError.
                     * @memberof replit.goval.api
                     * @interface IProtocolError
                     * @property {string|null} [text] ProtocolError text
                     */
    
                    /**
                     * Constructs a new ProtocolError.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ProtocolError.
                     * @constructor
                     * @param {replit.goval.api.IProtocolError=} [properties] Properties to set
                     */
                    function ProtocolError(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ProtocolError text.
                     * @member {string} text
                     * @memberof replit.goval.api.ProtocolError
                     * @instance
                     */
                    ProtocolError.prototype.text = "";
    
                    /**
                     * Creates a new ProtocolError instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {replit.goval.api.IProtocolError=} [properties] Properties to set
                     * @returns {replit.goval.api.ProtocolError} ProtocolError instance
                     */
                    ProtocolError.create = function create(properties) {
                        return ProtocolError.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ProtocolError message. Does not implicitly {@link replit.goval.api.ProtocolError.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {replit.goval.api.ProtocolError} message ProtocolError message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProtocolError.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ProtocolError message, length delimited. Does not implicitly {@link replit.goval.api.ProtocolError.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {replit.goval.api.ProtocolError} message ProtocolError message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProtocolError.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ProtocolError message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ProtocolError} ProtocolError
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProtocolError.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ProtocolError();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ProtocolError message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ProtocolError} ProtocolError
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProtocolError.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ProtocolError message.
                     * @function verify
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProtocolError.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ProtocolError message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ProtocolError} ProtocolError
                     */
                    ProtocolError.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ProtocolError)
                            return object;
                        var message = new $root.replit.goval.api.ProtocolError();
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ProtocolError message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ProtocolError
                     * @static
                     * @param {replit.goval.api.ProtocolError} message ProtocolError
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProtocolError.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.text = "";
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this ProtocolError to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ProtocolError
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProtocolError.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ProtocolError;
                })();
    
                api.Redirect = (function() {
    
                    /**
                     * Properties of a Redirect.
                     * @memberof replit.goval.api
                     * @interface IRedirect
                     * @property {string|null} [url] Redirect url
                     */
    
                    /**
                     * Constructs a new Redirect.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Redirect.
                     * @constructor
                     * @param {replit.goval.api.IRedirect=} [properties] Properties to set
                     */
                    function Redirect(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Redirect url.
                     * @member {string} url
                     * @memberof replit.goval.api.Redirect
                     * @instance
                     */
                    Redirect.prototype.url = "";
    
                    /**
                     * Creates a new Redirect instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {replit.goval.api.IRedirect=} [properties] Properties to set
                     * @returns {replit.goval.api.Redirect} Redirect instance
                     */
                    Redirect.create = function create(properties) {
                        return Redirect.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Redirect message. Does not implicitly {@link replit.goval.api.Redirect.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {replit.goval.api.Redirect} message Redirect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Redirect.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.url);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Redirect message, length delimited. Does not implicitly {@link replit.goval.api.Redirect.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {replit.goval.api.Redirect} message Redirect message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Redirect.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Redirect message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Redirect} Redirect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Redirect.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Redirect();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.url = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Redirect message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Redirect} Redirect
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Redirect.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Redirect message.
                     * @function verify
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Redirect.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Redirect message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Redirect} Redirect
                     */
                    Redirect.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Redirect)
                            return object;
                        var message = new $root.replit.goval.api.Redirect();
                        if (object.url != null)
                            message.url = String(object.url);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Redirect message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Redirect
                     * @static
                     * @param {replit.goval.api.Redirect} message Redirect
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Redirect.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.url = "";
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        return object;
                    };
    
                    /**
                     * Converts this Redirect to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Redirect
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Redirect.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Redirect;
                })();
    
                api.AlwaysOn = (function() {
    
                    /**
                     * Properties of an AlwaysOn.
                     * @memberof replit.goval.api
                     * @interface IAlwaysOn
                     * @property {boolean|null} [enable] AlwaysOn enable
                     */
    
                    /**
                     * Constructs a new AlwaysOn.
                     * @memberof replit.goval.api
                     * @classdesc Represents an AlwaysOn.
                     * @constructor
                     * @param {replit.goval.api.IAlwaysOn=} [properties] Properties to set
                     */
                    function AlwaysOn(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AlwaysOn enable.
                     * @member {boolean} enable
                     * @memberof replit.goval.api.AlwaysOn
                     * @instance
                     */
                    AlwaysOn.prototype.enable = false;
    
                    /**
                     * Creates a new AlwaysOn instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {replit.goval.api.IAlwaysOn=} [properties] Properties to set
                     * @returns {replit.goval.api.AlwaysOn} AlwaysOn instance
                     */
                    AlwaysOn.create = function create(properties) {
                        return AlwaysOn.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified AlwaysOn message. Does not implicitly {@link replit.goval.api.AlwaysOn.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {replit.goval.api.AlwaysOn} message AlwaysOn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AlwaysOn.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enable);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AlwaysOn message, length delimited. Does not implicitly {@link replit.goval.api.AlwaysOn.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {replit.goval.api.AlwaysOn} message AlwaysOn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AlwaysOn.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AlwaysOn message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.AlwaysOn} AlwaysOn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AlwaysOn.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.AlwaysOn();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.enable = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AlwaysOn message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.AlwaysOn} AlwaysOn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AlwaysOn.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AlwaysOn message.
                     * @function verify
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AlwaysOn.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.enable != null && message.hasOwnProperty("enable"))
                            if (typeof message.enable !== "boolean")
                                return "enable: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates an AlwaysOn message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.AlwaysOn} AlwaysOn
                     */
                    AlwaysOn.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.AlwaysOn)
                            return object;
                        var message = new $root.replit.goval.api.AlwaysOn();
                        if (object.enable != null)
                            message.enable = Boolean(object.enable);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AlwaysOn message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.AlwaysOn
                     * @static
                     * @param {replit.goval.api.AlwaysOn} message AlwaysOn
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AlwaysOn.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.enable = false;
                        if (message.enable != null && message.hasOwnProperty("enable"))
                            object.enable = message.enable;
                        return object;
                    };
    
                    /**
                     * Converts this AlwaysOn to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.AlwaysOn
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AlwaysOn.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AlwaysOn;
                })();
    
                api.RunMain = (function() {
    
                    /**
                     * Properties of a RunMain.
                     * @memberof replit.goval.api
                     * @interface IRunMain
                     * @property {replit.goval.api.RunMain.RunMode|null} [runMode] RunMain runMode
                     * @property {boolean|null} [idempotent] RunMain idempotent
                     */
    
                    /**
                     * Constructs a new RunMain.
                     * @memberof replit.goval.api
                     * @classdesc Represents a RunMain.
                     * @constructor
                     * @param {replit.goval.api.IRunMain=} [properties] Properties to set
                     */
                    function RunMain(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RunMain runMode.
                     * @member {replit.goval.api.RunMain.RunMode} runMode
                     * @memberof replit.goval.api.RunMain
                     * @instance
                     */
                    RunMain.prototype.runMode = 0;
    
                    /**
                     * RunMain idempotent.
                     * @member {boolean} idempotent
                     * @memberof replit.goval.api.RunMain
                     * @instance
                     */
                    RunMain.prototype.idempotent = false;
    
                    /**
                     * Creates a new RunMain instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {replit.goval.api.IRunMain=} [properties] Properties to set
                     * @returns {replit.goval.api.RunMain} RunMain instance
                     */
                    RunMain.create = function create(properties) {
                        return RunMain.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified RunMain message. Does not implicitly {@link replit.goval.api.RunMain.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {replit.goval.api.RunMain} message RunMain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunMain.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.runMode != null && Object.hasOwnProperty.call(message, "runMode"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.runMode);
                        if (message.idempotent != null && Object.hasOwnProperty.call(message, "idempotent"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.idempotent);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RunMain message, length delimited. Does not implicitly {@link replit.goval.api.RunMain.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {replit.goval.api.RunMain} message RunMain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunMain.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RunMain message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.RunMain} RunMain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunMain.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.RunMain();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.runMode = reader.int32();
                                break;
                            case 2:
                                message.idempotent = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RunMain message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.RunMain} RunMain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunMain.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RunMain message.
                     * @function verify
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RunMain.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.runMode != null && message.hasOwnProperty("runMode"))
                            switch (message.runMode) {
                            default:
                                return "runMode: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.idempotent != null && message.hasOwnProperty("idempotent"))
                            if (typeof message.idempotent !== "boolean")
                                return "idempotent: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a RunMain message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.RunMain} RunMain
                     */
                    RunMain.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.RunMain)
                            return object;
                        var message = new $root.replit.goval.api.RunMain();
                        switch (object.runMode) {
                        case "RUN":
                        case 0:
                            message.runMode = 0;
                            break;
                        case "RECORD":
                        case 1:
                            message.runMode = 1;
                            break;
                        }
                        if (object.idempotent != null)
                            message.idempotent = Boolean(object.idempotent);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RunMain message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.RunMain
                     * @static
                     * @param {replit.goval.api.RunMain} message RunMain
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RunMain.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.runMode = options.enums === String ? "RUN" : 0;
                            object.idempotent = false;
                        }
                        if (message.runMode != null && message.hasOwnProperty("runMode"))
                            object.runMode = options.enums === String ? $root.replit.goval.api.RunMain.RunMode[message.runMode] : message.runMode;
                        if (message.idempotent != null && message.hasOwnProperty("idempotent"))
                            object.idempotent = message.idempotent;
                        return object;
                    };
    
                    /**
                     * Converts this RunMain to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.RunMain
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RunMain.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * RunMode enum.
                     * @name replit.goval.api.RunMain.RunMode
                     * @enum {number}
                     * @property {number} RUN=0 RUN value
                     * @property {number} RECORD=1 RECORD value
                     */
                    RunMain.RunMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RUN"] = 0;
                        values[valuesById[1] = "RECORD"] = 1;
                        return values;
                    })();
    
                    return RunMain;
                })();
    
                api.OpenChannel = (function() {
    
                    /**
                     * Properties of an OpenChannel.
                     * @memberof replit.goval.api
                     * @interface IOpenChannel
                     * @property {string|null} [service] OpenChannel service
                     * @property {string|null} [name] OpenChannel name
                     * @property {replit.goval.api.OpenChannel.Action|null} [action] OpenChannel action
                     * @property {number|null} [id] OpenChannel id
                     */
    
                    /**
                     * Constructs a new OpenChannel.
                     * @memberof replit.goval.api
                     * @classdesc Represents an OpenChannel.
                     * @constructor
                     * @param {replit.goval.api.IOpenChannel=} [properties] Properties to set
                     */
                    function OpenChannel(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OpenChannel service.
                     * @member {string} service
                     * @memberof replit.goval.api.OpenChannel
                     * @instance
                     */
                    OpenChannel.prototype.service = "";
    
                    /**
                     * OpenChannel name.
                     * @member {string} name
                     * @memberof replit.goval.api.OpenChannel
                     * @instance
                     */
                    OpenChannel.prototype.name = "";
    
                    /**
                     * OpenChannel action.
                     * @member {replit.goval.api.OpenChannel.Action} action
                     * @memberof replit.goval.api.OpenChannel
                     * @instance
                     */
                    OpenChannel.prototype.action = 0;
    
                    /**
                     * OpenChannel id.
                     * @member {number} id
                     * @memberof replit.goval.api.OpenChannel
                     * @instance
                     */
                    OpenChannel.prototype.id = 0;
    
                    /**
                     * Creates a new OpenChannel instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {replit.goval.api.IOpenChannel=} [properties] Properties to set
                     * @returns {replit.goval.api.OpenChannel} OpenChannel instance
                     */
                    OpenChannel.create = function create(properties) {
                        return OpenChannel.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OpenChannel message. Does not implicitly {@link replit.goval.api.OpenChannel.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {replit.goval.api.OpenChannel} message OpenChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenChannel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.action);
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OpenChannel message, length delimited. Does not implicitly {@link replit.goval.api.OpenChannel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {replit.goval.api.OpenChannel} message OpenChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenChannel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an OpenChannel message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OpenChannel} OpenChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenChannel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OpenChannel();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.service = reader.string();
                                break;
                            case 2:
                                message.name = reader.string();
                                break;
                            case 3:
                                message.action = reader.int32();
                                break;
                            case 4:
                                message.id = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an OpenChannel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OpenChannel} OpenChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenChannel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an OpenChannel message.
                     * @function verify
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OpenChannel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.service != null && message.hasOwnProperty("service"))
                            if (!$util.isString(message.service))
                                return "service: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an OpenChannel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OpenChannel} OpenChannel
                     */
                    OpenChannel.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OpenChannel)
                            return object;
                        var message = new $root.replit.goval.api.OpenChannel();
                        if (object.service != null)
                            message.service = String(object.service);
                        if (object.name != null)
                            message.name = String(object.name);
                        switch (object.action) {
                        case "CREATE":
                        case 0:
                            message.action = 0;
                            break;
                        case "ATTACH":
                        case 1:
                            message.action = 1;
                            break;
                        case "ATTACH_OR_CREATE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        if (object.id != null)
                            message.id = object.id | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an OpenChannel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OpenChannel
                     * @static
                     * @param {replit.goval.api.OpenChannel} message OpenChannel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OpenChannel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.service = "";
                            object.name = "";
                            object.action = options.enums === String ? "CREATE" : 0;
                            object.id = 0;
                        }
                        if (message.service != null && message.hasOwnProperty("service"))
                            object.service = message.service;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.replit.goval.api.OpenChannel.Action[message.action] : message.action;
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };
    
                    /**
                     * Converts this OpenChannel to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OpenChannel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OpenChannel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name replit.goval.api.OpenChannel.Action
                     * @enum {number}
                     * @property {number} CREATE=0 CREATE value
                     * @property {number} ATTACH=1 ATTACH value
                     * @property {number} ATTACH_OR_CREATE=2 ATTACH_OR_CREATE value
                     */
                    OpenChannel.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CREATE"] = 0;
                        values[valuesById[1] = "ATTACH"] = 1;
                        values[valuesById[2] = "ATTACH_OR_CREATE"] = 2;
                        return values;
                    })();
    
                    return OpenChannel;
                })();
    
                api.OpenChannelRes = (function() {
    
                    /**
                     * Properties of an OpenChannelRes.
                     * @memberof replit.goval.api
                     * @interface IOpenChannelRes
                     * @property {number|null} [id] OpenChannelRes id
                     * @property {replit.goval.api.OpenChannelRes.State|null} [state] OpenChannelRes state
                     * @property {string|null} [error] OpenChannelRes error
                     */
    
                    /**
                     * Constructs a new OpenChannelRes.
                     * @memberof replit.goval.api
                     * @classdesc Represents an OpenChannelRes.
                     * @constructor
                     * @param {replit.goval.api.IOpenChannelRes=} [properties] Properties to set
                     */
                    function OpenChannelRes(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OpenChannelRes id.
                     * @member {number} id
                     * @memberof replit.goval.api.OpenChannelRes
                     * @instance
                     */
                    OpenChannelRes.prototype.id = 0;
    
                    /**
                     * OpenChannelRes state.
                     * @member {replit.goval.api.OpenChannelRes.State} state
                     * @memberof replit.goval.api.OpenChannelRes
                     * @instance
                     */
                    OpenChannelRes.prototype.state = 0;
    
                    /**
                     * OpenChannelRes error.
                     * @member {string} error
                     * @memberof replit.goval.api.OpenChannelRes
                     * @instance
                     */
                    OpenChannelRes.prototype.error = "";
    
                    /**
                     * Creates a new OpenChannelRes instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {replit.goval.api.IOpenChannelRes=} [properties] Properties to set
                     * @returns {replit.goval.api.OpenChannelRes} OpenChannelRes instance
                     */
                    OpenChannelRes.create = function create(properties) {
                        return OpenChannelRes.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OpenChannelRes message. Does not implicitly {@link replit.goval.api.OpenChannelRes.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {replit.goval.api.OpenChannelRes} message OpenChannelRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenChannelRes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.error);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OpenChannelRes message, length delimited. Does not implicitly {@link replit.goval.api.OpenChannelRes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {replit.goval.api.OpenChannelRes} message OpenChannelRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenChannelRes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an OpenChannelRes message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OpenChannelRes} OpenChannelRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenChannelRes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OpenChannelRes();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.int32();
                                break;
                            case 2:
                                message.state = reader.int32();
                                break;
                            case 3:
                                message.error = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an OpenChannelRes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OpenChannelRes} OpenChannelRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenChannelRes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an OpenChannelRes message.
                     * @function verify
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OpenChannelRes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.error != null && message.hasOwnProperty("error"))
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an OpenChannelRes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OpenChannelRes} OpenChannelRes
                     */
                    OpenChannelRes.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OpenChannelRes)
                            return object;
                        var message = new $root.replit.goval.api.OpenChannelRes();
                        if (object.id != null)
                            message.id = object.id | 0;
                        switch (object.state) {
                        case "CREATED":
                        case 0:
                            message.state = 0;
                            break;
                        case "ATTACHED":
                        case 1:
                            message.state = 1;
                            break;
                        case "ERROR":
                        case 2:
                            message.state = 2;
                            break;
                        }
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an OpenChannelRes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OpenChannelRes
                     * @static
                     * @param {replit.goval.api.OpenChannelRes} message OpenChannelRes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OpenChannelRes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = 0;
                            object.state = options.enums === String ? "CREATED" : 0;
                            object.error = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.replit.goval.api.OpenChannelRes.State[message.state] : message.state;
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = message.error;
                        return object;
                    };
    
                    /**
                     * Converts this OpenChannelRes to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OpenChannelRes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OpenChannelRes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * State enum.
                     * @name replit.goval.api.OpenChannelRes.State
                     * @enum {number}
                     * @property {number} CREATED=0 CREATED value
                     * @property {number} ATTACHED=1 ATTACHED value
                     * @property {number} ERROR=2 ERROR value
                     */
                    OpenChannelRes.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CREATED"] = 0;
                        values[valuesById[1] = "ATTACHED"] = 1;
                        values[valuesById[2] = "ERROR"] = 2;
                        return values;
                    })();
    
                    return OpenChannelRes;
                })();
    
                api.CloseChannel = (function() {
    
                    /**
                     * Properties of a CloseChannel.
                     * @memberof replit.goval.api
                     * @interface ICloseChannel
                     * @property {number|null} [id] CloseChannel id
                     * @property {replit.goval.api.CloseChannel.Action|null} [action] CloseChannel action
                     */
    
                    /**
                     * Constructs a new CloseChannel.
                     * @memberof replit.goval.api
                     * @classdesc Represents a CloseChannel.
                     * @constructor
                     * @param {replit.goval.api.ICloseChannel=} [properties] Properties to set
                     */
                    function CloseChannel(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CloseChannel id.
                     * @member {number} id
                     * @memberof replit.goval.api.CloseChannel
                     * @instance
                     */
                    CloseChannel.prototype.id = 0;
    
                    /**
                     * CloseChannel action.
                     * @member {replit.goval.api.CloseChannel.Action} action
                     * @memberof replit.goval.api.CloseChannel
                     * @instance
                     */
                    CloseChannel.prototype.action = 0;
    
                    /**
                     * Creates a new CloseChannel instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {replit.goval.api.ICloseChannel=} [properties] Properties to set
                     * @returns {replit.goval.api.CloseChannel} CloseChannel instance
                     */
                    CloseChannel.create = function create(properties) {
                        return CloseChannel.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified CloseChannel message. Does not implicitly {@link replit.goval.api.CloseChannel.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {replit.goval.api.CloseChannel} message CloseChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloseChannel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CloseChannel message, length delimited. Does not implicitly {@link replit.goval.api.CloseChannel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {replit.goval.api.CloseChannel} message CloseChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloseChannel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CloseChannel message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.CloseChannel} CloseChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloseChannel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.CloseChannel();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.int32();
                                break;
                            case 2:
                                message.action = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CloseChannel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.CloseChannel} CloseChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloseChannel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CloseChannel message.
                     * @function verify
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CloseChannel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        if (message.action != null && message.hasOwnProperty("action"))
                            switch (message.action) {
                            default:
                                return "action: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a CloseChannel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.CloseChannel} CloseChannel
                     */
                    CloseChannel.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.CloseChannel)
                            return object;
                        var message = new $root.replit.goval.api.CloseChannel();
                        if (object.id != null)
                            message.id = object.id | 0;
                        switch (object.action) {
                        case "DISCONNECT":
                        case 0:
                            message.action = 0;
                            break;
                        case "TRY_CLOSE":
                        case 1:
                            message.action = 1;
                            break;
                        case "CLOSE":
                        case 2:
                            message.action = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CloseChannel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.CloseChannel
                     * @static
                     * @param {replit.goval.api.CloseChannel} message CloseChannel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CloseChannel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = 0;
                            object.action = options.enums === String ? "DISCONNECT" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.action != null && message.hasOwnProperty("action"))
                            object.action = options.enums === String ? $root.replit.goval.api.CloseChannel.Action[message.action] : message.action;
                        return object;
                    };
    
                    /**
                     * Converts this CloseChannel to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.CloseChannel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CloseChannel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Action enum.
                     * @name replit.goval.api.CloseChannel.Action
                     * @enum {number}
                     * @property {number} DISCONNECT=0 DISCONNECT value
                     * @property {number} TRY_CLOSE=1 TRY_CLOSE value
                     * @property {number} CLOSE=2 CLOSE value
                     */
                    CloseChannel.Action = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DISCONNECT"] = 0;
                        values[valuesById[1] = "TRY_CLOSE"] = 1;
                        values[valuesById[2] = "CLOSE"] = 2;
                        return values;
                    })();
    
                    return CloseChannel;
                })();
    
                api.CloseChannelRes = (function() {
    
                    /**
                     * Properties of a CloseChannelRes.
                     * @memberof replit.goval.api
                     * @interface ICloseChannelRes
                     * @property {number|null} [id] CloseChannelRes id
                     * @property {replit.goval.api.CloseChannelRes.Status|null} [status] CloseChannelRes status
                     */
    
                    /**
                     * Constructs a new CloseChannelRes.
                     * @memberof replit.goval.api
                     * @classdesc Represents a CloseChannelRes.
                     * @constructor
                     * @param {replit.goval.api.ICloseChannelRes=} [properties] Properties to set
                     */
                    function CloseChannelRes(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CloseChannelRes id.
                     * @member {number} id
                     * @memberof replit.goval.api.CloseChannelRes
                     * @instance
                     */
                    CloseChannelRes.prototype.id = 0;
    
                    /**
                     * CloseChannelRes status.
                     * @member {replit.goval.api.CloseChannelRes.Status} status
                     * @memberof replit.goval.api.CloseChannelRes
                     * @instance
                     */
                    CloseChannelRes.prototype.status = 0;
    
                    /**
                     * Creates a new CloseChannelRes instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {replit.goval.api.ICloseChannelRes=} [properties] Properties to set
                     * @returns {replit.goval.api.CloseChannelRes} CloseChannelRes instance
                     */
                    CloseChannelRes.create = function create(properties) {
                        return CloseChannelRes.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified CloseChannelRes message. Does not implicitly {@link replit.goval.api.CloseChannelRes.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {replit.goval.api.CloseChannelRes} message CloseChannelRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloseChannelRes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CloseChannelRes message, length delimited. Does not implicitly {@link replit.goval.api.CloseChannelRes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {replit.goval.api.CloseChannelRes} message CloseChannelRes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CloseChannelRes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CloseChannelRes message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.CloseChannelRes} CloseChannelRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloseChannelRes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.CloseChannelRes();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.int32();
                                break;
                            case 2:
                                message.status = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CloseChannelRes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.CloseChannelRes} CloseChannelRes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CloseChannelRes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CloseChannelRes message.
                     * @function verify
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CloseChannelRes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        if (message.status != null && message.hasOwnProperty("status"))
                            switch (message.status) {
                            default:
                                return "status: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a CloseChannelRes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.CloseChannelRes} CloseChannelRes
                     */
                    CloseChannelRes.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.CloseChannelRes)
                            return object;
                        var message = new $root.replit.goval.api.CloseChannelRes();
                        if (object.id != null)
                            message.id = object.id | 0;
                        switch (object.status) {
                        case "DISCONNECT":
                        case 0:
                            message.status = 0;
                            break;
                        case "CLOSE":
                        case 1:
                            message.status = 1;
                            break;
                        case "NOTHING":
                        case 2:
                            message.status = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CloseChannelRes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.CloseChannelRes
                     * @static
                     * @param {replit.goval.api.CloseChannelRes} message CloseChannelRes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CloseChannelRes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = 0;
                            object.status = options.enums === String ? "DISCONNECT" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = options.enums === String ? $root.replit.goval.api.CloseChannelRes.Status[message.status] : message.status;
                        return object;
                    };
    
                    /**
                     * Converts this CloseChannelRes to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.CloseChannelRes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CloseChannelRes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Status enum.
                     * @name replit.goval.api.CloseChannelRes.Status
                     * @enum {number}
                     * @property {number} DISCONNECT=0 DISCONNECT value
                     * @property {number} CLOSE=1 CLOSE value
                     * @property {number} NOTHING=2 NOTHING value
                     */
                    CloseChannelRes.Status = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DISCONNECT"] = 0;
                        values[valuesById[1] = "CLOSE"] = 1;
                        values[valuesById[2] = "NOTHING"] = 2;
                        return values;
                    })();
    
                    return CloseChannelRes;
                })();
    
                api.ContainerState = (function() {
    
                    /**
                     * Properties of a ContainerState.
                     * @memberof replit.goval.api
                     * @interface IContainerState
                     * @property {replit.goval.api.ContainerState.State|null} [state] ContainerState state
                     */
    
                    /**
                     * Constructs a new ContainerState.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ContainerState.
                     * @constructor
                     * @param {replit.goval.api.IContainerState=} [properties] Properties to set
                     */
                    function ContainerState(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ContainerState state.
                     * @member {replit.goval.api.ContainerState.State} state
                     * @memberof replit.goval.api.ContainerState
                     * @instance
                     */
                    ContainerState.prototype.state = 0;
    
                    /**
                     * Creates a new ContainerState instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {replit.goval.api.IContainerState=} [properties] Properties to set
                     * @returns {replit.goval.api.ContainerState} ContainerState instance
                     */
                    ContainerState.create = function create(properties) {
                        return ContainerState.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ContainerState message. Does not implicitly {@link replit.goval.api.ContainerState.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {replit.goval.api.ContainerState} message ContainerState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContainerState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ContainerState message, length delimited. Does not implicitly {@link replit.goval.api.ContainerState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {replit.goval.api.ContainerState} message ContainerState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ContainerState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ContainerState message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ContainerState} ContainerState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContainerState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ContainerState();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ContainerState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ContainerState} ContainerState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ContainerState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ContainerState message.
                     * @function verify
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ContainerState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a ContainerState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ContainerState} ContainerState
                     */
                    ContainerState.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ContainerState)
                            return object;
                        var message = new $root.replit.goval.api.ContainerState();
                        switch (object.state) {
                        case "SLEEP":
                        case 0:
                            message.state = 0;
                            break;
                        case "READY":
                        case 1:
                            message.state = 1;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ContainerState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ContainerState
                     * @static
                     * @param {replit.goval.api.ContainerState} message ContainerState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ContainerState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.state = options.enums === String ? "SLEEP" : 0;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.replit.goval.api.ContainerState.State[message.state] : message.state;
                        return object;
                    };
    
                    /**
                     * Converts this ContainerState to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ContainerState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ContainerState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * State enum.
                     * @name replit.goval.api.ContainerState.State
                     * @enum {number}
                     * @property {number} SLEEP=0 SLEEP value
                     * @property {number} READY=1 READY value
                     */
                    ContainerState.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "SLEEP"] = 0;
                        values[valuesById[1] = "READY"] = 1;
                        return values;
                    })();
    
                    return ContainerState;
                })();
    
                api.PortOpen = (function() {
    
                    /**
                     * Properties of a PortOpen.
                     * @memberof replit.goval.api
                     * @interface IPortOpen
                     * @property {boolean|null} [forwarded] PortOpen forwarded
                     * @property {number|null} [port] PortOpen port
                     * @property {string|null} [address] PortOpen address
                     * @property {number|null} [externalPort] PortOpen externalPort
                     */
    
                    /**
                     * Constructs a new PortOpen.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PortOpen.
                     * @constructor
                     * @param {replit.goval.api.IPortOpen=} [properties] Properties to set
                     */
                    function PortOpen(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PortOpen forwarded.
                     * @member {boolean} forwarded
                     * @memberof replit.goval.api.PortOpen
                     * @instance
                     */
                    PortOpen.prototype.forwarded = false;
    
                    /**
                     * PortOpen port.
                     * @member {number} port
                     * @memberof replit.goval.api.PortOpen
                     * @instance
                     */
                    PortOpen.prototype.port = 0;
    
                    /**
                     * PortOpen address.
                     * @member {string} address
                     * @memberof replit.goval.api.PortOpen
                     * @instance
                     */
                    PortOpen.prototype.address = "";
    
                    /**
                     * PortOpen externalPort.
                     * @member {number} externalPort
                     * @memberof replit.goval.api.PortOpen
                     * @instance
                     */
                    PortOpen.prototype.externalPort = 0;
    
                    /**
                     * Creates a new PortOpen instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {replit.goval.api.IPortOpen=} [properties] Properties to set
                     * @returns {replit.goval.api.PortOpen} PortOpen instance
                     */
                    PortOpen.create = function create(properties) {
                        return PortOpen.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PortOpen message. Does not implicitly {@link replit.goval.api.PortOpen.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {replit.goval.api.PortOpen} message PortOpen message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortOpen.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.forwarded != null && Object.hasOwnProperty.call(message, "forwarded"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.forwarded);
                        if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
                        if (message.externalPort != null && Object.hasOwnProperty.call(message, "externalPort"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.externalPort);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PortOpen message, length delimited. Does not implicitly {@link replit.goval.api.PortOpen.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {replit.goval.api.PortOpen} message PortOpen message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortOpen.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PortOpen message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PortOpen} PortOpen
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortOpen.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PortOpen();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.forwarded = reader.bool();
                                break;
                            case 2:
                                message.port = reader.uint32();
                                break;
                            case 3:
                                message.address = reader.string();
                                break;
                            case 4:
                                message.externalPort = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PortOpen message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PortOpen} PortOpen
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortOpen.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PortOpen message.
                     * @function verify
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PortOpen.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.forwarded != null && message.hasOwnProperty("forwarded"))
                            if (typeof message.forwarded !== "boolean")
                                return "forwarded: boolean expected";
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            if (!$util.isInteger(message.externalPort))
                                return "externalPort: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a PortOpen message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PortOpen} PortOpen
                     */
                    PortOpen.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PortOpen)
                            return object;
                        var message = new $root.replit.goval.api.PortOpen();
                        if (object.forwarded != null)
                            message.forwarded = Boolean(object.forwarded);
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.externalPort != null)
                            message.externalPort = object.externalPort >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PortOpen message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PortOpen
                     * @static
                     * @param {replit.goval.api.PortOpen} message PortOpen
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PortOpen.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.forwarded = false;
                            object.port = 0;
                            object.address = "";
                            object.externalPort = 0;
                        }
                        if (message.forwarded != null && message.hasOwnProperty("forwarded"))
                            object.forwarded = message.forwarded;
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            object.externalPort = message.externalPort;
                        return object;
                    };
    
                    /**
                     * Converts this PortOpen to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PortOpen
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PortOpen.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PortOpen;
                })();
    
                api.PortClose = (function() {
    
                    /**
                     * Properties of a PortClose.
                     * @memberof replit.goval.api
                     * @interface IPortClose
                     * @property {number|null} [port] PortClose port
                     * @property {string|null} [address] PortClose address
                     * @property {number|null} [externalPort] PortClose externalPort
                     */
    
                    /**
                     * Constructs a new PortClose.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PortClose.
                     * @constructor
                     * @param {replit.goval.api.IPortClose=} [properties] Properties to set
                     */
                    function PortClose(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PortClose port.
                     * @member {number} port
                     * @memberof replit.goval.api.PortClose
                     * @instance
                     */
                    PortClose.prototype.port = 0;
    
                    /**
                     * PortClose address.
                     * @member {string} address
                     * @memberof replit.goval.api.PortClose
                     * @instance
                     */
                    PortClose.prototype.address = "";
    
                    /**
                     * PortClose externalPort.
                     * @member {number} externalPort
                     * @memberof replit.goval.api.PortClose
                     * @instance
                     */
                    PortClose.prototype.externalPort = 0;
    
                    /**
                     * Creates a new PortClose instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {replit.goval.api.IPortClose=} [properties] Properties to set
                     * @returns {replit.goval.api.PortClose} PortClose instance
                     */
                    PortClose.create = function create(properties) {
                        return PortClose.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PortClose message. Does not implicitly {@link replit.goval.api.PortClose.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {replit.goval.api.PortClose} message PortClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortClose.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.address);
                        if (message.externalPort != null && Object.hasOwnProperty.call(message, "externalPort"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.externalPort);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PortClose message, length delimited. Does not implicitly {@link replit.goval.api.PortClose.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {replit.goval.api.PortClose} message PortClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PortClose.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PortClose message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PortClose} PortClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortClose.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PortClose();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                message.port = reader.uint32();
                                break;
                            case 3:
                                message.address = reader.string();
                                break;
                            case 4:
                                message.externalPort = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PortClose message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PortClose} PortClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PortClose.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PortClose message.
                     * @function verify
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PortClose.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port != null && message.hasOwnProperty("port"))
                            if (!$util.isInteger(message.port))
                                return "port: integer expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            if (!$util.isInteger(message.externalPort))
                                return "externalPort: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a PortClose message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PortClose} PortClose
                     */
                    PortClose.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PortClose)
                            return object;
                        var message = new $root.replit.goval.api.PortClose();
                        if (object.port != null)
                            message.port = object.port >>> 0;
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.externalPort != null)
                            message.externalPort = object.externalPort >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PortClose message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PortClose
                     * @static
                     * @param {replit.goval.api.PortClose} message PortClose
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PortClose.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.port = 0;
                            object.address = "";
                            object.externalPort = 0;
                        }
                        if (message.port != null && message.hasOwnProperty("port"))
                            object.port = message.port;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            object.externalPort = message.externalPort;
                        return object;
                    };
    
                    /**
                     * Converts this PortClose to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PortClose
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PortClose.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PortClose;
                })();
    
                api.OTFetchRequest = (function() {
    
                    /**
                     * Properties of a OTFetchRequest.
                     * @memberof replit.goval.api
                     * @interface IOTFetchRequest
                     * @property {number|null} [versionFrom] OTFetchRequest versionFrom
                     * @property {number|null} [versionTo] OTFetchRequest versionTo
                     */
    
                    /**
                     * Constructs a new OTFetchRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTFetchRequest.
                     * @constructor
                     * @param {replit.goval.api.IOTFetchRequest=} [properties] Properties to set
                     */
                    function OTFetchRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTFetchRequest versionFrom.
                     * @member {number} versionFrom
                     * @memberof replit.goval.api.OTFetchRequest
                     * @instance
                     */
                    OTFetchRequest.prototype.versionFrom = 0;
    
                    /**
                     * OTFetchRequest versionTo.
                     * @member {number} versionTo
                     * @memberof replit.goval.api.OTFetchRequest
                     * @instance
                     */
                    OTFetchRequest.prototype.versionTo = 0;
    
                    /**
                     * Creates a new OTFetchRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {replit.goval.api.IOTFetchRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.OTFetchRequest} OTFetchRequest instance
                     */
                    OTFetchRequest.create = function create(properties) {
                        return OTFetchRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTFetchRequest message. Does not implicitly {@link replit.goval.api.OTFetchRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {replit.goval.api.OTFetchRequest} message OTFetchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTFetchRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.versionFrom != null && Object.hasOwnProperty.call(message, "versionFrom"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.versionFrom);
                        if (message.versionTo != null && Object.hasOwnProperty.call(message, "versionTo"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.versionTo);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTFetchRequest message, length delimited. Does not implicitly {@link replit.goval.api.OTFetchRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {replit.goval.api.OTFetchRequest} message OTFetchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTFetchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTFetchRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTFetchRequest} OTFetchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTFetchRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTFetchRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.versionFrom = reader.uint32();
                                break;
                            case 2:
                                message.versionTo = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTFetchRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTFetchRequest} OTFetchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTFetchRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTFetchRequest message.
                     * @function verify
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTFetchRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.versionFrom != null && message.hasOwnProperty("versionFrom"))
                            if (!$util.isInteger(message.versionFrom))
                                return "versionFrom: integer expected";
                        if (message.versionTo != null && message.hasOwnProperty("versionTo"))
                            if (!$util.isInteger(message.versionTo))
                                return "versionTo: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a OTFetchRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTFetchRequest} OTFetchRequest
                     */
                    OTFetchRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTFetchRequest)
                            return object;
                        var message = new $root.replit.goval.api.OTFetchRequest();
                        if (object.versionFrom != null)
                            message.versionFrom = object.versionFrom >>> 0;
                        if (object.versionTo != null)
                            message.versionTo = object.versionTo >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTFetchRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTFetchRequest
                     * @static
                     * @param {replit.goval.api.OTFetchRequest} message OTFetchRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTFetchRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.versionFrom = 0;
                            object.versionTo = 0;
                        }
                        if (message.versionFrom != null && message.hasOwnProperty("versionFrom"))
                            object.versionFrom = message.versionFrom;
                        if (message.versionTo != null && message.hasOwnProperty("versionTo"))
                            object.versionTo = message.versionTo;
                        return object;
                    };
    
                    /**
                     * Converts this OTFetchRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTFetchRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTFetchRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTFetchRequest;
                })();
    
                api.OTFetchResponse = (function() {
    
                    /**
                     * Properties of a OTFetchResponse.
                     * @memberof replit.goval.api
                     * @interface IOTFetchResponse
                     * @property {Array.<replit.goval.api.OTPacket|replit.goval.api.IOTPacket>|null} [packets] OTFetchResponse packets
                     */
    
                    /**
                     * Constructs a new OTFetchResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTFetchResponse.
                     * @constructor
                     * @param {replit.goval.api.IOTFetchResponse=} [properties] Properties to set
                     */
                    function OTFetchResponse(properties) {
                        this.packets = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTFetchResponse packets.
                     * @member {Array.<replit.goval.api.OTPacket>} packets
                     * @memberof replit.goval.api.OTFetchResponse
                     * @instance
                     */
                    OTFetchResponse.prototype.packets = $util.emptyArray;
    
                    /**
                     * Creates a new OTFetchResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {replit.goval.api.IOTFetchResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.OTFetchResponse} OTFetchResponse instance
                     */
                    OTFetchResponse.create = function create(properties) {
                        return OTFetchResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTFetchResponse message. Does not implicitly {@link replit.goval.api.OTFetchResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {replit.goval.api.OTFetchResponse} message OTFetchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTFetchResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packets != null && message.packets.length)
                            for (var i = 0; i < message.packets.length; ++i)
                                $root.replit.goval.api.OTPacket.encode(message.packets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTFetchResponse message, length delimited. Does not implicitly {@link replit.goval.api.OTFetchResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {replit.goval.api.OTFetchResponse} message OTFetchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTFetchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTFetchResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTFetchResponse} OTFetchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTFetchResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTFetchResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.packets && message.packets.length))
                                    message.packets = [];
                                message.packets.push($root.replit.goval.api.OTPacket.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTFetchResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTFetchResponse} OTFetchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTFetchResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTFetchResponse message.
                     * @function verify
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTFetchResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packets != null && message.hasOwnProperty("packets")) {
                            if (!Array.isArray(message.packets))
                                return "packets: array expected";
                            for (var i = 0; i < message.packets.length; ++i) {
                                var error = $root.replit.goval.api.OTPacket.verify(message.packets[i]);
                                if (error)
                                    return "packets." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a OTFetchResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTFetchResponse} OTFetchResponse
                     */
                    OTFetchResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTFetchResponse)
                            return object;
                        var message = new $root.replit.goval.api.OTFetchResponse();
                        if (object.packets) {
                            if (!Array.isArray(object.packets))
                                throw TypeError(".replit.goval.api.OTFetchResponse.packets: array expected");
                            message.packets = [];
                            for (var i = 0; i < object.packets.length; ++i) {
                                if (typeof object.packets[i] !== "object")
                                    throw TypeError(".replit.goval.api.OTFetchResponse.packets: object expected");
                                message.packets[i] = $root.replit.goval.api.OTPacket.fromObject(object.packets[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTFetchResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTFetchResponse
                     * @static
                     * @param {replit.goval.api.OTFetchResponse} message OTFetchResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTFetchResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.packets = [];
                        if (message.packets && message.packets.length) {
                            object.packets = [];
                            for (var j = 0; j < message.packets.length; ++j)
                                object.packets[j] = $root.replit.goval.api.OTPacket.toObject(message.packets[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this OTFetchResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTFetchResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTFetchResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTFetchResponse;
                })();
    
                api.OTTransformSelectionRequest = (function() {
    
                    /**
                     * Properties of a OTTransformSelectionRequest.
                     * @memberof replit.goval.api
                     * @interface IOTTransformSelectionRequest
                     * @property {number|null} [indexStart] OTTransformSelectionRequest indexStart
                     * @property {number|null} [indexEnd] OTTransformSelectionRequest indexEnd
                     * @property {number|null} [versionFrom] OTTransformSelectionRequest versionFrom
                     * @property {number|null} [versionTo] OTTransformSelectionRequest versionTo
                     */
    
                    /**
                     * Constructs a new OTTransformSelectionRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTTransformSelectionRequest.
                     * @constructor
                     * @param {replit.goval.api.IOTTransformSelectionRequest=} [properties] Properties to set
                     */
                    function OTTransformSelectionRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTTransformSelectionRequest indexStart.
                     * @member {number} indexStart
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @instance
                     */
                    OTTransformSelectionRequest.prototype.indexStart = 0;
    
                    /**
                     * OTTransformSelectionRequest indexEnd.
                     * @member {number} indexEnd
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @instance
                     */
                    OTTransformSelectionRequest.prototype.indexEnd = 0;
    
                    /**
                     * OTTransformSelectionRequest versionFrom.
                     * @member {number} versionFrom
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @instance
                     */
                    OTTransformSelectionRequest.prototype.versionFrom = 0;
    
                    /**
                     * OTTransformSelectionRequest versionTo.
                     * @member {number} versionTo
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @instance
                     */
                    OTTransformSelectionRequest.prototype.versionTo = 0;
    
                    /**
                     * Creates a new OTTransformSelectionRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {replit.goval.api.IOTTransformSelectionRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.OTTransformSelectionRequest} OTTransformSelectionRequest instance
                     */
                    OTTransformSelectionRequest.create = function create(properties) {
                        return OTTransformSelectionRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTTransformSelectionRequest message. Does not implicitly {@link replit.goval.api.OTTransformSelectionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionRequest} message OTTransformSelectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTTransformSelectionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.indexStart != null && Object.hasOwnProperty.call(message, "indexStart"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.indexStart);
                        if (message.indexEnd != null && Object.hasOwnProperty.call(message, "indexEnd"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.indexEnd);
                        if (message.versionFrom != null && Object.hasOwnProperty.call(message, "versionFrom"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.versionFrom);
                        if (message.versionTo != null && Object.hasOwnProperty.call(message, "versionTo"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.versionTo);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTTransformSelectionRequest message, length delimited. Does not implicitly {@link replit.goval.api.OTTransformSelectionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionRequest} message OTTransformSelectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTTransformSelectionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTTransformSelectionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTTransformSelectionRequest} OTTransformSelectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTTransformSelectionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTTransformSelectionRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.indexStart = reader.uint32();
                                break;
                            case 2:
                                message.indexEnd = reader.uint32();
                                break;
                            case 3:
                                message.versionFrom = reader.uint32();
                                break;
                            case 4:
                                message.versionTo = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTTransformSelectionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTTransformSelectionRequest} OTTransformSelectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTTransformSelectionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTTransformSelectionRequest message.
                     * @function verify
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTTransformSelectionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.indexStart != null && message.hasOwnProperty("indexStart"))
                            if (!$util.isInteger(message.indexStart))
                                return "indexStart: integer expected";
                        if (message.indexEnd != null && message.hasOwnProperty("indexEnd"))
                            if (!$util.isInteger(message.indexEnd))
                                return "indexEnd: integer expected";
                        if (message.versionFrom != null && message.hasOwnProperty("versionFrom"))
                            if (!$util.isInteger(message.versionFrom))
                                return "versionFrom: integer expected";
                        if (message.versionTo != null && message.hasOwnProperty("versionTo"))
                            if (!$util.isInteger(message.versionTo))
                                return "versionTo: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a OTTransformSelectionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTTransformSelectionRequest} OTTransformSelectionRequest
                     */
                    OTTransformSelectionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTTransformSelectionRequest)
                            return object;
                        var message = new $root.replit.goval.api.OTTransformSelectionRequest();
                        if (object.indexStart != null)
                            message.indexStart = object.indexStart >>> 0;
                        if (object.indexEnd != null)
                            message.indexEnd = object.indexEnd >>> 0;
                        if (object.versionFrom != null)
                            message.versionFrom = object.versionFrom >>> 0;
                        if (object.versionTo != null)
                            message.versionTo = object.versionTo >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTTransformSelectionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionRequest} message OTTransformSelectionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTTransformSelectionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.indexStart = 0;
                            object.indexEnd = 0;
                            object.versionFrom = 0;
                            object.versionTo = 0;
                        }
                        if (message.indexStart != null && message.hasOwnProperty("indexStart"))
                            object.indexStart = message.indexStart;
                        if (message.indexEnd != null && message.hasOwnProperty("indexEnd"))
                            object.indexEnd = message.indexEnd;
                        if (message.versionFrom != null && message.hasOwnProperty("versionFrom"))
                            object.versionFrom = message.versionFrom;
                        if (message.versionTo != null && message.hasOwnProperty("versionTo"))
                            object.versionTo = message.versionTo;
                        return object;
                    };
    
                    /**
                     * Converts this OTTransformSelectionRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTTransformSelectionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTTransformSelectionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTTransformSelectionRequest;
                })();
    
                api.OTTransformSelectionResponse = (function() {
    
                    /**
                     * Properties of a OTTransformSelectionResponse.
                     * @memberof replit.goval.api
                     * @interface IOTTransformSelectionResponse
                     * @property {number|null} [indexStart] OTTransformSelectionResponse indexStart
                     * @property {number|null} [indexEnd] OTTransformSelectionResponse indexEnd
                     * @property {number|null} [version] OTTransformSelectionResponse version
                     */
    
                    /**
                     * Constructs a new OTTransformSelectionResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTTransformSelectionResponse.
                     * @constructor
                     * @param {replit.goval.api.IOTTransformSelectionResponse=} [properties] Properties to set
                     */
                    function OTTransformSelectionResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTTransformSelectionResponse indexStart.
                     * @member {number} indexStart
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @instance
                     */
                    OTTransformSelectionResponse.prototype.indexStart = 0;
    
                    /**
                     * OTTransformSelectionResponse indexEnd.
                     * @member {number} indexEnd
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @instance
                     */
                    OTTransformSelectionResponse.prototype.indexEnd = 0;
    
                    /**
                     * OTTransformSelectionResponse version.
                     * @member {number} version
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @instance
                     */
                    OTTransformSelectionResponse.prototype.version = 0;
    
                    /**
                     * Creates a new OTTransformSelectionResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {replit.goval.api.IOTTransformSelectionResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.OTTransformSelectionResponse} OTTransformSelectionResponse instance
                     */
                    OTTransformSelectionResponse.create = function create(properties) {
                        return OTTransformSelectionResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTTransformSelectionResponse message. Does not implicitly {@link replit.goval.api.OTTransformSelectionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionResponse} message OTTransformSelectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTTransformSelectionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.indexStart != null && Object.hasOwnProperty.call(message, "indexStart"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.indexStart);
                        if (message.indexEnd != null && Object.hasOwnProperty.call(message, "indexEnd"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.indexEnd);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.version);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTTransformSelectionResponse message, length delimited. Does not implicitly {@link replit.goval.api.OTTransformSelectionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionResponse} message OTTransformSelectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTTransformSelectionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTTransformSelectionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTTransformSelectionResponse} OTTransformSelectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTTransformSelectionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTTransformSelectionResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.indexStart = reader.uint32();
                                break;
                            case 2:
                                message.indexEnd = reader.uint32();
                                break;
                            case 3:
                                message.version = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTTransformSelectionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTTransformSelectionResponse} OTTransformSelectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTTransformSelectionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTTransformSelectionResponse message.
                     * @function verify
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTTransformSelectionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.indexStart != null && message.hasOwnProperty("indexStart"))
                            if (!$util.isInteger(message.indexStart))
                                return "indexStart: integer expected";
                        if (message.indexEnd != null && message.hasOwnProperty("indexEnd"))
                            if (!$util.isInteger(message.indexEnd))
                                return "indexEnd: integer expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a OTTransformSelectionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTTransformSelectionResponse} OTTransformSelectionResponse
                     */
                    OTTransformSelectionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTTransformSelectionResponse)
                            return object;
                        var message = new $root.replit.goval.api.OTTransformSelectionResponse();
                        if (object.indexStart != null)
                            message.indexStart = object.indexStart >>> 0;
                        if (object.indexEnd != null)
                            message.indexEnd = object.indexEnd >>> 0;
                        if (object.version != null)
                            message.version = object.version >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTTransformSelectionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @static
                     * @param {replit.goval.api.OTTransformSelectionResponse} message OTTransformSelectionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTTransformSelectionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.indexStart = 0;
                            object.indexEnd = 0;
                            object.version = 0;
                        }
                        if (message.indexStart != null && message.hasOwnProperty("indexStart"))
                            object.indexStart = message.indexStart;
                        if (message.indexEnd != null && message.hasOwnProperty("indexEnd"))
                            object.indexEnd = message.indexEnd;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        return object;
                    };
    
                    /**
                     * Converts this OTTransformSelectionResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTTransformSelectionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTTransformSelectionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTTransformSelectionResponse;
                })();
    
                api.OTPacket = (function() {
    
                    /**
                     * Properties of a OTPacket.
                     * @memberof replit.goval.api
                     * @interface IOTPacket
                     * @property {number|null} [spookyVersion] OTPacket spookyVersion
                     * @property {number|null} [version] OTPacket version
                     * @property {Array.<replit.goval.api.OTOpComponent|replit.goval.api.IOTOpComponent>|null} [op] OTPacket op
                     * @property {number|null} [crc32] OTPacket crc32
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [committed] OTPacket committed
                     * @property {number|null} [nonce] OTPacket nonce
                     * @property {number|null} [userId] OTPacket userId
                     * @property {replit.goval.api.OTPacket.Author|null} [author] OTPacket author
                     */
    
                    /**
                     * Constructs a new OTPacket.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTPacket.
                     * @constructor
                     * @param {replit.goval.api.IOTPacket=} [properties] Properties to set
                     */
                    function OTPacket(properties) {
                        this.op = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTPacket spookyVersion.
                     * @member {number} spookyVersion
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.spookyVersion = 0;
    
                    /**
                     * OTPacket version.
                     * @member {number} version
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.version = 0;
    
                    /**
                     * OTPacket op.
                     * @member {Array.<replit.goval.api.OTOpComponent>} op
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.op = $util.emptyArray;
    
                    /**
                     * OTPacket crc32.
                     * @member {number} crc32
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.crc32 = 0;
    
                    /**
                     * OTPacket committed.
                     * @member {google.protobuf.Timestamp|null|undefined} committed
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.committed = null;
    
                    /**
                     * OTPacket nonce.
                     * @member {number} nonce
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.nonce = 0;
    
                    /**
                     * OTPacket userId.
                     * @member {number} userId
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.userId = 0;
    
                    /**
                     * OTPacket author.
                     * @member {replit.goval.api.OTPacket.Author} author
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     */
                    OTPacket.prototype.author = 0;
    
                    /**
                     * Creates a new OTPacket instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {replit.goval.api.IOTPacket=} [properties] Properties to set
                     * @returns {replit.goval.api.OTPacket} OTPacket instance
                     */
                    OTPacket.create = function create(properties) {
                        return OTPacket.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTPacket message. Does not implicitly {@link replit.goval.api.OTPacket.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {replit.goval.api.OTPacket} message OTPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTPacket.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.spookyVersion != null && Object.hasOwnProperty.call(message, "spookyVersion"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.spookyVersion);
                        if (message.op != null && message.op.length)
                            for (var i = 0; i < message.op.length; ++i)
                                $root.replit.goval.api.OTOpComponent.encode(message.op[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.crc32 != null && Object.hasOwnProperty.call(message, "crc32"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.crc32);
                        if (message.committed != null && Object.hasOwnProperty.call(message, "committed"))
                            $root.google.protobuf.Timestamp.encode(message.committed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.version);
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.nonce);
                        if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.userId);
                        if (message.author != null && Object.hasOwnProperty.call(message, "author"))
                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.author);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTPacket message, length delimited. Does not implicitly {@link replit.goval.api.OTPacket.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {replit.goval.api.OTPacket} message OTPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTPacket.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTPacket message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTPacket} OTPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTPacket.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTPacket();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.spookyVersion = reader.uint32();
                                break;
                            case 5:
                                message.version = reader.uint32();
                                break;
                            case 2:
                                if (!(message.op && message.op.length))
                                    message.op = [];
                                message.op.push($root.replit.goval.api.OTOpComponent.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.crc32 = reader.uint32();
                                break;
                            case 4:
                                message.committed = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.nonce = reader.uint32();
                                break;
                            case 7:
                                message.userId = reader.uint32();
                                break;
                            case 8:
                                message.author = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTPacket message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTPacket} OTPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTPacket.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTPacket message.
                     * @function verify
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTPacket.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.spookyVersion != null && message.hasOwnProperty("spookyVersion"))
                            if (!$util.isInteger(message.spookyVersion))
                                return "spookyVersion: integer expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.op != null && message.hasOwnProperty("op")) {
                            if (!Array.isArray(message.op))
                                return "op: array expected";
                            for (var i = 0; i < message.op.length; ++i) {
                                var error = $root.replit.goval.api.OTOpComponent.verify(message.op[i]);
                                if (error)
                                    return "op." + error;
                            }
                        }
                        if (message.crc32 != null && message.hasOwnProperty("crc32"))
                            if (!$util.isInteger(message.crc32))
                                return "crc32: integer expected";
                        if (message.committed != null && message.hasOwnProperty("committed")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.committed);
                            if (error)
                                return "committed." + error;
                        }
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isInteger(message.nonce))
                                return "nonce: integer expected";
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            if (!$util.isInteger(message.userId))
                                return "userId: integer expected";
                        if (message.author != null && message.hasOwnProperty("author"))
                            switch (message.author) {
                            default:
                                return "author: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a OTPacket message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTPacket} OTPacket
                     */
                    OTPacket.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTPacket)
                            return object;
                        var message = new $root.replit.goval.api.OTPacket();
                        if (object.spookyVersion != null)
                            message.spookyVersion = object.spookyVersion >>> 0;
                        if (object.version != null)
                            message.version = object.version >>> 0;
                        if (object.op) {
                            if (!Array.isArray(object.op))
                                throw TypeError(".replit.goval.api.OTPacket.op: array expected");
                            message.op = [];
                            for (var i = 0; i < object.op.length; ++i) {
                                if (typeof object.op[i] !== "object")
                                    throw TypeError(".replit.goval.api.OTPacket.op: object expected");
                                message.op[i] = $root.replit.goval.api.OTOpComponent.fromObject(object.op[i]);
                            }
                        }
                        if (object.crc32 != null)
                            message.crc32 = object.crc32 >>> 0;
                        if (object.committed != null) {
                            if (typeof object.committed !== "object")
                                throw TypeError(".replit.goval.api.OTPacket.committed: object expected");
                            message.committed = $root.google.protobuf.Timestamp.fromObject(object.committed);
                        }
                        if (object.nonce != null)
                            message.nonce = object.nonce >>> 0;
                        if (object.userId != null)
                            message.userId = object.userId >>> 0;
                        switch (object.author) {
                        case "USER":
                        case 0:
                            message.author = 0;
                            break;
                        case "GHOSTWRITER":
                        case 1:
                            message.author = 1;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTPacket message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTPacket
                     * @static
                     * @param {replit.goval.api.OTPacket} message OTPacket
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTPacket.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.op = [];
                        if (options.defaults) {
                            object.spookyVersion = 0;
                            object.crc32 = 0;
                            object.committed = null;
                            object.version = 0;
                            object.nonce = 0;
                            object.userId = 0;
                            object.author = options.enums === String ? "USER" : 0;
                        }
                        if (message.spookyVersion != null && message.hasOwnProperty("spookyVersion"))
                            object.spookyVersion = message.spookyVersion;
                        if (message.op && message.op.length) {
                            object.op = [];
                            for (var j = 0; j < message.op.length; ++j)
                                object.op[j] = $root.replit.goval.api.OTOpComponent.toObject(message.op[j], options);
                        }
                        if (message.crc32 != null && message.hasOwnProperty("crc32"))
                            object.crc32 = message.crc32;
                        if (message.committed != null && message.hasOwnProperty("committed"))
                            object.committed = $root.google.protobuf.Timestamp.toObject(message.committed, options);
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            object.userId = message.userId;
                        if (message.author != null && message.hasOwnProperty("author"))
                            object.author = options.enums === String ? $root.replit.goval.api.OTPacket.Author[message.author] : message.author;
                        return object;
                    };
    
                    /**
                     * Converts this OTPacket to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTPacket
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTPacket.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Author enum.
                     * @name replit.goval.api.OTPacket.Author
                     * @enum {number}
                     * @property {number} USER=0 USER value
                     * @property {number} GHOSTWRITER=1 GHOSTWRITER value
                     */
                    OTPacket.Author = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "USER"] = 0;
                        values[valuesById[1] = "GHOSTWRITER"] = 1;
                        return values;
                    })();
    
                    return OTPacket;
                })();
    
                api.OTOpComponent = (function() {
    
                    /**
                     * Properties of a OTOpComponent.
                     * @memberof replit.goval.api
                     * @interface IOTOpComponent
                     * @property {number|null} [skip] OTOpComponent skip
                     * @property {number|null} ["delete"] OTOpComponent delete
                     * @property {string|null} [insert] OTOpComponent insert
                     */
    
                    /**
                     * Constructs a new OTOpComponent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTOpComponent.
                     * @constructor
                     * @param {replit.goval.api.IOTOpComponent=} [properties] Properties to set
                     */
                    function OTOpComponent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTOpComponent skip.
                     * @member {number|null|undefined} skip
                     * @memberof replit.goval.api.OTOpComponent
                     * @instance
                     */
                    OTOpComponent.prototype.skip = null;
    
                    /**
                     * OTOpComponent delete.
                     * @member {number|null|undefined} delete
                     * @memberof replit.goval.api.OTOpComponent
                     * @instance
                     */
                    OTOpComponent.prototype["delete"] = null;
    
                    /**
                     * OTOpComponent insert.
                     * @member {string|null|undefined} insert
                     * @memberof replit.goval.api.OTOpComponent
                     * @instance
                     */
                    OTOpComponent.prototype.insert = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * OTOpComponent opComponent.
                     * @member {"skip"|"delete"|"insert"|undefined} opComponent
                     * @memberof replit.goval.api.OTOpComponent
                     * @instance
                     */
                    Object.defineProperty(OTOpComponent.prototype, "opComponent", {
                        get: $util.oneOfGetter($oneOfFields = ["skip", "delete", "insert"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new OTOpComponent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {replit.goval.api.IOTOpComponent=} [properties] Properties to set
                     * @returns {replit.goval.api.OTOpComponent} OTOpComponent instance
                     */
                    OTOpComponent.create = function create(properties) {
                        return OTOpComponent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTOpComponent message. Does not implicitly {@link replit.goval.api.OTOpComponent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {replit.goval.api.OTOpComponent} message OTOpComponent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTOpComponent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.skip != null && Object.hasOwnProperty.call(message, "skip"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.skip);
                        if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message["delete"]);
                        if (message.insert != null && Object.hasOwnProperty.call(message, "insert"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.insert);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTOpComponent message, length delimited. Does not implicitly {@link replit.goval.api.OTOpComponent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {replit.goval.api.OTOpComponent} message OTOpComponent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTOpComponent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTOpComponent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTOpComponent} OTOpComponent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTOpComponent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTOpComponent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.skip = reader.uint32();
                                break;
                            case 2:
                                message["delete"] = reader.uint32();
                                break;
                            case 3:
                                message.insert = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTOpComponent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTOpComponent} OTOpComponent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTOpComponent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTOpComponent message.
                     * @function verify
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTOpComponent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.skip != null && message.hasOwnProperty("skip")) {
                            properties.opComponent = 1;
                            if (!$util.isInteger(message.skip))
                                return "skip: integer expected";
                        }
                        if (message["delete"] != null && message.hasOwnProperty("delete")) {
                            if (properties.opComponent === 1)
                                return "opComponent: multiple values";
                            properties.opComponent = 1;
                            if (!$util.isInteger(message["delete"]))
                                return "delete: integer expected";
                        }
                        if (message.insert != null && message.hasOwnProperty("insert")) {
                            if (properties.opComponent === 1)
                                return "opComponent: multiple values";
                            properties.opComponent = 1;
                            if (!$util.isString(message.insert))
                                return "insert: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a OTOpComponent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTOpComponent} OTOpComponent
                     */
                    OTOpComponent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTOpComponent)
                            return object;
                        var message = new $root.replit.goval.api.OTOpComponent();
                        if (object.skip != null)
                            message.skip = object.skip >>> 0;
                        if (object["delete"] != null)
                            message["delete"] = object["delete"] >>> 0;
                        if (object.insert != null)
                            message.insert = String(object.insert);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTOpComponent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTOpComponent
                     * @static
                     * @param {replit.goval.api.OTOpComponent} message OTOpComponent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTOpComponent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.skip != null && message.hasOwnProperty("skip")) {
                            object.skip = message.skip;
                            if (options.oneofs)
                                object.opComponent = "skip";
                        }
                        if (message["delete"] != null && message.hasOwnProperty("delete")) {
                            object["delete"] = message["delete"];
                            if (options.oneofs)
                                object.opComponent = "delete";
                        }
                        if (message.insert != null && message.hasOwnProperty("insert")) {
                            object.insert = message.insert;
                            if (options.oneofs)
                                object.opComponent = "insert";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this OTOpComponent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTOpComponent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTOpComponent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTOpComponent;
                })();
    
                api.OTStatus = (function() {
    
                    /**
                     * Properties of a OTStatus.
                     * @memberof replit.goval.api
                     * @interface IOTStatus
                     * @property {string|null} [contents] OTStatus contents
                     * @property {number|null} [version] OTStatus version
                     * @property {replit.goval.api.File|replit.goval.api.IFile|null} [linkedFile] OTStatus linkedFile
                     * @property {Array.<replit.goval.api.OTCursor|replit.goval.api.IOTCursor>|null} [cursors] OTStatus cursors
                     */
    
                    /**
                     * Constructs a new OTStatus.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTStatus.
                     * @constructor
                     * @param {replit.goval.api.IOTStatus=} [properties] Properties to set
                     */
                    function OTStatus(properties) {
                        this.cursors = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTStatus contents.
                     * @member {string} contents
                     * @memberof replit.goval.api.OTStatus
                     * @instance
                     */
                    OTStatus.prototype.contents = "";
    
                    /**
                     * OTStatus version.
                     * @member {number} version
                     * @memberof replit.goval.api.OTStatus
                     * @instance
                     */
                    OTStatus.prototype.version = 0;
    
                    /**
                     * OTStatus linkedFile.
                     * @member {replit.goval.api.File|null|undefined} linkedFile
                     * @memberof replit.goval.api.OTStatus
                     * @instance
                     */
                    OTStatus.prototype.linkedFile = null;
    
                    /**
                     * OTStatus cursors.
                     * @member {Array.<replit.goval.api.OTCursor>} cursors
                     * @memberof replit.goval.api.OTStatus
                     * @instance
                     */
                    OTStatus.prototype.cursors = $util.emptyArray;
    
                    /**
                     * Creates a new OTStatus instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {replit.goval.api.IOTStatus=} [properties] Properties to set
                     * @returns {replit.goval.api.OTStatus} OTStatus instance
                     */
                    OTStatus.create = function create(properties) {
                        return OTStatus.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTStatus message. Does not implicitly {@link replit.goval.api.OTStatus.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {replit.goval.api.OTStatus} message OTStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTStatus.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.contents != null && Object.hasOwnProperty.call(message, "contents"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.contents);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.version);
                        if (message.linkedFile != null && Object.hasOwnProperty.call(message, "linkedFile"))
                            $root.replit.goval.api.File.encode(message.linkedFile, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.cursors != null && message.cursors.length)
                            for (var i = 0; i < message.cursors.length; ++i)
                                $root.replit.goval.api.OTCursor.encode(message.cursors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTStatus message, length delimited. Does not implicitly {@link replit.goval.api.OTStatus.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {replit.goval.api.OTStatus} message OTStatus message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTStatus.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTStatus message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTStatus} OTStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTStatus.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTStatus();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.contents = reader.string();
                                break;
                            case 2:
                                message.version = reader.uint32();
                                break;
                            case 3:
                                message.linkedFile = $root.replit.goval.api.File.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.cursors && message.cursors.length))
                                    message.cursors = [];
                                message.cursors.push($root.replit.goval.api.OTCursor.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTStatus message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTStatus} OTStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTStatus.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTStatus message.
                     * @function verify
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTStatus.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.contents != null && message.hasOwnProperty("contents"))
                            if (!$util.isString(message.contents))
                                return "contents: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        if (message.linkedFile != null && message.hasOwnProperty("linkedFile")) {
                            var error = $root.replit.goval.api.File.verify(message.linkedFile);
                            if (error)
                                return "linkedFile." + error;
                        }
                        if (message.cursors != null && message.hasOwnProperty("cursors")) {
                            if (!Array.isArray(message.cursors))
                                return "cursors: array expected";
                            for (var i = 0; i < message.cursors.length; ++i) {
                                var error = $root.replit.goval.api.OTCursor.verify(message.cursors[i]);
                                if (error)
                                    return "cursors." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a OTStatus message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTStatus} OTStatus
                     */
                    OTStatus.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTStatus)
                            return object;
                        var message = new $root.replit.goval.api.OTStatus();
                        if (object.contents != null)
                            message.contents = String(object.contents);
                        if (object.version != null)
                            message.version = object.version >>> 0;
                        if (object.linkedFile != null) {
                            if (typeof object.linkedFile !== "object")
                                throw TypeError(".replit.goval.api.OTStatus.linkedFile: object expected");
                            message.linkedFile = $root.replit.goval.api.File.fromObject(object.linkedFile);
                        }
                        if (object.cursors) {
                            if (!Array.isArray(object.cursors))
                                throw TypeError(".replit.goval.api.OTStatus.cursors: array expected");
                            message.cursors = [];
                            for (var i = 0; i < object.cursors.length; ++i) {
                                if (typeof object.cursors[i] !== "object")
                                    throw TypeError(".replit.goval.api.OTStatus.cursors: object expected");
                                message.cursors[i] = $root.replit.goval.api.OTCursor.fromObject(object.cursors[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTStatus message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTStatus
                     * @static
                     * @param {replit.goval.api.OTStatus} message OTStatus
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTStatus.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.cursors = [];
                        if (options.defaults) {
                            object.contents = "";
                            object.version = 0;
                            object.linkedFile = null;
                        }
                        if (message.contents != null && message.hasOwnProperty("contents"))
                            object.contents = message.contents;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.linkedFile != null && message.hasOwnProperty("linkedFile"))
                            object.linkedFile = $root.replit.goval.api.File.toObject(message.linkedFile, options);
                        if (message.cursors && message.cursors.length) {
                            object.cursors = [];
                            for (var j = 0; j < message.cursors.length; ++j)
                                object.cursors[j] = $root.replit.goval.api.OTCursor.toObject(message.cursors[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this OTStatus to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTStatus
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTStatus.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTStatus;
                })();
    
                api.OTCursor = (function() {
    
                    /**
                     * Properties of a OTCursor.
                     * @memberof replit.goval.api
                     * @interface IOTCursor
                     * @property {number|null} [position] OTCursor position
                     * @property {number|null} [selectionStart] OTCursor selectionStart
                     * @property {number|null} [selectionEnd] OTCursor selectionEnd
                     * @property {replit.goval.api.User|replit.goval.api.IUser|null} [user] OTCursor user
                     * @property {string|null} [id] OTCursor id
                     */
    
                    /**
                     * Constructs a new OTCursor.
                     * @memberof replit.goval.api
                     * @classdesc Represents a OTCursor.
                     * @constructor
                     * @param {replit.goval.api.IOTCursor=} [properties] Properties to set
                     */
                    function OTCursor(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OTCursor position.
                     * @member {number} position
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     */
                    OTCursor.prototype.position = 0;
    
                    /**
                     * OTCursor selectionStart.
                     * @member {number} selectionStart
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     */
                    OTCursor.prototype.selectionStart = 0;
    
                    /**
                     * OTCursor selectionEnd.
                     * @member {number} selectionEnd
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     */
                    OTCursor.prototype.selectionEnd = 0;
    
                    /**
                     * OTCursor user.
                     * @member {replit.goval.api.User|null|undefined} user
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     */
                    OTCursor.prototype.user = null;
    
                    /**
                     * OTCursor id.
                     * @member {string} id
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     */
                    OTCursor.prototype.id = "";
    
                    /**
                     * Creates a new OTCursor instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {replit.goval.api.IOTCursor=} [properties] Properties to set
                     * @returns {replit.goval.api.OTCursor} OTCursor instance
                     */
                    OTCursor.create = function create(properties) {
                        return OTCursor.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OTCursor message. Does not implicitly {@link replit.goval.api.OTCursor.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {replit.goval.api.OTCursor} message OTCursor message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTCursor.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.position);
                        if (message.selectionStart != null && Object.hasOwnProperty.call(message, "selectionStart"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.selectionStart);
                        if (message.selectionEnd != null && Object.hasOwnProperty.call(message, "selectionEnd"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.selectionEnd);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            $root.replit.goval.api.User.encode(message.user, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OTCursor message, length delimited. Does not implicitly {@link replit.goval.api.OTCursor.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {replit.goval.api.OTCursor} message OTCursor message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OTCursor.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a OTCursor message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OTCursor} OTCursor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTCursor.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OTCursor();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.position = reader.uint32();
                                break;
                            case 2:
                                message.selectionStart = reader.uint32();
                                break;
                            case 3:
                                message.selectionEnd = reader.uint32();
                                break;
                            case 4:
                                message.user = $root.replit.goval.api.User.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a OTCursor message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OTCursor} OTCursor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OTCursor.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a OTCursor message.
                     * @function verify
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OTCursor.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.position != null && message.hasOwnProperty("position"))
                            if (!$util.isInteger(message.position))
                                return "position: integer expected";
                        if (message.selectionStart != null && message.hasOwnProperty("selectionStart"))
                            if (!$util.isInteger(message.selectionStart))
                                return "selectionStart: integer expected";
                        if (message.selectionEnd != null && message.hasOwnProperty("selectionEnd"))
                            if (!$util.isInteger(message.selectionEnd))
                                return "selectionEnd: integer expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            var error = $root.replit.goval.api.User.verify(message.user);
                            if (error)
                                return "user." + error;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a OTCursor message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OTCursor} OTCursor
                     */
                    OTCursor.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OTCursor)
                            return object;
                        var message = new $root.replit.goval.api.OTCursor();
                        if (object.position != null)
                            message.position = object.position >>> 0;
                        if (object.selectionStart != null)
                            message.selectionStart = object.selectionStart >>> 0;
                        if (object.selectionEnd != null)
                            message.selectionEnd = object.selectionEnd >>> 0;
                        if (object.user != null) {
                            if (typeof object.user !== "object")
                                throw TypeError(".replit.goval.api.OTCursor.user: object expected");
                            message.user = $root.replit.goval.api.User.fromObject(object.user);
                        }
                        if (object.id != null)
                            message.id = String(object.id);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a OTCursor message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OTCursor
                     * @static
                     * @param {replit.goval.api.OTCursor} message OTCursor
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OTCursor.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.position = 0;
                            object.selectionStart = 0;
                            object.selectionEnd = 0;
                            object.user = null;
                            object.id = "";
                        }
                        if (message.position != null && message.hasOwnProperty("position"))
                            object.position = message.position;
                        if (message.selectionStart != null && message.hasOwnProperty("selectionStart"))
                            object.selectionStart = message.selectionStart;
                        if (message.selectionEnd != null && message.hasOwnProperty("selectionEnd"))
                            object.selectionEnd = message.selectionEnd;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = $root.replit.goval.api.User.toObject(message.user, options);
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };
    
                    /**
                     * Converts this OTCursor to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OTCursor
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OTCursor.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OTCursor;
                })();
    
                api.ChatMessage = (function() {
    
                    /**
                     * Properties of a ChatMessage.
                     * @memberof replit.goval.api
                     * @interface IChatMessage
                     * @property {string|null} [username] ChatMessage username
                     * @property {string|null} [text] ChatMessage text
                     */
    
                    /**
                     * Constructs a new ChatMessage.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ChatMessage.
                     * @constructor
                     * @param {replit.goval.api.IChatMessage=} [properties] Properties to set
                     */
                    function ChatMessage(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ChatMessage username.
                     * @member {string} username
                     * @memberof replit.goval.api.ChatMessage
                     * @instance
                     */
                    ChatMessage.prototype.username = "";
    
                    /**
                     * ChatMessage text.
                     * @member {string} text
                     * @memberof replit.goval.api.ChatMessage
                     * @instance
                     */
                    ChatMessage.prototype.text = "";
    
                    /**
                     * Creates a new ChatMessage instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {replit.goval.api.IChatMessage=} [properties] Properties to set
                     * @returns {replit.goval.api.ChatMessage} ChatMessage instance
                     */
                    ChatMessage.create = function create(properties) {
                        return ChatMessage.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ChatMessage message. Does not implicitly {@link replit.goval.api.ChatMessage.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {replit.goval.api.ChatMessage} message ChatMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatMessage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ChatMessage message, length delimited. Does not implicitly {@link replit.goval.api.ChatMessage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {replit.goval.api.ChatMessage} message ChatMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatMessage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ChatMessage message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ChatMessage} ChatMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatMessage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ChatMessage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.username = reader.string();
                                break;
                            case 2:
                                message.text = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ChatMessage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ChatMessage} ChatMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatMessage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ChatMessage message.
                     * @function verify
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChatMessage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.username != null && message.hasOwnProperty("username"))
                            if (!$util.isString(message.username))
                                return "username: string expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ChatMessage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ChatMessage} ChatMessage
                     */
                    ChatMessage.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ChatMessage)
                            return object;
                        var message = new $root.replit.goval.api.ChatMessage();
                        if (object.username != null)
                            message.username = String(object.username);
                        if (object.text != null)
                            message.text = String(object.text);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ChatMessage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ChatMessage
                     * @static
                     * @param {replit.goval.api.ChatMessage} message ChatMessage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChatMessage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.username = "";
                            object.text = "";
                        }
                        if (message.username != null && message.hasOwnProperty("username"))
                            object.username = message.username;
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        return object;
                    };
    
                    /**
                     * Converts this ChatMessage to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ChatMessage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChatMessage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ChatMessage;
                })();
    
                api.ChatTyping = (function() {
    
                    /**
                     * Properties of a ChatTyping.
                     * @memberof replit.goval.api
                     * @interface IChatTyping
                     * @property {string|null} [username] ChatTyping username
                     * @property {boolean|null} [typing] ChatTyping typing
                     */
    
                    /**
                     * Constructs a new ChatTyping.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ChatTyping.
                     * @constructor
                     * @param {replit.goval.api.IChatTyping=} [properties] Properties to set
                     */
                    function ChatTyping(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ChatTyping username.
                     * @member {string} username
                     * @memberof replit.goval.api.ChatTyping
                     * @instance
                     */
                    ChatTyping.prototype.username = "";
    
                    /**
                     * ChatTyping typing.
                     * @member {boolean} typing
                     * @memberof replit.goval.api.ChatTyping
                     * @instance
                     */
                    ChatTyping.prototype.typing = false;
    
                    /**
                     * Creates a new ChatTyping instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {replit.goval.api.IChatTyping=} [properties] Properties to set
                     * @returns {replit.goval.api.ChatTyping} ChatTyping instance
                     */
                    ChatTyping.create = function create(properties) {
                        return ChatTyping.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ChatTyping message. Does not implicitly {@link replit.goval.api.ChatTyping.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {replit.goval.api.ChatTyping} message ChatTyping message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatTyping.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.username);
                        if (message.typing != null && Object.hasOwnProperty.call(message, "typing"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.typing);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ChatTyping message, length delimited. Does not implicitly {@link replit.goval.api.ChatTyping.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {replit.goval.api.ChatTyping} message ChatTyping message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatTyping.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ChatTyping message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ChatTyping} ChatTyping
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatTyping.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ChatTyping();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.username = reader.string();
                                break;
                            case 2:
                                message.typing = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ChatTyping message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ChatTyping} ChatTyping
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatTyping.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ChatTyping message.
                     * @function verify
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChatTyping.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.username != null && message.hasOwnProperty("username"))
                            if (!$util.isString(message.username))
                                return "username: string expected";
                        if (message.typing != null && message.hasOwnProperty("typing"))
                            if (typeof message.typing !== "boolean")
                                return "typing: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a ChatTyping message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ChatTyping} ChatTyping
                     */
                    ChatTyping.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ChatTyping)
                            return object;
                        var message = new $root.replit.goval.api.ChatTyping();
                        if (object.username != null)
                            message.username = String(object.username);
                        if (object.typing != null)
                            message.typing = Boolean(object.typing);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ChatTyping message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ChatTyping
                     * @static
                     * @param {replit.goval.api.ChatTyping} message ChatTyping
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChatTyping.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.username = "";
                            object.typing = false;
                        }
                        if (message.username != null && message.hasOwnProperty("username"))
                            object.username = message.username;
                        if (message.typing != null && message.hasOwnProperty("typing"))
                            object.typing = message.typing;
                        return object;
                    };
    
                    /**
                     * Converts this ChatTyping to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ChatTyping
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChatTyping.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ChatTyping;
                })();
    
                api.User = (function() {
    
                    /**
                     * Properties of a User.
                     * @memberof replit.goval.api
                     * @interface IUser
                     * @property {number|null} [id] User id
                     * @property {string|null} [name] User name
                     * @property {Array.<string>|null} [roles] User roles
                     * @property {number|null} [session] User session
                     * @property {Array.<string>|null} [teams] User teams
                     * @property {string|null} [bio] User bio
                     * @property {string|null} [url] User url
                     * @property {string|null} [profileImage] User profileImage
                     */
    
                    /**
                     * Constructs a new User.
                     * @memberof replit.goval.api
                     * @classdesc Represents a User.
                     * @constructor
                     * @param {replit.goval.api.IUser=} [properties] Properties to set
                     */
                    function User(properties) {
                        this.roles = [];
                        this.teams = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * User id.
                     * @member {number} id
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.id = 0;
    
                    /**
                     * User name.
                     * @member {string} name
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.name = "";
    
                    /**
                     * User roles.
                     * @member {Array.<string>} roles
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.roles = $util.emptyArray;
    
                    /**
                     * User session.
                     * @member {number} session
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.session = 0;
    
                    /**
                     * User teams.
                     * @member {Array.<string>} teams
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.teams = $util.emptyArray;
    
                    /**
                     * User bio.
                     * @member {string} bio
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.bio = "";
    
                    /**
                     * User url.
                     * @member {string} url
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.url = "";
    
                    /**
                     * User profileImage.
                     * @member {string} profileImage
                     * @memberof replit.goval.api.User
                     * @instance
                     */
                    User.prototype.profileImage = "";
    
                    /**
                     * Creates a new User instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {replit.goval.api.IUser=} [properties] Properties to set
                     * @returns {replit.goval.api.User} User instance
                     */
                    User.create = function create(properties) {
                        return User.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified User message. Does not implicitly {@link replit.goval.api.User.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {replit.goval.api.User} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.roles != null && message.roles.length)
                            for (var i = 0; i < message.roles.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.roles[i]);
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.session);
                        if (message.teams != null && message.teams.length)
                            for (var i = 0; i < message.teams.length; ++i)
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.teams[i]);
                        if (message.bio != null && Object.hasOwnProperty.call(message, "bio"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.bio);
                        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.url);
                        if (message.profileImage != null && Object.hasOwnProperty.call(message, "profileImage"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.profileImage);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link replit.goval.api.User.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {replit.goval.api.User} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    User.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.User();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.uint32();
                                break;
                            case 2:
                                message.name = reader.string();
                                break;
                            case 3:
                                if (!(message.roles && message.roles.length))
                                    message.roles = [];
                                message.roles.push(reader.string());
                                break;
                            case 4:
                                message.session = reader.int32();
                                break;
                            case 5:
                                if (!(message.teams && message.teams.length))
                                    message.teams = [];
                                message.teams.push(reader.string());
                                break;
                            case 6:
                                message.bio = reader.string();
                                break;
                            case 7:
                                message.url = reader.string();
                                break;
                            case 8:
                                message.profileImage = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    User.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a User message.
                     * @function verify
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    User.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id))
                                return "id: integer expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.roles != null && message.hasOwnProperty("roles")) {
                            if (!Array.isArray(message.roles))
                                return "roles: array expected";
                            for (var i = 0; i < message.roles.length; ++i)
                                if (!$util.isString(message.roles[i]))
                                    return "roles: string[] expected";
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        if (message.teams != null && message.hasOwnProperty("teams")) {
                            if (!Array.isArray(message.teams))
                                return "teams: array expected";
                            for (var i = 0; i < message.teams.length; ++i)
                                if (!$util.isString(message.teams[i]))
                                    return "teams: string[] expected";
                        }
                        if (message.bio != null && message.hasOwnProperty("bio"))
                            if (!$util.isString(message.bio))
                                return "bio: string expected";
                        if (message.url != null && message.hasOwnProperty("url"))
                            if (!$util.isString(message.url))
                                return "url: string expected";
                        if (message.profileImage != null && message.hasOwnProperty("profileImage"))
                            if (!$util.isString(message.profileImage))
                                return "profileImage: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.User} User
                     */
                    User.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.User)
                            return object;
                        var message = new $root.replit.goval.api.User();
                        if (object.id != null)
                            message.id = object.id >>> 0;
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.roles) {
                            if (!Array.isArray(object.roles))
                                throw TypeError(".replit.goval.api.User.roles: array expected");
                            message.roles = [];
                            for (var i = 0; i < object.roles.length; ++i)
                                message.roles[i] = String(object.roles[i]);
                        }
                        if (object.session != null)
                            message.session = object.session | 0;
                        if (object.teams) {
                            if (!Array.isArray(object.teams))
                                throw TypeError(".replit.goval.api.User.teams: array expected");
                            message.teams = [];
                            for (var i = 0; i < object.teams.length; ++i)
                                message.teams[i] = String(object.teams[i]);
                        }
                        if (object.bio != null)
                            message.bio = String(object.bio);
                        if (object.url != null)
                            message.url = String(object.url);
                        if (object.profileImage != null)
                            message.profileImage = String(object.profileImage);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.User
                     * @static
                     * @param {replit.goval.api.User} message User
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    User.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.roles = [];
                            object.teams = [];
                        }
                        if (options.defaults) {
                            object.id = 0;
                            object.name = "";
                            object.session = 0;
                            object.bio = "";
                            object.url = "";
                            object.profileImage = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.roles && message.roles.length) {
                            object.roles = [];
                            for (var j = 0; j < message.roles.length; ++j)
                                object.roles[j] = message.roles[j];
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.teams && message.teams.length) {
                            object.teams = [];
                            for (var j = 0; j < message.teams.length; ++j)
                                object.teams[j] = message.teams[j];
                        }
                        if (message.bio != null && message.hasOwnProperty("bio"))
                            object.bio = message.bio;
                        if (message.url != null && message.hasOwnProperty("url"))
                            object.url = message.url;
                        if (message.profileImage != null && message.hasOwnProperty("profileImage"))
                            object.profileImage = message.profileImage;
                        return object;
                    };
    
                    /**
                     * Converts this User to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.User
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    User.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return User;
                })();
    
                api.Roster = (function() {
    
                    /**
                     * Properties of a Roster.
                     * @memberof replit.goval.api
                     * @interface IRoster
                     * @property {Array.<replit.goval.api.User|replit.goval.api.IUser>|null} [user] Roster user
                     * @property {Array.<replit.goval.api.FileOpened|replit.goval.api.IFileOpened>|null} [files] Roster files
                     */
    
                    /**
                     * Constructs a new Roster.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Roster.
                     * @constructor
                     * @param {replit.goval.api.IRoster=} [properties] Properties to set
                     */
                    function Roster(properties) {
                        this.user = [];
                        this.files = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Roster user.
                     * @member {Array.<replit.goval.api.User>} user
                     * @memberof replit.goval.api.Roster
                     * @instance
                     */
                    Roster.prototype.user = $util.emptyArray;
    
                    /**
                     * Roster files.
                     * @member {Array.<replit.goval.api.FileOpened>} files
                     * @memberof replit.goval.api.Roster
                     * @instance
                     */
                    Roster.prototype.files = $util.emptyArray;
    
                    /**
                     * Creates a new Roster instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {replit.goval.api.IRoster=} [properties] Properties to set
                     * @returns {replit.goval.api.Roster} Roster instance
                     */
                    Roster.create = function create(properties) {
                        return Roster.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Roster message. Does not implicitly {@link replit.goval.api.Roster.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {replit.goval.api.Roster} message Roster message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Roster.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.user != null && message.user.length)
                            for (var i = 0; i < message.user.length; ++i)
                                $root.replit.goval.api.User.encode(message.user[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.files != null && message.files.length)
                            for (var i = 0; i < message.files.length; ++i)
                                $root.replit.goval.api.FileOpened.encode(message.files[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Roster message, length delimited. Does not implicitly {@link replit.goval.api.Roster.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {replit.goval.api.Roster} message Roster message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Roster.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Roster message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Roster} Roster
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Roster.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Roster();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.user && message.user.length))
                                    message.user = [];
                                message.user.push($root.replit.goval.api.User.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.files && message.files.length))
                                    message.files = [];
                                message.files.push($root.replit.goval.api.FileOpened.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Roster message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Roster} Roster
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Roster.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Roster message.
                     * @function verify
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Roster.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.user != null && message.hasOwnProperty("user")) {
                            if (!Array.isArray(message.user))
                                return "user: array expected";
                            for (var i = 0; i < message.user.length; ++i) {
                                var error = $root.replit.goval.api.User.verify(message.user[i]);
                                if (error)
                                    return "user." + error;
                            }
                        }
                        if (message.files != null && message.hasOwnProperty("files")) {
                            if (!Array.isArray(message.files))
                                return "files: array expected";
                            for (var i = 0; i < message.files.length; ++i) {
                                var error = $root.replit.goval.api.FileOpened.verify(message.files[i]);
                                if (error)
                                    return "files." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Roster message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Roster} Roster
                     */
                    Roster.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Roster)
                            return object;
                        var message = new $root.replit.goval.api.Roster();
                        if (object.user) {
                            if (!Array.isArray(object.user))
                                throw TypeError(".replit.goval.api.Roster.user: array expected");
                            message.user = [];
                            for (var i = 0; i < object.user.length; ++i) {
                                if (typeof object.user[i] !== "object")
                                    throw TypeError(".replit.goval.api.Roster.user: object expected");
                                message.user[i] = $root.replit.goval.api.User.fromObject(object.user[i]);
                            }
                        }
                        if (object.files) {
                            if (!Array.isArray(object.files))
                                throw TypeError(".replit.goval.api.Roster.files: array expected");
                            message.files = [];
                            for (var i = 0; i < object.files.length; ++i) {
                                if (typeof object.files[i] !== "object")
                                    throw TypeError(".replit.goval.api.Roster.files: object expected");
                                message.files[i] = $root.replit.goval.api.FileOpened.fromObject(object.files[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Roster message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Roster
                     * @static
                     * @param {replit.goval.api.Roster} message Roster
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Roster.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.user = [];
                            object.files = [];
                        }
                        if (message.user && message.user.length) {
                            object.user = [];
                            for (var j = 0; j < message.user.length; ++j)
                                object.user[j] = $root.replit.goval.api.User.toObject(message.user[j], options);
                        }
                        if (message.files && message.files.length) {
                            object.files = [];
                            for (var j = 0; j < message.files.length; ++j)
                                object.files[j] = $root.replit.goval.api.FileOpened.toObject(message.files[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Roster to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Roster
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Roster.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Roster;
                })();
    
                api.OpenFile = (function() {
    
                    /**
                     * Properties of an OpenFile.
                     * @memberof replit.goval.api
                     * @interface IOpenFile
                     * @property {string|null} [file] OpenFile file
                     */
    
                    /**
                     * Constructs a new OpenFile.
                     * @memberof replit.goval.api
                     * @classdesc Represents an OpenFile.
                     * @constructor
                     * @param {replit.goval.api.IOpenFile=} [properties] Properties to set
                     */
                    function OpenFile(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * OpenFile file.
                     * @member {string} file
                     * @memberof replit.goval.api.OpenFile
                     * @instance
                     */
                    OpenFile.prototype.file = "";
    
                    /**
                     * Creates a new OpenFile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {replit.goval.api.IOpenFile=} [properties] Properties to set
                     * @returns {replit.goval.api.OpenFile} OpenFile instance
                     */
                    OpenFile.create = function create(properties) {
                        return OpenFile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified OpenFile message. Does not implicitly {@link replit.goval.api.OpenFile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {replit.goval.api.OpenFile} message OpenFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenFile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified OpenFile message, length delimited. Does not implicitly {@link replit.goval.api.OpenFile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {replit.goval.api.OpenFile} message OpenFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    OpenFile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an OpenFile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.OpenFile} OpenFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenFile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.OpenFile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an OpenFile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.OpenFile} OpenFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    OpenFile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an OpenFile message.
                     * @function verify
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    OpenFile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file"))
                            if (!$util.isString(message.file))
                                return "file: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an OpenFile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.OpenFile} OpenFile
                     */
                    OpenFile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.OpenFile)
                            return object;
                        var message = new $root.replit.goval.api.OpenFile();
                        if (object.file != null)
                            message.file = String(object.file);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an OpenFile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.OpenFile
                     * @static
                     * @param {replit.goval.api.OpenFile} message OpenFile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    OpenFile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.file = "";
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = message.file;
                        return object;
                    };
    
                    /**
                     * Converts this OpenFile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.OpenFile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    OpenFile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return OpenFile;
                })();
    
                api.FileOpened = (function() {
    
                    /**
                     * Properties of a FileOpened.
                     * @memberof replit.goval.api
                     * @interface IFileOpened
                     * @property {number|null} [userId] FileOpened userId
                     * @property {string|null} [file] FileOpened file
                     * @property {number|null} [session] FileOpened session
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [timestamp] FileOpened timestamp
                     */
    
                    /**
                     * Constructs a new FileOpened.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FileOpened.
                     * @constructor
                     * @param {replit.goval.api.IFileOpened=} [properties] Properties to set
                     */
                    function FileOpened(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FileOpened userId.
                     * @member {number} userId
                     * @memberof replit.goval.api.FileOpened
                     * @instance
                     */
                    FileOpened.prototype.userId = 0;
    
                    /**
                     * FileOpened file.
                     * @member {string} file
                     * @memberof replit.goval.api.FileOpened
                     * @instance
                     */
                    FileOpened.prototype.file = "";
    
                    /**
                     * FileOpened session.
                     * @member {number} session
                     * @memberof replit.goval.api.FileOpened
                     * @instance
                     */
                    FileOpened.prototype.session = 0;
    
                    /**
                     * FileOpened timestamp.
                     * @member {google.protobuf.Timestamp|null|undefined} timestamp
                     * @memberof replit.goval.api.FileOpened
                     * @instance
                     */
                    FileOpened.prototype.timestamp = null;
    
                    /**
                     * Creates a new FileOpened instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {replit.goval.api.IFileOpened=} [properties] Properties to set
                     * @returns {replit.goval.api.FileOpened} FileOpened instance
                     */
                    FileOpened.create = function create(properties) {
                        return FileOpened.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FileOpened message. Does not implicitly {@link replit.goval.api.FileOpened.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {replit.goval.api.FileOpened} message FileOpened message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileOpened.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.file);
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.session);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FileOpened message, length delimited. Does not implicitly {@link replit.goval.api.FileOpened.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {replit.goval.api.FileOpened} message FileOpened message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FileOpened.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FileOpened message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FileOpened} FileOpened
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileOpened.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FileOpened();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.userId = reader.uint32();
                                break;
                            case 2:
                                message.file = reader.string();
                                break;
                            case 3:
                                message.session = reader.int32();
                                break;
                            case 4:
                                message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FileOpened message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FileOpened} FileOpened
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FileOpened.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FileOpened message.
                     * @function verify
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FileOpened.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            if (!$util.isInteger(message.userId))
                                return "userId: integer expected";
                        if (message.file != null && message.hasOwnProperty("file"))
                            if (!$util.isString(message.file))
                                return "file: string expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a FileOpened message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FileOpened} FileOpened
                     */
                    FileOpened.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FileOpened)
                            return object;
                        var message = new $root.replit.goval.api.FileOpened();
                        if (object.userId != null)
                            message.userId = object.userId >>> 0;
                        if (object.file != null)
                            message.file = String(object.file);
                        if (object.session != null)
                            message.session = object.session | 0;
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".replit.goval.api.FileOpened.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FileOpened message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FileOpened
                     * @static
                     * @param {replit.goval.api.FileOpened} message FileOpened
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FileOpened.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.userId = 0;
                            object.file = "";
                            object.session = 0;
                            object.timestamp = null;
                        }
                        if (message.userId != null && message.hasOwnProperty("userId"))
                            object.userId = message.userId;
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = message.file;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        return object;
                    };
    
                    /**
                     * Converts this FileOpened to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FileOpened
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FileOpened.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FileOpened;
                })();
    
                api.ReplspaceApiOpenFile = (function() {
    
                    /**
                     * Properties of a ReplspaceApiOpenFile.
                     * @memberof replit.goval.api
                     * @interface IReplspaceApiOpenFile
                     * @property {string|null} [file] ReplspaceApiOpenFile file
                     * @property {boolean|null} [waitForClose] ReplspaceApiOpenFile waitForClose
                     * @property {string|null} [nonce] ReplspaceApiOpenFile nonce
                     */
    
                    /**
                     * Constructs a new ReplspaceApiOpenFile.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplspaceApiOpenFile.
                     * @constructor
                     * @param {replit.goval.api.IReplspaceApiOpenFile=} [properties] Properties to set
                     */
                    function ReplspaceApiOpenFile(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplspaceApiOpenFile file.
                     * @member {string} file
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @instance
                     */
                    ReplspaceApiOpenFile.prototype.file = "";
    
                    /**
                     * ReplspaceApiOpenFile waitForClose.
                     * @member {boolean} waitForClose
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @instance
                     */
                    ReplspaceApiOpenFile.prototype.waitForClose = false;
    
                    /**
                     * ReplspaceApiOpenFile nonce.
                     * @member {string} nonce
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @instance
                     */
                    ReplspaceApiOpenFile.prototype.nonce = "";
    
                    /**
                     * Creates a new ReplspaceApiOpenFile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {replit.goval.api.IReplspaceApiOpenFile=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplspaceApiOpenFile} ReplspaceApiOpenFile instance
                     */
                    ReplspaceApiOpenFile.create = function create(properties) {
                        return ReplspaceApiOpenFile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiOpenFile message. Does not implicitly {@link replit.goval.api.ReplspaceApiOpenFile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiOpenFile} message ReplspaceApiOpenFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiOpenFile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
                        if (message.waitForClose != null && Object.hasOwnProperty.call(message, "waitForClose"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.waitForClose);
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.nonce);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiOpenFile message, length delimited. Does not implicitly {@link replit.goval.api.ReplspaceApiOpenFile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiOpenFile} message ReplspaceApiOpenFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiOpenFile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplspaceApiOpenFile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplspaceApiOpenFile} ReplspaceApiOpenFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiOpenFile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplspaceApiOpenFile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = reader.string();
                                break;
                            case 2:
                                message.waitForClose = reader.bool();
                                break;
                            case 3:
                                message.nonce = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplspaceApiOpenFile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplspaceApiOpenFile} ReplspaceApiOpenFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiOpenFile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplspaceApiOpenFile message.
                     * @function verify
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplspaceApiOpenFile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file"))
                            if (!$util.isString(message.file))
                                return "file: string expected";
                        if (message.waitForClose != null && message.hasOwnProperty("waitForClose"))
                            if (typeof message.waitForClose !== "boolean")
                                return "waitForClose: boolean expected";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isString(message.nonce))
                                return "nonce: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReplspaceApiOpenFile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplspaceApiOpenFile} ReplspaceApiOpenFile
                     */
                    ReplspaceApiOpenFile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplspaceApiOpenFile)
                            return object;
                        var message = new $root.replit.goval.api.ReplspaceApiOpenFile();
                        if (object.file != null)
                            message.file = String(object.file);
                        if (object.waitForClose != null)
                            message.waitForClose = Boolean(object.waitForClose);
                        if (object.nonce != null)
                            message.nonce = String(object.nonce);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplspaceApiOpenFile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiOpenFile} message ReplspaceApiOpenFile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplspaceApiOpenFile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = "";
                            object.waitForClose = false;
                            object.nonce = "";
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = message.file;
                        if (message.waitForClose != null && message.hasOwnProperty("waitForClose"))
                            object.waitForClose = message.waitForClose;
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        return object;
                    };
    
                    /**
                     * Converts this ReplspaceApiOpenFile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplspaceApiOpenFile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplspaceApiOpenFile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplspaceApiOpenFile;
                })();
    
                api.ReplspaceApiCloseFile = (function() {
    
                    /**
                     * Properties of a ReplspaceApiCloseFile.
                     * @memberof replit.goval.api
                     * @interface IReplspaceApiCloseFile
                     * @property {string|null} [file] ReplspaceApiCloseFile file
                     * @property {string|null} [nonce] ReplspaceApiCloseFile nonce
                     */
    
                    /**
                     * Constructs a new ReplspaceApiCloseFile.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplspaceApiCloseFile.
                     * @constructor
                     * @param {replit.goval.api.IReplspaceApiCloseFile=} [properties] Properties to set
                     */
                    function ReplspaceApiCloseFile(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplspaceApiCloseFile file.
                     * @member {string} file
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @instance
                     */
                    ReplspaceApiCloseFile.prototype.file = "";
    
                    /**
                     * ReplspaceApiCloseFile nonce.
                     * @member {string} nonce
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @instance
                     */
                    ReplspaceApiCloseFile.prototype.nonce = "";
    
                    /**
                     * Creates a new ReplspaceApiCloseFile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {replit.goval.api.IReplspaceApiCloseFile=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplspaceApiCloseFile} ReplspaceApiCloseFile instance
                     */
                    ReplspaceApiCloseFile.create = function create(properties) {
                        return ReplspaceApiCloseFile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiCloseFile message. Does not implicitly {@link replit.goval.api.ReplspaceApiCloseFile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiCloseFile} message ReplspaceApiCloseFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiCloseFile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.nonce);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiCloseFile message, length delimited. Does not implicitly {@link replit.goval.api.ReplspaceApiCloseFile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiCloseFile} message ReplspaceApiCloseFile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiCloseFile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplspaceApiCloseFile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplspaceApiCloseFile} ReplspaceApiCloseFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiCloseFile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplspaceApiCloseFile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.file = reader.string();
                                break;
                            case 2:
                                message.nonce = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplspaceApiCloseFile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplspaceApiCloseFile} ReplspaceApiCloseFile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiCloseFile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplspaceApiCloseFile message.
                     * @function verify
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplspaceApiCloseFile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.file != null && message.hasOwnProperty("file"))
                            if (!$util.isString(message.file))
                                return "file: string expected";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isString(message.nonce))
                                return "nonce: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReplspaceApiCloseFile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplspaceApiCloseFile} ReplspaceApiCloseFile
                     */
                    ReplspaceApiCloseFile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplspaceApiCloseFile)
                            return object;
                        var message = new $root.replit.goval.api.ReplspaceApiCloseFile();
                        if (object.file != null)
                            message.file = String(object.file);
                        if (object.nonce != null)
                            message.nonce = String(object.nonce);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplspaceApiCloseFile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @static
                     * @param {replit.goval.api.ReplspaceApiCloseFile} message ReplspaceApiCloseFile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplspaceApiCloseFile.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.file = "";
                            object.nonce = "";
                        }
                        if (message.file != null && message.hasOwnProperty("file"))
                            object.file = message.file;
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        return object;
                    };
    
                    /**
                     * Converts this ReplspaceApiCloseFile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplspaceApiCloseFile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplspaceApiCloseFile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplspaceApiCloseFile;
                })();
    
                api.ReplspaceApiGetGitHubToken = (function() {
    
                    /**
                     * Properties of a ReplspaceApiGetGitHubToken.
                     * @memberof replit.goval.api
                     * @interface IReplspaceApiGetGitHubToken
                     * @property {string|null} [nonce] ReplspaceApiGetGitHubToken nonce
                     */
    
                    /**
                     * Constructs a new ReplspaceApiGetGitHubToken.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplspaceApiGetGitHubToken.
                     * @constructor
                     * @param {replit.goval.api.IReplspaceApiGetGitHubToken=} [properties] Properties to set
                     */
                    function ReplspaceApiGetGitHubToken(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplspaceApiGetGitHubToken nonce.
                     * @member {string} nonce
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @instance
                     */
                    ReplspaceApiGetGitHubToken.prototype.nonce = "";
    
                    /**
                     * Creates a new ReplspaceApiGetGitHubToken instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {replit.goval.api.IReplspaceApiGetGitHubToken=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplspaceApiGetGitHubToken} ReplspaceApiGetGitHubToken instance
                     */
                    ReplspaceApiGetGitHubToken.create = function create(properties) {
                        return ReplspaceApiGetGitHubToken.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiGetGitHubToken message. Does not implicitly {@link replit.goval.api.ReplspaceApiGetGitHubToken.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGetGitHubToken} message ReplspaceApiGetGitHubToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiGetGitHubToken.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiGetGitHubToken message, length delimited. Does not implicitly {@link replit.goval.api.ReplspaceApiGetGitHubToken.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGetGitHubToken} message ReplspaceApiGetGitHubToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiGetGitHubToken.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplspaceApiGetGitHubToken message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplspaceApiGetGitHubToken} ReplspaceApiGetGitHubToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiGetGitHubToken.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplspaceApiGetGitHubToken();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.nonce = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplspaceApiGetGitHubToken message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplspaceApiGetGitHubToken} ReplspaceApiGetGitHubToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiGetGitHubToken.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplspaceApiGetGitHubToken message.
                     * @function verify
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplspaceApiGetGitHubToken.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isString(message.nonce))
                                return "nonce: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReplspaceApiGetGitHubToken message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplspaceApiGetGitHubToken} ReplspaceApiGetGitHubToken
                     */
                    ReplspaceApiGetGitHubToken.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplspaceApiGetGitHubToken)
                            return object;
                        var message = new $root.replit.goval.api.ReplspaceApiGetGitHubToken();
                        if (object.nonce != null)
                            message.nonce = String(object.nonce);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplspaceApiGetGitHubToken message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGetGitHubToken} message ReplspaceApiGetGitHubToken
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplspaceApiGetGitHubToken.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.nonce = "";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        return object;
                    };
    
                    /**
                     * Converts this ReplspaceApiGetGitHubToken to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplspaceApiGetGitHubToken
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplspaceApiGetGitHubToken.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplspaceApiGetGitHubToken;
                })();
    
                api.ReplspaceApiGitHubToken = (function() {
    
                    /**
                     * Properties of a ReplspaceApiGitHubToken.
                     * @memberof replit.goval.api
                     * @interface IReplspaceApiGitHubToken
                     * @property {string|null} [nonce] ReplspaceApiGitHubToken nonce
                     * @property {string|null} [token] ReplspaceApiGitHubToken token
                     */
    
                    /**
                     * Constructs a new ReplspaceApiGitHubToken.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplspaceApiGitHubToken.
                     * @constructor
                     * @param {replit.goval.api.IReplspaceApiGitHubToken=} [properties] Properties to set
                     */
                    function ReplspaceApiGitHubToken(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplspaceApiGitHubToken nonce.
                     * @member {string} nonce
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @instance
                     */
                    ReplspaceApiGitHubToken.prototype.nonce = "";
    
                    /**
                     * ReplspaceApiGitHubToken token.
                     * @member {string} token
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @instance
                     */
                    ReplspaceApiGitHubToken.prototype.token = "";
    
                    /**
                     * Creates a new ReplspaceApiGitHubToken instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {replit.goval.api.IReplspaceApiGitHubToken=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplspaceApiGitHubToken} ReplspaceApiGitHubToken instance
                     */
                    ReplspaceApiGitHubToken.create = function create(properties) {
                        return ReplspaceApiGitHubToken.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiGitHubToken message. Does not implicitly {@link replit.goval.api.ReplspaceApiGitHubToken.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGitHubToken} message ReplspaceApiGitHubToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiGitHubToken.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.nonce);
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplspaceApiGitHubToken message, length delimited. Does not implicitly {@link replit.goval.api.ReplspaceApiGitHubToken.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGitHubToken} message ReplspaceApiGitHubToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplspaceApiGitHubToken.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplspaceApiGitHubToken message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplspaceApiGitHubToken} ReplspaceApiGitHubToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiGitHubToken.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplspaceApiGitHubToken();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.nonce = reader.string();
                                break;
                            case 2:
                                message.token = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplspaceApiGitHubToken message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplspaceApiGitHubToken} ReplspaceApiGitHubToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplspaceApiGitHubToken.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplspaceApiGitHubToken message.
                     * @function verify
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplspaceApiGitHubToken.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            if (!$util.isString(message.nonce))
                                return "nonce: string expected";
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReplspaceApiGitHubToken message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplspaceApiGitHubToken} ReplspaceApiGitHubToken
                     */
                    ReplspaceApiGitHubToken.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplspaceApiGitHubToken)
                            return object;
                        var message = new $root.replit.goval.api.ReplspaceApiGitHubToken();
                        if (object.nonce != null)
                            message.nonce = String(object.nonce);
                        if (object.token != null)
                            message.token = String(object.token);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplspaceApiGitHubToken message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @static
                     * @param {replit.goval.api.ReplspaceApiGitHubToken} message ReplspaceApiGitHubToken
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplspaceApiGitHubToken.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.nonce = "";
                            object.token = "";
                        }
                        if (message.nonce != null && message.hasOwnProperty("nonce"))
                            object.nonce = message.nonce;
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        return object;
                    };
    
                    /**
                     * Converts this ReplspaceApiGitHubToken to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplspaceApiGitHubToken
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplspaceApiGitHubToken.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplspaceApiGitHubToken;
                })();
    
                api.UpdateSessionTimestamp = (function() {
    
                    /**
                     * Properties of an UpdateSessionTimestamp.
                     * @memberof replit.goval.api
                     * @interface IUpdateSessionTimestamp
                     */
    
                    /**
                     * Constructs a new UpdateSessionTimestamp.
                     * @memberof replit.goval.api
                     * @classdesc Represents an UpdateSessionTimestamp.
                     * @constructor
                     * @param {replit.goval.api.IUpdateSessionTimestamp=} [properties] Properties to set
                     */
                    function UpdateSessionTimestamp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new UpdateSessionTimestamp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {replit.goval.api.IUpdateSessionTimestamp=} [properties] Properties to set
                     * @returns {replit.goval.api.UpdateSessionTimestamp} UpdateSessionTimestamp instance
                     */
                    UpdateSessionTimestamp.create = function create(properties) {
                        return UpdateSessionTimestamp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateSessionTimestamp message. Does not implicitly {@link replit.goval.api.UpdateSessionTimestamp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {replit.goval.api.UpdateSessionTimestamp} message UpdateSessionTimestamp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSessionTimestamp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateSessionTimestamp message, length delimited. Does not implicitly {@link replit.goval.api.UpdateSessionTimestamp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {replit.goval.api.UpdateSessionTimestamp} message UpdateSessionTimestamp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSessionTimestamp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateSessionTimestamp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.UpdateSessionTimestamp} UpdateSessionTimestamp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSessionTimestamp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.UpdateSessionTimestamp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateSessionTimestamp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.UpdateSessionTimestamp} UpdateSessionTimestamp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSessionTimestamp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateSessionTimestamp message.
                     * @function verify
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateSessionTimestamp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates an UpdateSessionTimestamp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.UpdateSessionTimestamp} UpdateSessionTimestamp
                     */
                    UpdateSessionTimestamp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.UpdateSessionTimestamp)
                            return object;
                        return new $root.replit.goval.api.UpdateSessionTimestamp();
                    };
    
                    /**
                     * Creates a plain object from an UpdateSessionTimestamp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @static
                     * @param {replit.goval.api.UpdateSessionTimestamp} message UpdateSessionTimestamp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateSessionTimestamp.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this UpdateSessionTimestamp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.UpdateSessionTimestamp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateSessionTimestamp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateSessionTimestamp;
                })();
    
                api.SessionTimestampUpdated = (function() {
    
                    /**
                     * Properties of a SessionTimestampUpdated.
                     * @memberof replit.goval.api
                     * @interface ISessionTimestampUpdated
                     * @property {number|null} [session] SessionTimestampUpdated session
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [timestamp] SessionTimestampUpdated timestamp
                     */
    
                    /**
                     * Constructs a new SessionTimestampUpdated.
                     * @memberof replit.goval.api
                     * @classdesc Represents a SessionTimestampUpdated.
                     * @constructor
                     * @param {replit.goval.api.ISessionTimestampUpdated=} [properties] Properties to set
                     */
                    function SessionTimestampUpdated(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SessionTimestampUpdated session.
                     * @member {number} session
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @instance
                     */
                    SessionTimestampUpdated.prototype.session = 0;
    
                    /**
                     * SessionTimestampUpdated timestamp.
                     * @member {google.protobuf.Timestamp|null|undefined} timestamp
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @instance
                     */
                    SessionTimestampUpdated.prototype.timestamp = null;
    
                    /**
                     * Creates a new SessionTimestampUpdated instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {replit.goval.api.ISessionTimestampUpdated=} [properties] Properties to set
                     * @returns {replit.goval.api.SessionTimestampUpdated} SessionTimestampUpdated instance
                     */
                    SessionTimestampUpdated.create = function create(properties) {
                        return SessionTimestampUpdated.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified SessionTimestampUpdated message. Does not implicitly {@link replit.goval.api.SessionTimestampUpdated.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {replit.goval.api.SessionTimestampUpdated} message SessionTimestampUpdated message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SessionTimestampUpdated.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.session);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SessionTimestampUpdated message, length delimited. Does not implicitly {@link replit.goval.api.SessionTimestampUpdated.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {replit.goval.api.SessionTimestampUpdated} message SessionTimestampUpdated message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SessionTimestampUpdated.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SessionTimestampUpdated message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.SessionTimestampUpdated} SessionTimestampUpdated
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SessionTimestampUpdated.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.SessionTimestampUpdated();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.int32();
                                break;
                            case 2:
                                message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SessionTimestampUpdated message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.SessionTimestampUpdated} SessionTimestampUpdated
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SessionTimestampUpdated.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SessionTimestampUpdated message.
                     * @function verify
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SessionTimestampUpdated.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SessionTimestampUpdated message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.SessionTimestampUpdated} SessionTimestampUpdated
                     */
                    SessionTimestampUpdated.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.SessionTimestampUpdated)
                            return object;
                        var message = new $root.replit.goval.api.SessionTimestampUpdated();
                        if (object.session != null)
                            message.session = object.session | 0;
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".replit.goval.api.SessionTimestampUpdated.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SessionTimestampUpdated message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @static
                     * @param {replit.goval.api.SessionTimestampUpdated} message SessionTimestampUpdated
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SessionTimestampUpdated.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.session = 0;
                            object.timestamp = null;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        return object;
                    };
    
                    /**
                     * Converts this SessionTimestampUpdated to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.SessionTimestampUpdated
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SessionTimestampUpdated.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SessionTimestampUpdated;
                })();
    
                api.FollowUser = (function() {
    
                    /**
                     * Properties of a FollowUser.
                     * @memberof replit.goval.api
                     * @interface IFollowUser
                     * @property {number|null} [session] FollowUser session
                     */
    
                    /**
                     * Constructs a new FollowUser.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FollowUser.
                     * @constructor
                     * @param {replit.goval.api.IFollowUser=} [properties] Properties to set
                     */
                    function FollowUser(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * FollowUser session.
                     * @member {number} session
                     * @memberof replit.goval.api.FollowUser
                     * @instance
                     */
                    FollowUser.prototype.session = 0;
    
                    /**
                     * Creates a new FollowUser instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {replit.goval.api.IFollowUser=} [properties] Properties to set
                     * @returns {replit.goval.api.FollowUser} FollowUser instance
                     */
                    FollowUser.create = function create(properties) {
                        return FollowUser.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FollowUser message. Does not implicitly {@link replit.goval.api.FollowUser.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {replit.goval.api.FollowUser} message FollowUser message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FollowUser.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.session);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FollowUser message, length delimited. Does not implicitly {@link replit.goval.api.FollowUser.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {replit.goval.api.FollowUser} message FollowUser message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FollowUser.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FollowUser message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FollowUser} FollowUser
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FollowUser.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FollowUser();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FollowUser message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FollowUser} FollowUser
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FollowUser.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FollowUser message.
                     * @function verify
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FollowUser.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a FollowUser message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FollowUser} FollowUser
                     */
                    FollowUser.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FollowUser)
                            return object;
                        var message = new $root.replit.goval.api.FollowUser();
                        if (object.session != null)
                            message.session = object.session | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a FollowUser message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FollowUser
                     * @static
                     * @param {replit.goval.api.FollowUser} message FollowUser
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FollowUser.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = 0;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        return object;
                    };
    
                    /**
                     * Converts this FollowUser to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FollowUser
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FollowUser.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FollowUser;
                })();
    
                api.UnfollowUser = (function() {
    
                    /**
                     * Properties of an UnfollowUser.
                     * @memberof replit.goval.api
                     * @interface IUnfollowUser
                     * @property {number|null} [session] UnfollowUser session
                     */
    
                    /**
                     * Constructs a new UnfollowUser.
                     * @memberof replit.goval.api
                     * @classdesc Represents an UnfollowUser.
                     * @constructor
                     * @param {replit.goval.api.IUnfollowUser=} [properties] Properties to set
                     */
                    function UnfollowUser(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UnfollowUser session.
                     * @member {number} session
                     * @memberof replit.goval.api.UnfollowUser
                     * @instance
                     */
                    UnfollowUser.prototype.session = 0;
    
                    /**
                     * Creates a new UnfollowUser instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {replit.goval.api.IUnfollowUser=} [properties] Properties to set
                     * @returns {replit.goval.api.UnfollowUser} UnfollowUser instance
                     */
                    UnfollowUser.create = function create(properties) {
                        return UnfollowUser.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified UnfollowUser message. Does not implicitly {@link replit.goval.api.UnfollowUser.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {replit.goval.api.UnfollowUser} message UnfollowUser message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UnfollowUser.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.session);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UnfollowUser message, length delimited. Does not implicitly {@link replit.goval.api.UnfollowUser.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {replit.goval.api.UnfollowUser} message UnfollowUser message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UnfollowUser.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UnfollowUser message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.UnfollowUser} UnfollowUser
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UnfollowUser.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.UnfollowUser();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UnfollowUser message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.UnfollowUser} UnfollowUser
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UnfollowUser.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UnfollowUser message.
                     * @function verify
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UnfollowUser.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isInteger(message.session))
                                return "session: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an UnfollowUser message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.UnfollowUser} UnfollowUser
                     */
                    UnfollowUser.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.UnfollowUser)
                            return object;
                        var message = new $root.replit.goval.api.UnfollowUser();
                        if (object.session != null)
                            message.session = object.session | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UnfollowUser message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.UnfollowUser
                     * @static
                     * @param {replit.goval.api.UnfollowUser} message UnfollowUser
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UnfollowUser.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = 0;
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        return object;
                    };
    
                    /**
                     * Converts this UnfollowUser to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.UnfollowUser
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UnfollowUser.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UnfollowUser;
                })();
    
                api.Exec = (function() {
    
                    /**
                     * Properties of an Exec.
                     * @memberof replit.goval.api
                     * @interface IExec
                     * @property {Array.<string>|null} [args] Exec args
                     * @property {Object.<string,string>|null} [env] Exec env
                     * @property {boolean|null} [blocking] Exec blocking
                     * @property {replit.goval.api.Exec.Lifecycle|null} [lifecycle] Exec lifecycle
                     * @property {boolean|null} [splitStderr] Exec splitStderr
                     * @property {boolean|null} [splitLogs] Exec splitLogs
                     */
    
                    /**
                     * Constructs a new Exec.
                     * @memberof replit.goval.api
                     * @classdesc Represents an Exec.
                     * @constructor
                     * @param {replit.goval.api.IExec=} [properties] Properties to set
                     */
                    function Exec(properties) {
                        this.args = [];
                        this.env = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Exec args.
                     * @member {Array.<string>} args
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.args = $util.emptyArray;
    
                    /**
                     * Exec env.
                     * @member {Object.<string,string>} env
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.env = $util.emptyObject;
    
                    /**
                     * Exec blocking.
                     * @member {boolean} blocking
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.blocking = false;
    
                    /**
                     * Exec lifecycle.
                     * @member {replit.goval.api.Exec.Lifecycle} lifecycle
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.lifecycle = 0;
    
                    /**
                     * Exec splitStderr.
                     * @member {boolean} splitStderr
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.splitStderr = false;
    
                    /**
                     * Exec splitLogs.
                     * @member {boolean} splitLogs
                     * @memberof replit.goval.api.Exec
                     * @instance
                     */
                    Exec.prototype.splitLogs = false;
    
                    /**
                     * Creates a new Exec instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {replit.goval.api.IExec=} [properties] Properties to set
                     * @returns {replit.goval.api.Exec} Exec instance
                     */
                    Exec.create = function create(properties) {
                        return Exec.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Exec message. Does not implicitly {@link replit.goval.api.Exec.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {replit.goval.api.Exec} message Exec message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Exec.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.args != null && message.args.length)
                            for (var i = 0; i < message.args.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.args[i]);
                        if (message.env != null && Object.hasOwnProperty.call(message, "env"))
                            for (var keys = Object.keys(message.env), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.env[keys[i]]).ldelim();
                        if (message.blocking != null && Object.hasOwnProperty.call(message, "blocking"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.blocking);
                        if (message.splitStderr != null && Object.hasOwnProperty.call(message, "splitStderr"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.splitStderr);
                        if (message.splitLogs != null && Object.hasOwnProperty.call(message, "splitLogs"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.splitLogs);
                        if (message.lifecycle != null && Object.hasOwnProperty.call(message, "lifecycle"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.lifecycle);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Exec message, length delimited. Does not implicitly {@link replit.goval.api.Exec.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {replit.goval.api.Exec} message Exec message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Exec.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Exec message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Exec} Exec
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Exec.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Exec(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.args && message.args.length))
                                    message.args = [];
                                message.args.push(reader.string());
                                break;
                            case 2:
                                if (message.env === $util.emptyObject)
                                    message.env = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.env[key] = value;
                                break;
                            case 3:
                                message.blocking = reader.bool();
                                break;
                            case 6:
                                message.lifecycle = reader.int32();
                                break;
                            case 4:
                                message.splitStderr = reader.bool();
                                break;
                            case 5:
                                message.splitLogs = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Exec message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Exec} Exec
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Exec.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Exec message.
                     * @function verify
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Exec.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.args != null && message.hasOwnProperty("args")) {
                            if (!Array.isArray(message.args))
                                return "args: array expected";
                            for (var i = 0; i < message.args.length; ++i)
                                if (!$util.isString(message.args[i]))
                                    return "args: string[] expected";
                        }
                        if (message.env != null && message.hasOwnProperty("env")) {
                            if (!$util.isObject(message.env))
                                return "env: object expected";
                            var key = Object.keys(message.env);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.env[key[i]]))
                                    return "env: string{k:string} expected";
                        }
                        if (message.blocking != null && message.hasOwnProperty("blocking"))
                            if (typeof message.blocking !== "boolean")
                                return "blocking: boolean expected";
                        if (message.lifecycle != null && message.hasOwnProperty("lifecycle"))
                            switch (message.lifecycle) {
                            default:
                                return "lifecycle: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.splitStderr != null && message.hasOwnProperty("splitStderr"))
                            if (typeof message.splitStderr !== "boolean")
                                return "splitStderr: boolean expected";
                        if (message.splitLogs != null && message.hasOwnProperty("splitLogs"))
                            if (typeof message.splitLogs !== "boolean")
                                return "splitLogs: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates an Exec message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Exec} Exec
                     */
                    Exec.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Exec)
                            return object;
                        var message = new $root.replit.goval.api.Exec();
                        if (object.args) {
                            if (!Array.isArray(object.args))
                                throw TypeError(".replit.goval.api.Exec.args: array expected");
                            message.args = [];
                            for (var i = 0; i < object.args.length; ++i)
                                message.args[i] = String(object.args[i]);
                        }
                        if (object.env) {
                            if (typeof object.env !== "object")
                                throw TypeError(".replit.goval.api.Exec.env: object expected");
                            message.env = {};
                            for (var keys = Object.keys(object.env), i = 0; i < keys.length; ++i)
                                message.env[keys[i]] = String(object.env[keys[i]]);
                        }
                        if (object.blocking != null)
                            message.blocking = Boolean(object.blocking);
                        switch (object.lifecycle) {
                        case "NON_BLOCKING":
                        case 0:
                            message.lifecycle = 0;
                            break;
                        case "BLOCKING":
                        case 1:
                            message.lifecycle = 1;
                            break;
                        case "STDIN":
                        case 2:
                            message.lifecycle = 2;
                            break;
                        }
                        if (object.splitStderr != null)
                            message.splitStderr = Boolean(object.splitStderr);
                        if (object.splitLogs != null)
                            message.splitLogs = Boolean(object.splitLogs);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Exec message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Exec
                     * @static
                     * @param {replit.goval.api.Exec} message Exec
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Exec.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.args = [];
                        if (options.objects || options.defaults)
                            object.env = {};
                        if (options.defaults) {
                            object.blocking = false;
                            object.splitStderr = false;
                            object.splitLogs = false;
                            object.lifecycle = options.enums === String ? "NON_BLOCKING" : 0;
                        }
                        if (message.args && message.args.length) {
                            object.args = [];
                            for (var j = 0; j < message.args.length; ++j)
                                object.args[j] = message.args[j];
                        }
                        var keys2;
                        if (message.env && (keys2 = Object.keys(message.env)).length) {
                            object.env = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.env[keys2[j]] = message.env[keys2[j]];
                        }
                        if (message.blocking != null && message.hasOwnProperty("blocking"))
                            object.blocking = message.blocking;
                        if (message.splitStderr != null && message.hasOwnProperty("splitStderr"))
                            object.splitStderr = message.splitStderr;
                        if (message.splitLogs != null && message.hasOwnProperty("splitLogs"))
                            object.splitLogs = message.splitLogs;
                        if (message.lifecycle != null && message.hasOwnProperty("lifecycle"))
                            object.lifecycle = options.enums === String ? $root.replit.goval.api.Exec.Lifecycle[message.lifecycle] : message.lifecycle;
                        return object;
                    };
    
                    /**
                     * Converts this Exec to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Exec
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Exec.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Lifecycle enum.
                     * @name replit.goval.api.Exec.Lifecycle
                     * @enum {number}
                     * @property {number} NON_BLOCKING=0 NON_BLOCKING value
                     * @property {number} BLOCKING=1 BLOCKING value
                     * @property {number} STDIN=2 STDIN value
                     */
                    Exec.Lifecycle = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NON_BLOCKING"] = 0;
                        values[valuesById[1] = "BLOCKING"] = 1;
                        values[valuesById[2] = "STDIN"] = 2;
                        return values;
                    })();
    
                    return Exec;
                })();
    
                api.Package = (function() {
    
                    /**
                     * Properties of a Package.
                     * @memberof replit.goval.api
                     * @interface IPackage
                     * @property {string|null} [name] Package name
                     * @property {string|null} [spec] Package spec
                     * @property {string|null} [description] Package description
                     * @property {string|null} [version] Package version
                     * @property {string|null} [homepageURL] Package homepageURL
                     * @property {string|null} [documentationURL] Package documentationURL
                     * @property {string|null} [sourceCodeURL] Package sourceCodeURL
                     * @property {string|null} [bugTrackerURL] Package bugTrackerURL
                     * @property {string|null} [author] Package author
                     * @property {string|null} [license] Package license
                     * @property {Array.<replit.goval.api.Package|replit.goval.api.IPackage>|null} [dependencies] Package dependencies
                     */
    
                    /**
                     * Constructs a new Package.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Package.
                     * @constructor
                     * @param {replit.goval.api.IPackage=} [properties] Properties to set
                     */
                    function Package(properties) {
                        this.dependencies = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Package name.
                     * @member {string} name
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.name = "";
    
                    /**
                     * Package spec.
                     * @member {string} spec
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.spec = "";
    
                    /**
                     * Package description.
                     * @member {string} description
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.description = "";
    
                    /**
                     * Package version.
                     * @member {string} version
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.version = "";
    
                    /**
                     * Package homepageURL.
                     * @member {string} homepageURL
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.homepageURL = "";
    
                    /**
                     * Package documentationURL.
                     * @member {string} documentationURL
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.documentationURL = "";
    
                    /**
                     * Package sourceCodeURL.
                     * @member {string} sourceCodeURL
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.sourceCodeURL = "";
    
                    /**
                     * Package bugTrackerURL.
                     * @member {string} bugTrackerURL
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.bugTrackerURL = "";
    
                    /**
                     * Package author.
                     * @member {string} author
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.author = "";
    
                    /**
                     * Package license.
                     * @member {string} license
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.license = "";
    
                    /**
                     * Package dependencies.
                     * @member {Array.<replit.goval.api.Package>} dependencies
                     * @memberof replit.goval.api.Package
                     * @instance
                     */
                    Package.prototype.dependencies = $util.emptyArray;
    
                    /**
                     * Creates a new Package instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {replit.goval.api.IPackage=} [properties] Properties to set
                     * @returns {replit.goval.api.Package} Package instance
                     */
                    Package.create = function create(properties) {
                        return Package.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Package message. Does not implicitly {@link replit.goval.api.Package.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {replit.goval.api.Package} message Package message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Package.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.spec != null && Object.hasOwnProperty.call(message, "spec"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.spec);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.description);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 11, wireType 2 =*/90).string(message.version);
                        if (message.homepageURL != null && Object.hasOwnProperty.call(message, "homepageURL"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.homepageURL);
                        if (message.documentationURL != null && Object.hasOwnProperty.call(message, "documentationURL"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.documentationURL);
                        if (message.sourceCodeURL != null && Object.hasOwnProperty.call(message, "sourceCodeURL"))
                            writer.uint32(/* id 14, wireType 2 =*/114).string(message.sourceCodeURL);
                        if (message.bugTrackerURL != null && Object.hasOwnProperty.call(message, "bugTrackerURL"))
                            writer.uint32(/* id 15, wireType 2 =*/122).string(message.bugTrackerURL);
                        if (message.author != null && Object.hasOwnProperty.call(message, "author"))
                            writer.uint32(/* id 16, wireType 2 =*/130).string(message.author);
                        if (message.license != null && Object.hasOwnProperty.call(message, "license"))
                            writer.uint32(/* id 17, wireType 2 =*/138).string(message.license);
                        if (message.dependencies != null && message.dependencies.length)
                            for (var i = 0; i < message.dependencies.length; ++i)
                                $root.replit.goval.api.Package.encode(message.dependencies[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Package message, length delimited. Does not implicitly {@link replit.goval.api.Package.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {replit.goval.api.Package} message Package message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Package.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Package message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Package} Package
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Package.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Package();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.spec = reader.string();
                                break;
                            case 10:
                                message.description = reader.string();
                                break;
                            case 11:
                                message.version = reader.string();
                                break;
                            case 12:
                                message.homepageURL = reader.string();
                                break;
                            case 13:
                                message.documentationURL = reader.string();
                                break;
                            case 14:
                                message.sourceCodeURL = reader.string();
                                break;
                            case 15:
                                message.bugTrackerURL = reader.string();
                                break;
                            case 16:
                                message.author = reader.string();
                                break;
                            case 17:
                                message.license = reader.string();
                                break;
                            case 18:
                                if (!(message.dependencies && message.dependencies.length))
                                    message.dependencies = [];
                                message.dependencies.push($root.replit.goval.api.Package.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Package message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Package} Package
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Package.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Package message.
                     * @function verify
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Package.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.spec != null && message.hasOwnProperty("spec"))
                            if (!$util.isString(message.spec))
                                return "spec: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        if (message.homepageURL != null && message.hasOwnProperty("homepageURL"))
                            if (!$util.isString(message.homepageURL))
                                return "homepageURL: string expected";
                        if (message.documentationURL != null && message.hasOwnProperty("documentationURL"))
                            if (!$util.isString(message.documentationURL))
                                return "documentationURL: string expected";
                        if (message.sourceCodeURL != null && message.hasOwnProperty("sourceCodeURL"))
                            if (!$util.isString(message.sourceCodeURL))
                                return "sourceCodeURL: string expected";
                        if (message.bugTrackerURL != null && message.hasOwnProperty("bugTrackerURL"))
                            if (!$util.isString(message.bugTrackerURL))
                                return "bugTrackerURL: string expected";
                        if (message.author != null && message.hasOwnProperty("author"))
                            if (!$util.isString(message.author))
                                return "author: string expected";
                        if (message.license != null && message.hasOwnProperty("license"))
                            if (!$util.isString(message.license))
                                return "license: string expected";
                        if (message.dependencies != null && message.hasOwnProperty("dependencies")) {
                            if (!Array.isArray(message.dependencies))
                                return "dependencies: array expected";
                            for (var i = 0; i < message.dependencies.length; ++i) {
                                var error = $root.replit.goval.api.Package.verify(message.dependencies[i]);
                                if (error)
                                    return "dependencies." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Package message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Package} Package
                     */
                    Package.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Package)
                            return object;
                        var message = new $root.replit.goval.api.Package();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.spec != null)
                            message.spec = String(object.spec);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.version != null)
                            message.version = String(object.version);
                        if (object.homepageURL != null)
                            message.homepageURL = String(object.homepageURL);
                        if (object.documentationURL != null)
                            message.documentationURL = String(object.documentationURL);
                        if (object.sourceCodeURL != null)
                            message.sourceCodeURL = String(object.sourceCodeURL);
                        if (object.bugTrackerURL != null)
                            message.bugTrackerURL = String(object.bugTrackerURL);
                        if (object.author != null)
                            message.author = String(object.author);
                        if (object.license != null)
                            message.license = String(object.license);
                        if (object.dependencies) {
                            if (!Array.isArray(object.dependencies))
                                throw TypeError(".replit.goval.api.Package.dependencies: array expected");
                            message.dependencies = [];
                            for (var i = 0; i < object.dependencies.length; ++i) {
                                if (typeof object.dependencies[i] !== "object")
                                    throw TypeError(".replit.goval.api.Package.dependencies: object expected");
                                message.dependencies[i] = $root.replit.goval.api.Package.fromObject(object.dependencies[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Package message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Package
                     * @static
                     * @param {replit.goval.api.Package} message Package
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Package.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.dependencies = [];
                        if (options.defaults) {
                            object.name = "";
                            object.spec = "";
                            object.description = "";
                            object.version = "";
                            object.homepageURL = "";
                            object.documentationURL = "";
                            object.sourceCodeURL = "";
                            object.bugTrackerURL = "";
                            object.author = "";
                            object.license = "";
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.spec != null && message.hasOwnProperty("spec"))
                            object.spec = message.spec;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.homepageURL != null && message.hasOwnProperty("homepageURL"))
                            object.homepageURL = message.homepageURL;
                        if (message.documentationURL != null && message.hasOwnProperty("documentationURL"))
                            object.documentationURL = message.documentationURL;
                        if (message.sourceCodeURL != null && message.hasOwnProperty("sourceCodeURL"))
                            object.sourceCodeURL = message.sourceCodeURL;
                        if (message.bugTrackerURL != null && message.hasOwnProperty("bugTrackerURL"))
                            object.bugTrackerURL = message.bugTrackerURL;
                        if (message.author != null && message.hasOwnProperty("author"))
                            object.author = message.author;
                        if (message.license != null && message.hasOwnProperty("license"))
                            object.license = message.license;
                        if (message.dependencies && message.dependencies.length) {
                            object.dependencies = [];
                            for (var j = 0; j < message.dependencies.length; ++j)
                                object.dependencies[j] = $root.replit.goval.api.Package.toObject(message.dependencies[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Package to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Package
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Package.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Package;
                })();
    
                api.PackageSearch = (function() {
    
                    /**
                     * Properties of a PackageSearch.
                     * @memberof replit.goval.api
                     * @interface IPackageSearch
                     * @property {string|null} [query] PackageSearch query
                     */
    
                    /**
                     * Constructs a new PackageSearch.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageSearch.
                     * @constructor
                     * @param {replit.goval.api.IPackageSearch=} [properties] Properties to set
                     */
                    function PackageSearch(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageSearch query.
                     * @member {string} query
                     * @memberof replit.goval.api.PackageSearch
                     * @instance
                     */
                    PackageSearch.prototype.query = "";
    
                    /**
                     * Creates a new PackageSearch instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {replit.goval.api.IPackageSearch=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageSearch} PackageSearch instance
                     */
                    PackageSearch.create = function create(properties) {
                        return PackageSearch.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageSearch message. Does not implicitly {@link replit.goval.api.PackageSearch.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {replit.goval.api.PackageSearch} message PackageSearch message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageSearch.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.query);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageSearch message, length delimited. Does not implicitly {@link replit.goval.api.PackageSearch.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {replit.goval.api.PackageSearch} message PackageSearch message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageSearch.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageSearch message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageSearch} PackageSearch
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageSearch.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageSearch();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.query = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageSearch message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageSearch} PackageSearch
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageSearch.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageSearch message.
                     * @function verify
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageSearch.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.query != null && message.hasOwnProperty("query"))
                            if (!$util.isString(message.query))
                                return "query: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a PackageSearch message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageSearch} PackageSearch
                     */
                    PackageSearch.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageSearch)
                            return object;
                        var message = new $root.replit.goval.api.PackageSearch();
                        if (object.query != null)
                            message.query = String(object.query);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageSearch message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageSearch
                     * @static
                     * @param {replit.goval.api.PackageSearch} message PackageSearch
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageSearch.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.query = "";
                        if (message.query != null && message.hasOwnProperty("query"))
                            object.query = message.query;
                        return object;
                    };
    
                    /**
                     * Converts this PackageSearch to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageSearch
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageSearch.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageSearch;
                })();
    
                api.PackageSearchResp = (function() {
    
                    /**
                     * Properties of a PackageSearchResp.
                     * @memberof replit.goval.api
                     * @interface IPackageSearchResp
                     * @property {Array.<replit.goval.api.Package|replit.goval.api.IPackage>|null} [results] PackageSearchResp results
                     */
    
                    /**
                     * Constructs a new PackageSearchResp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageSearchResp.
                     * @constructor
                     * @param {replit.goval.api.IPackageSearchResp=} [properties] Properties to set
                     */
                    function PackageSearchResp(properties) {
                        this.results = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageSearchResp results.
                     * @member {Array.<replit.goval.api.Package>} results
                     * @memberof replit.goval.api.PackageSearchResp
                     * @instance
                     */
                    PackageSearchResp.prototype.results = $util.emptyArray;
    
                    /**
                     * Creates a new PackageSearchResp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {replit.goval.api.IPackageSearchResp=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageSearchResp} PackageSearchResp instance
                     */
                    PackageSearchResp.create = function create(properties) {
                        return PackageSearchResp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageSearchResp message. Does not implicitly {@link replit.goval.api.PackageSearchResp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {replit.goval.api.PackageSearchResp} message PackageSearchResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageSearchResp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.results != null && message.results.length)
                            for (var i = 0; i < message.results.length; ++i)
                                $root.replit.goval.api.Package.encode(message.results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageSearchResp message, length delimited. Does not implicitly {@link replit.goval.api.PackageSearchResp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {replit.goval.api.PackageSearchResp} message PackageSearchResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageSearchResp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageSearchResp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageSearchResp} PackageSearchResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageSearchResp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageSearchResp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.results && message.results.length))
                                    message.results = [];
                                message.results.push($root.replit.goval.api.Package.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageSearchResp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageSearchResp} PackageSearchResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageSearchResp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageSearchResp message.
                     * @function verify
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageSearchResp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.results != null && message.hasOwnProperty("results")) {
                            if (!Array.isArray(message.results))
                                return "results: array expected";
                            for (var i = 0; i < message.results.length; ++i) {
                                var error = $root.replit.goval.api.Package.verify(message.results[i]);
                                if (error)
                                    return "results." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageSearchResp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageSearchResp} PackageSearchResp
                     */
                    PackageSearchResp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageSearchResp)
                            return object;
                        var message = new $root.replit.goval.api.PackageSearchResp();
                        if (object.results) {
                            if (!Array.isArray(object.results))
                                throw TypeError(".replit.goval.api.PackageSearchResp.results: array expected");
                            message.results = [];
                            for (var i = 0; i < object.results.length; ++i) {
                                if (typeof object.results[i] !== "object")
                                    throw TypeError(".replit.goval.api.PackageSearchResp.results: object expected");
                                message.results[i] = $root.replit.goval.api.Package.fromObject(object.results[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageSearchResp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageSearchResp
                     * @static
                     * @param {replit.goval.api.PackageSearchResp} message PackageSearchResp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageSearchResp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.results = [];
                        if (message.results && message.results.length) {
                            object.results = [];
                            for (var j = 0; j < message.results.length; ++j)
                                object.results[j] = $root.replit.goval.api.Package.toObject(message.results[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PackageSearchResp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageSearchResp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageSearchResp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageSearchResp;
                })();
    
                api.PackageInfo = (function() {
    
                    /**
                     * Properties of a PackageInfo.
                     * @memberof replit.goval.api
                     * @interface IPackageInfo
                     * @property {replit.goval.api.Package|replit.goval.api.IPackage|null} [pkg] PackageInfo pkg
                     */
    
                    /**
                     * Constructs a new PackageInfo.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageInfo.
                     * @constructor
                     * @param {replit.goval.api.IPackageInfo=} [properties] Properties to set
                     */
                    function PackageInfo(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageInfo pkg.
                     * @member {replit.goval.api.Package|null|undefined} pkg
                     * @memberof replit.goval.api.PackageInfo
                     * @instance
                     */
                    PackageInfo.prototype.pkg = null;
    
                    /**
                     * Creates a new PackageInfo instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {replit.goval.api.IPackageInfo=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageInfo} PackageInfo instance
                     */
                    PackageInfo.create = function create(properties) {
                        return PackageInfo.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageInfo message. Does not implicitly {@link replit.goval.api.PackageInfo.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {replit.goval.api.PackageInfo} message PackageInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pkg != null && Object.hasOwnProperty.call(message, "pkg"))
                            $root.replit.goval.api.Package.encode(message.pkg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageInfo message, length delimited. Does not implicitly {@link replit.goval.api.PackageInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {replit.goval.api.PackageInfo} message PackageInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageInfo} PackageInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pkg = $root.replit.goval.api.Package.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageInfo} PackageInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageInfo message.
                     * @function verify
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pkg != null && message.hasOwnProperty("pkg")) {
                            var error = $root.replit.goval.api.Package.verify(message.pkg);
                            if (error)
                                return "pkg." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageInfo} PackageInfo
                     */
                    PackageInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageInfo)
                            return object;
                        var message = new $root.replit.goval.api.PackageInfo();
                        if (object.pkg != null) {
                            if (typeof object.pkg !== "object")
                                throw TypeError(".replit.goval.api.PackageInfo.pkg: object expected");
                            message.pkg = $root.replit.goval.api.Package.fromObject(object.pkg);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageInfo
                     * @static
                     * @param {replit.goval.api.PackageInfo} message PackageInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.pkg = null;
                        if (message.pkg != null && message.hasOwnProperty("pkg"))
                            object.pkg = $root.replit.goval.api.Package.toObject(message.pkg, options);
                        return object;
                    };
    
                    /**
                     * Converts this PackageInfo to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageInfo;
                })();
    
                api.PackageInfoResp = (function() {
    
                    /**
                     * Properties of a PackageInfoResp.
                     * @memberof replit.goval.api
                     * @interface IPackageInfoResp
                     * @property {replit.goval.api.Package|replit.goval.api.IPackage|null} [pkg] PackageInfoResp pkg
                     */
    
                    /**
                     * Constructs a new PackageInfoResp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageInfoResp.
                     * @constructor
                     * @param {replit.goval.api.IPackageInfoResp=} [properties] Properties to set
                     */
                    function PackageInfoResp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageInfoResp pkg.
                     * @member {replit.goval.api.Package|null|undefined} pkg
                     * @memberof replit.goval.api.PackageInfoResp
                     * @instance
                     */
                    PackageInfoResp.prototype.pkg = null;
    
                    /**
                     * Creates a new PackageInfoResp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {replit.goval.api.IPackageInfoResp=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageInfoResp} PackageInfoResp instance
                     */
                    PackageInfoResp.create = function create(properties) {
                        return PackageInfoResp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageInfoResp message. Does not implicitly {@link replit.goval.api.PackageInfoResp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {replit.goval.api.PackageInfoResp} message PackageInfoResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInfoResp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pkg != null && Object.hasOwnProperty.call(message, "pkg"))
                            $root.replit.goval.api.Package.encode(message.pkg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageInfoResp message, length delimited. Does not implicitly {@link replit.goval.api.PackageInfoResp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {replit.goval.api.PackageInfoResp} message PackageInfoResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInfoResp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageInfoResp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageInfoResp} PackageInfoResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInfoResp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageInfoResp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pkg = $root.replit.goval.api.Package.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageInfoResp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageInfoResp} PackageInfoResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInfoResp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageInfoResp message.
                     * @function verify
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageInfoResp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pkg != null && message.hasOwnProperty("pkg")) {
                            var error = $root.replit.goval.api.Package.verify(message.pkg);
                            if (error)
                                return "pkg." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageInfoResp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageInfoResp} PackageInfoResp
                     */
                    PackageInfoResp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageInfoResp)
                            return object;
                        var message = new $root.replit.goval.api.PackageInfoResp();
                        if (object.pkg != null) {
                            if (typeof object.pkg !== "object")
                                throw TypeError(".replit.goval.api.PackageInfoResp.pkg: object expected");
                            message.pkg = $root.replit.goval.api.Package.fromObject(object.pkg);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageInfoResp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageInfoResp
                     * @static
                     * @param {replit.goval.api.PackageInfoResp} message PackageInfoResp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageInfoResp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.pkg = null;
                        if (message.pkg != null && message.hasOwnProperty("pkg"))
                            object.pkg = $root.replit.goval.api.Package.toObject(message.pkg, options);
                        return object;
                    };
    
                    /**
                     * Converts this PackageInfoResp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageInfoResp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageInfoResp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageInfoResp;
                })();
    
                api.PackageAdd = (function() {
    
                    /**
                     * Properties of a PackageAdd.
                     * @memberof replit.goval.api
                     * @interface IPackageAdd
                     * @property {Array.<replit.goval.api.Package|replit.goval.api.IPackage>|null} [pkgs] PackageAdd pkgs
                     */
    
                    /**
                     * Constructs a new PackageAdd.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageAdd.
                     * @constructor
                     * @param {replit.goval.api.IPackageAdd=} [properties] Properties to set
                     */
                    function PackageAdd(properties) {
                        this.pkgs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageAdd pkgs.
                     * @member {Array.<replit.goval.api.Package>} pkgs
                     * @memberof replit.goval.api.PackageAdd
                     * @instance
                     */
                    PackageAdd.prototype.pkgs = $util.emptyArray;
    
                    /**
                     * Creates a new PackageAdd instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {replit.goval.api.IPackageAdd=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageAdd} PackageAdd instance
                     */
                    PackageAdd.create = function create(properties) {
                        return PackageAdd.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageAdd message. Does not implicitly {@link replit.goval.api.PackageAdd.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {replit.goval.api.PackageAdd} message PackageAdd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageAdd.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pkgs != null && message.pkgs.length)
                            for (var i = 0; i < message.pkgs.length; ++i)
                                $root.replit.goval.api.Package.encode(message.pkgs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageAdd message, length delimited. Does not implicitly {@link replit.goval.api.PackageAdd.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {replit.goval.api.PackageAdd} message PackageAdd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageAdd.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageAdd message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageAdd} PackageAdd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageAdd.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageAdd();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.pkgs && message.pkgs.length))
                                    message.pkgs = [];
                                message.pkgs.push($root.replit.goval.api.Package.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageAdd message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageAdd} PackageAdd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageAdd.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageAdd message.
                     * @function verify
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageAdd.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pkgs != null && message.hasOwnProperty("pkgs")) {
                            if (!Array.isArray(message.pkgs))
                                return "pkgs: array expected";
                            for (var i = 0; i < message.pkgs.length; ++i) {
                                var error = $root.replit.goval.api.Package.verify(message.pkgs[i]);
                                if (error)
                                    return "pkgs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageAdd message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageAdd} PackageAdd
                     */
                    PackageAdd.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageAdd)
                            return object;
                        var message = new $root.replit.goval.api.PackageAdd();
                        if (object.pkgs) {
                            if (!Array.isArray(object.pkgs))
                                throw TypeError(".replit.goval.api.PackageAdd.pkgs: array expected");
                            message.pkgs = [];
                            for (var i = 0; i < object.pkgs.length; ++i) {
                                if (typeof object.pkgs[i] !== "object")
                                    throw TypeError(".replit.goval.api.PackageAdd.pkgs: object expected");
                                message.pkgs[i] = $root.replit.goval.api.Package.fromObject(object.pkgs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageAdd message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageAdd
                     * @static
                     * @param {replit.goval.api.PackageAdd} message PackageAdd
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageAdd.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.pkgs = [];
                        if (message.pkgs && message.pkgs.length) {
                            object.pkgs = [];
                            for (var j = 0; j < message.pkgs.length; ++j)
                                object.pkgs[j] = $root.replit.goval.api.Package.toObject(message.pkgs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PackageAdd to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageAdd
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageAdd.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageAdd;
                })();
    
                api.PackageRemove = (function() {
    
                    /**
                     * Properties of a PackageRemove.
                     * @memberof replit.goval.api
                     * @interface IPackageRemove
                     * @property {Array.<replit.goval.api.Package|replit.goval.api.IPackage>|null} [pkgs] PackageRemove pkgs
                     */
    
                    /**
                     * Constructs a new PackageRemove.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageRemove.
                     * @constructor
                     * @param {replit.goval.api.IPackageRemove=} [properties] Properties to set
                     */
                    function PackageRemove(properties) {
                        this.pkgs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageRemove pkgs.
                     * @member {Array.<replit.goval.api.Package>} pkgs
                     * @memberof replit.goval.api.PackageRemove
                     * @instance
                     */
                    PackageRemove.prototype.pkgs = $util.emptyArray;
    
                    /**
                     * Creates a new PackageRemove instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {replit.goval.api.IPackageRemove=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageRemove} PackageRemove instance
                     */
                    PackageRemove.create = function create(properties) {
                        return PackageRemove.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageRemove message. Does not implicitly {@link replit.goval.api.PackageRemove.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {replit.goval.api.PackageRemove} message PackageRemove message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageRemove.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pkgs != null && message.pkgs.length)
                            for (var i = 0; i < message.pkgs.length; ++i)
                                $root.replit.goval.api.Package.encode(message.pkgs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageRemove message, length delimited. Does not implicitly {@link replit.goval.api.PackageRemove.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {replit.goval.api.PackageRemove} message PackageRemove message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageRemove.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageRemove message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageRemove} PackageRemove
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageRemove.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageRemove();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.pkgs && message.pkgs.length))
                                    message.pkgs = [];
                                message.pkgs.push($root.replit.goval.api.Package.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageRemove message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageRemove} PackageRemove
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageRemove.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageRemove message.
                     * @function verify
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageRemove.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pkgs != null && message.hasOwnProperty("pkgs")) {
                            if (!Array.isArray(message.pkgs))
                                return "pkgs: array expected";
                            for (var i = 0; i < message.pkgs.length; ++i) {
                                var error = $root.replit.goval.api.Package.verify(message.pkgs[i]);
                                if (error)
                                    return "pkgs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageRemove message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageRemove} PackageRemove
                     */
                    PackageRemove.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageRemove)
                            return object;
                        var message = new $root.replit.goval.api.PackageRemove();
                        if (object.pkgs) {
                            if (!Array.isArray(object.pkgs))
                                throw TypeError(".replit.goval.api.PackageRemove.pkgs: array expected");
                            message.pkgs = [];
                            for (var i = 0; i < object.pkgs.length; ++i) {
                                if (typeof object.pkgs[i] !== "object")
                                    throw TypeError(".replit.goval.api.PackageRemove.pkgs: object expected");
                                message.pkgs[i] = $root.replit.goval.api.Package.fromObject(object.pkgs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageRemove message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageRemove
                     * @static
                     * @param {replit.goval.api.PackageRemove} message PackageRemove
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageRemove.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.pkgs = [];
                        if (message.pkgs && message.pkgs.length) {
                            object.pkgs = [];
                            for (var j = 0; j < message.pkgs.length; ++j)
                                object.pkgs[j] = $root.replit.goval.api.Package.toObject(message.pkgs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PackageRemove to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageRemove
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageRemove.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageRemove;
                })();
    
                api.PackageInstall = (function() {
    
                    /**
                     * Properties of a PackageInstall.
                     * @memberof replit.goval.api
                     * @interface IPackageInstall
                     * @property {boolean|null} [fromHosting] PackageInstall fromHosting
                     */
    
                    /**
                     * Constructs a new PackageInstall.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageInstall.
                     * @constructor
                     * @param {replit.goval.api.IPackageInstall=} [properties] Properties to set
                     */
                    function PackageInstall(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageInstall fromHosting.
                     * @member {boolean} fromHosting
                     * @memberof replit.goval.api.PackageInstall
                     * @instance
                     */
                    PackageInstall.prototype.fromHosting = false;
    
                    /**
                     * Creates a new PackageInstall instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {replit.goval.api.IPackageInstall=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageInstall} PackageInstall instance
                     */
                    PackageInstall.create = function create(properties) {
                        return PackageInstall.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageInstall message. Does not implicitly {@link replit.goval.api.PackageInstall.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {replit.goval.api.PackageInstall} message PackageInstall message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInstall.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.fromHosting != null && Object.hasOwnProperty.call(message, "fromHosting"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.fromHosting);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageInstall message, length delimited. Does not implicitly {@link replit.goval.api.PackageInstall.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {replit.goval.api.PackageInstall} message PackageInstall message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageInstall.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageInstall message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageInstall} PackageInstall
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInstall.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageInstall();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.fromHosting = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageInstall message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageInstall} PackageInstall
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageInstall.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageInstall message.
                     * @function verify
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageInstall.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.fromHosting != null && message.hasOwnProperty("fromHosting"))
                            if (typeof message.fromHosting !== "boolean")
                                return "fromHosting: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PackageInstall message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageInstall} PackageInstall
                     */
                    PackageInstall.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageInstall)
                            return object;
                        var message = new $root.replit.goval.api.PackageInstall();
                        if (object.fromHosting != null)
                            message.fromHosting = Boolean(object.fromHosting);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageInstall message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageInstall
                     * @static
                     * @param {replit.goval.api.PackageInstall} message PackageInstall
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageInstall.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.fromHosting = false;
                        if (message.fromHosting != null && message.hasOwnProperty("fromHosting"))
                            object.fromHosting = message.fromHosting;
                        return object;
                    };
    
                    /**
                     * Converts this PackageInstall to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageInstall
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageInstall.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageInstall;
                })();
    
                api.PackageListSpecfile = (function() {
    
                    /**
                     * Properties of a PackageListSpecfile.
                     * @memberof replit.goval.api
                     * @interface IPackageListSpecfile
                     */
    
                    /**
                     * Constructs a new PackageListSpecfile.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageListSpecfile.
                     * @constructor
                     * @param {replit.goval.api.IPackageListSpecfile=} [properties] Properties to set
                     */
                    function PackageListSpecfile(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new PackageListSpecfile instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {replit.goval.api.IPackageListSpecfile=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageListSpecfile} PackageListSpecfile instance
                     */
                    PackageListSpecfile.create = function create(properties) {
                        return PackageListSpecfile.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageListSpecfile message. Does not implicitly {@link replit.goval.api.PackageListSpecfile.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {replit.goval.api.PackageListSpecfile} message PackageListSpecfile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageListSpecfile.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageListSpecfile message, length delimited. Does not implicitly {@link replit.goval.api.PackageListSpecfile.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {replit.goval.api.PackageListSpecfile} message PackageListSpecfile message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageListSpecfile.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageListSpecfile message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageListSpecfile} PackageListSpecfile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageListSpecfile.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageListSpecfile();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageListSpecfile message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageListSpecfile} PackageListSpecfile
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageListSpecfile.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageListSpecfile message.
                     * @function verify
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageListSpecfile.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a PackageListSpecfile message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageListSpecfile} PackageListSpecfile
                     */
                    PackageListSpecfile.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageListSpecfile)
                            return object;
                        return new $root.replit.goval.api.PackageListSpecfile();
                    };
    
                    /**
                     * Creates a plain object from a PackageListSpecfile message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @static
                     * @param {replit.goval.api.PackageListSpecfile} message PackageListSpecfile
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageListSpecfile.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this PackageListSpecfile to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageListSpecfile
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageListSpecfile.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageListSpecfile;
                })();
    
                api.PackageListSpecfileResp = (function() {
    
                    /**
                     * Properties of a PackageListSpecfileResp.
                     * @memberof replit.goval.api
                     * @interface IPackageListSpecfileResp
                     * @property {Array.<replit.goval.api.Package|replit.goval.api.IPackage>|null} [pkgs] PackageListSpecfileResp pkgs
                     */
    
                    /**
                     * Constructs a new PackageListSpecfileResp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageListSpecfileResp.
                     * @constructor
                     * @param {replit.goval.api.IPackageListSpecfileResp=} [properties] Properties to set
                     */
                    function PackageListSpecfileResp(properties) {
                        this.pkgs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PackageListSpecfileResp pkgs.
                     * @member {Array.<replit.goval.api.Package>} pkgs
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @instance
                     */
                    PackageListSpecfileResp.prototype.pkgs = $util.emptyArray;
    
                    /**
                     * Creates a new PackageListSpecfileResp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {replit.goval.api.IPackageListSpecfileResp=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageListSpecfileResp} PackageListSpecfileResp instance
                     */
                    PackageListSpecfileResp.create = function create(properties) {
                        return PackageListSpecfileResp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageListSpecfileResp message. Does not implicitly {@link replit.goval.api.PackageListSpecfileResp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {replit.goval.api.PackageListSpecfileResp} message PackageListSpecfileResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageListSpecfileResp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pkgs != null && message.pkgs.length)
                            for (var i = 0; i < message.pkgs.length; ++i)
                                $root.replit.goval.api.Package.encode(message.pkgs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageListSpecfileResp message, length delimited. Does not implicitly {@link replit.goval.api.PackageListSpecfileResp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {replit.goval.api.PackageListSpecfileResp} message PackageListSpecfileResp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageListSpecfileResp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageListSpecfileResp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageListSpecfileResp} PackageListSpecfileResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageListSpecfileResp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageListSpecfileResp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.pkgs && message.pkgs.length))
                                    message.pkgs = [];
                                message.pkgs.push($root.replit.goval.api.Package.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageListSpecfileResp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageListSpecfileResp} PackageListSpecfileResp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageListSpecfileResp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageListSpecfileResp message.
                     * @function verify
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageListSpecfileResp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pkgs != null && message.hasOwnProperty("pkgs")) {
                            if (!Array.isArray(message.pkgs))
                                return "pkgs: array expected";
                            for (var i = 0; i < message.pkgs.length; ++i) {
                                var error = $root.replit.goval.api.Package.verify(message.pkgs[i]);
                                if (error)
                                    return "pkgs." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PackageListSpecfileResp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageListSpecfileResp} PackageListSpecfileResp
                     */
                    PackageListSpecfileResp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageListSpecfileResp)
                            return object;
                        var message = new $root.replit.goval.api.PackageListSpecfileResp();
                        if (object.pkgs) {
                            if (!Array.isArray(object.pkgs))
                                throw TypeError(".replit.goval.api.PackageListSpecfileResp.pkgs: array expected");
                            message.pkgs = [];
                            for (var i = 0; i < object.pkgs.length; ++i) {
                                if (typeof object.pkgs[i] !== "object")
                                    throw TypeError(".replit.goval.api.PackageListSpecfileResp.pkgs: object expected");
                                message.pkgs[i] = $root.replit.goval.api.Package.fromObject(object.pkgs[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PackageListSpecfileResp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @static
                     * @param {replit.goval.api.PackageListSpecfileResp} message PackageListSpecfileResp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageListSpecfileResp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.pkgs = [];
                        if (message.pkgs && message.pkgs.length) {
                            object.pkgs = [];
                            for (var j = 0; j < message.pkgs.length; ++j)
                                object.pkgs[j] = $root.replit.goval.api.Package.toObject(message.pkgs[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PackageListSpecfileResp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageListSpecfileResp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageListSpecfileResp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageListSpecfileResp;
                })();
    
                api.PackageCacheSave = (function() {
    
                    /**
                     * Properties of a PackageCacheSave.
                     * @memberof replit.goval.api
                     * @interface IPackageCacheSave
                     */
    
                    /**
                     * Constructs a new PackageCacheSave.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PackageCacheSave.
                     * @constructor
                     * @param {replit.goval.api.IPackageCacheSave=} [properties] Properties to set
                     */
                    function PackageCacheSave(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new PackageCacheSave instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {replit.goval.api.IPackageCacheSave=} [properties] Properties to set
                     * @returns {replit.goval.api.PackageCacheSave} PackageCacheSave instance
                     */
                    PackageCacheSave.create = function create(properties) {
                        return PackageCacheSave.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PackageCacheSave message. Does not implicitly {@link replit.goval.api.PackageCacheSave.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {replit.goval.api.PackageCacheSave} message PackageCacheSave message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageCacheSave.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PackageCacheSave message, length delimited. Does not implicitly {@link replit.goval.api.PackageCacheSave.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {replit.goval.api.PackageCacheSave} message PackageCacheSave message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PackageCacheSave.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PackageCacheSave message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PackageCacheSave} PackageCacheSave
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageCacheSave.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PackageCacheSave();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PackageCacheSave message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PackageCacheSave} PackageCacheSave
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PackageCacheSave.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PackageCacheSave message.
                     * @function verify
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PackageCacheSave.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a PackageCacheSave message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PackageCacheSave} PackageCacheSave
                     */
                    PackageCacheSave.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PackageCacheSave)
                            return object;
                        return new $root.replit.goval.api.PackageCacheSave();
                    };
    
                    /**
                     * Creates a plain object from a PackageCacheSave message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PackageCacheSave
                     * @static
                     * @param {replit.goval.api.PackageCacheSave} message PackageCacheSave
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PackageCacheSave.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this PackageCacheSave to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PackageCacheSave
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PackageCacheSave.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PackageCacheSave;
                })();
    
                api.ChatScrollback = (function() {
    
                    /**
                     * Properties of a ChatScrollback.
                     * @memberof replit.goval.api
                     * @interface IChatScrollback
                     * @property {Array.<replit.goval.api.ChatMessage|replit.goval.api.IChatMessage>|null} [scrollback] ChatScrollback scrollback
                     */
    
                    /**
                     * Constructs a new ChatScrollback.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ChatScrollback.
                     * @constructor
                     * @param {replit.goval.api.IChatScrollback=} [properties] Properties to set
                     */
                    function ChatScrollback(properties) {
                        this.scrollback = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ChatScrollback scrollback.
                     * @member {Array.<replit.goval.api.ChatMessage>} scrollback
                     * @memberof replit.goval.api.ChatScrollback
                     * @instance
                     */
                    ChatScrollback.prototype.scrollback = $util.emptyArray;
    
                    /**
                     * Creates a new ChatScrollback instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {replit.goval.api.IChatScrollback=} [properties] Properties to set
                     * @returns {replit.goval.api.ChatScrollback} ChatScrollback instance
                     */
                    ChatScrollback.create = function create(properties) {
                        return ChatScrollback.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ChatScrollback message. Does not implicitly {@link replit.goval.api.ChatScrollback.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {replit.goval.api.ChatScrollback} message ChatScrollback message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatScrollback.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.scrollback != null && message.scrollback.length)
                            for (var i = 0; i < message.scrollback.length; ++i)
                                $root.replit.goval.api.ChatMessage.encode(message.scrollback[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ChatScrollback message, length delimited. Does not implicitly {@link replit.goval.api.ChatScrollback.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {replit.goval.api.ChatScrollback} message ChatScrollback message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChatScrollback.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ChatScrollback message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ChatScrollback} ChatScrollback
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatScrollback.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ChatScrollback();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.scrollback && message.scrollback.length))
                                    message.scrollback = [];
                                message.scrollback.push($root.replit.goval.api.ChatMessage.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ChatScrollback message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ChatScrollback} ChatScrollback
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChatScrollback.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ChatScrollback message.
                     * @function verify
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChatScrollback.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.scrollback != null && message.hasOwnProperty("scrollback")) {
                            if (!Array.isArray(message.scrollback))
                                return "scrollback: array expected";
                            for (var i = 0; i < message.scrollback.length; ++i) {
                                var error = $root.replit.goval.api.ChatMessage.verify(message.scrollback[i]);
                                if (error)
                                    return "scrollback." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ChatScrollback message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ChatScrollback} ChatScrollback
                     */
                    ChatScrollback.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ChatScrollback)
                            return object;
                        var message = new $root.replit.goval.api.ChatScrollback();
                        if (object.scrollback) {
                            if (!Array.isArray(object.scrollback))
                                throw TypeError(".replit.goval.api.ChatScrollback.scrollback: array expected");
                            message.scrollback = [];
                            for (var i = 0; i < object.scrollback.length; ++i) {
                                if (typeof object.scrollback[i] !== "object")
                                    throw TypeError(".replit.goval.api.ChatScrollback.scrollback: object expected");
                                message.scrollback[i] = $root.replit.goval.api.ChatMessage.fromObject(object.scrollback[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ChatScrollback message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ChatScrollback
                     * @static
                     * @param {replit.goval.api.ChatScrollback} message ChatScrollback
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChatScrollback.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.scrollback = [];
                        if (message.scrollback && message.scrollback.length) {
                            object.scrollback = [];
                            for (var j = 0; j < message.scrollback.length; ++j)
                                object.scrollback[j] = $root.replit.goval.api.ChatMessage.toObject(message.scrollback[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ChatScrollback to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ChatScrollback
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChatScrollback.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ChatScrollback;
                })();
    
                api.Metrics = (function() {
    
                    /**
                     * Properties of a Metrics.
                     * @memberof replit.goval.api
                     * @interface IMetrics
                     * @property {Array.<Uint8Array>|null} [prometheusMetricFamilies] Metrics prometheusMetricFamilies
                     */
    
                    /**
                     * Constructs a new Metrics.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Metrics.
                     * @constructor
                     * @param {replit.goval.api.IMetrics=} [properties] Properties to set
                     */
                    function Metrics(properties) {
                        this.prometheusMetricFamilies = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Metrics prometheusMetricFamilies.
                     * @member {Array.<Uint8Array>} prometheusMetricFamilies
                     * @memberof replit.goval.api.Metrics
                     * @instance
                     */
                    Metrics.prototype.prometheusMetricFamilies = $util.emptyArray;
    
                    /**
                     * Creates a new Metrics instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {replit.goval.api.IMetrics=} [properties] Properties to set
                     * @returns {replit.goval.api.Metrics} Metrics instance
                     */
                    Metrics.create = function create(properties) {
                        return Metrics.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Metrics message. Does not implicitly {@link replit.goval.api.Metrics.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {replit.goval.api.Metrics} message Metrics message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metrics.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.prometheusMetricFamilies != null && message.prometheusMetricFamilies.length)
                            for (var i = 0; i < message.prometheusMetricFamilies.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.prometheusMetricFamilies[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Metrics message, length delimited. Does not implicitly {@link replit.goval.api.Metrics.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {replit.goval.api.Metrics} message Metrics message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metrics.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Metrics message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Metrics} Metrics
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metrics.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Metrics();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.prometheusMetricFamilies && message.prometheusMetricFamilies.length))
                                    message.prometheusMetricFamilies = [];
                                message.prometheusMetricFamilies.push(reader.bytes());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Metrics message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Metrics} Metrics
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metrics.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Metrics message.
                     * @function verify
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Metrics.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.prometheusMetricFamilies != null && message.hasOwnProperty("prometheusMetricFamilies")) {
                            if (!Array.isArray(message.prometheusMetricFamilies))
                                return "prometheusMetricFamilies: array expected";
                            for (var i = 0; i < message.prometheusMetricFamilies.length; ++i)
                                if (!(message.prometheusMetricFamilies[i] && typeof message.prometheusMetricFamilies[i].length === "number" || $util.isString(message.prometheusMetricFamilies[i])))
                                    return "prometheusMetricFamilies: buffer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Metrics message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Metrics} Metrics
                     */
                    Metrics.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Metrics)
                            return object;
                        var message = new $root.replit.goval.api.Metrics();
                        if (object.prometheusMetricFamilies) {
                            if (!Array.isArray(object.prometheusMetricFamilies))
                                throw TypeError(".replit.goval.api.Metrics.prometheusMetricFamilies: array expected");
                            message.prometheusMetricFamilies = [];
                            for (var i = 0; i < object.prometheusMetricFamilies.length; ++i)
                                if (typeof object.prometheusMetricFamilies[i] === "string")
                                    $util.base64.decode(object.prometheusMetricFamilies[i], message.prometheusMetricFamilies[i] = $util.newBuffer($util.base64.length(object.prometheusMetricFamilies[i])), 0);
                                else if (object.prometheusMetricFamilies[i].length)
                                    message.prometheusMetricFamilies[i] = object.prometheusMetricFamilies[i];
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Metrics message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Metrics
                     * @static
                     * @param {replit.goval.api.Metrics} message Metrics
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Metrics.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.prometheusMetricFamilies = [];
                        if (message.prometheusMetricFamilies && message.prometheusMetricFamilies.length) {
                            object.prometheusMetricFamilies = [];
                            for (var j = 0; j < message.prometheusMetricFamilies.length; ++j)
                                object.prometheusMetricFamilies[j] = options.bytes === String ? $util.base64.encode(message.prometheusMetricFamilies[j], 0, message.prometheusMetricFamilies[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.prometheusMetricFamilies[j]) : message.prometheusMetricFamilies[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Metrics to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Metrics
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Metrics.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Metrics;
                })();
    
                api.PprofRequest = (function() {
    
                    /**
                     * Properties of a PprofRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofRequest
                     * @property {string|null} [id] PprofRequest id
                     * @property {replit.goval.api.PprofCpuProfileRequest|replit.goval.api.IPprofCpuProfileRequest|null} [pprofCpuProfileRequest] PprofRequest pprofCpuProfileRequest
                     * @property {replit.goval.api.PprofHeapProfileRequest|replit.goval.api.IPprofHeapProfileRequest|null} [pprofHeapProfileRequest] PprofRequest pprofHeapProfileRequest
                     * @property {replit.goval.api.PprofAllocsProfileRequest|replit.goval.api.IPprofAllocsProfileRequest|null} [pprofAllocsProfileRequest] PprofRequest pprofAllocsProfileRequest
                     * @property {replit.goval.api.PprofBlockProfileRequest|replit.goval.api.IPprofBlockProfileRequest|null} [pprofBlockProfileRequest] PprofRequest pprofBlockProfileRequest
                     * @property {replit.goval.api.PprofMutexProfileRequest|replit.goval.api.IPprofMutexProfileRequest|null} [pprofMutexProfileRequest] PprofRequest pprofMutexProfileRequest
                     */
    
                    /**
                     * Constructs a new PprofRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofRequest=} [properties] Properties to set
                     */
                    function PprofRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofRequest id.
                     * @member {string} id
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.id = "";
    
                    /**
                     * PprofRequest pprofCpuProfileRequest.
                     * @member {replit.goval.api.PprofCpuProfileRequest|null|undefined} pprofCpuProfileRequest
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.pprofCpuProfileRequest = null;
    
                    /**
                     * PprofRequest pprofHeapProfileRequest.
                     * @member {replit.goval.api.PprofHeapProfileRequest|null|undefined} pprofHeapProfileRequest
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.pprofHeapProfileRequest = null;
    
                    /**
                     * PprofRequest pprofAllocsProfileRequest.
                     * @member {replit.goval.api.PprofAllocsProfileRequest|null|undefined} pprofAllocsProfileRequest
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.pprofAllocsProfileRequest = null;
    
                    /**
                     * PprofRequest pprofBlockProfileRequest.
                     * @member {replit.goval.api.PprofBlockProfileRequest|null|undefined} pprofBlockProfileRequest
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.pprofBlockProfileRequest = null;
    
                    /**
                     * PprofRequest pprofMutexProfileRequest.
                     * @member {replit.goval.api.PprofMutexProfileRequest|null|undefined} pprofMutexProfileRequest
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    PprofRequest.prototype.pprofMutexProfileRequest = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * PprofRequest body.
                     * @member {"pprofCpuProfileRequest"|"pprofHeapProfileRequest"|"pprofAllocsProfileRequest"|"pprofBlockProfileRequest"|"pprofMutexProfileRequest"|undefined} body
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     */
                    Object.defineProperty(PprofRequest.prototype, "body", {
                        get: $util.oneOfGetter($oneOfFields = ["pprofCpuProfileRequest", "pprofHeapProfileRequest", "pprofAllocsProfileRequest", "pprofBlockProfileRequest", "pprofMutexProfileRequest"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new PprofRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {replit.goval.api.IPprofRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofRequest} PprofRequest instance
                     */
                    PprofRequest.create = function create(properties) {
                        return PprofRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofRequest message. Does not implicitly {@link replit.goval.api.PprofRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {replit.goval.api.PprofRequest} message PprofRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.pprofCpuProfileRequest != null && Object.hasOwnProperty.call(message, "pprofCpuProfileRequest"))
                            $root.replit.goval.api.PprofCpuProfileRequest.encode(message.pprofCpuProfileRequest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.pprofHeapProfileRequest != null && Object.hasOwnProperty.call(message, "pprofHeapProfileRequest"))
                            $root.replit.goval.api.PprofHeapProfileRequest.encode(message.pprofHeapProfileRequest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.pprofAllocsProfileRequest != null && Object.hasOwnProperty.call(message, "pprofAllocsProfileRequest"))
                            $root.replit.goval.api.PprofAllocsProfileRequest.encode(message.pprofAllocsProfileRequest, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.pprofBlockProfileRequest != null && Object.hasOwnProperty.call(message, "pprofBlockProfileRequest"))
                            $root.replit.goval.api.PprofBlockProfileRequest.encode(message.pprofBlockProfileRequest, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.pprofMutexProfileRequest != null && Object.hasOwnProperty.call(message, "pprofMutexProfileRequest"))
                            $root.replit.goval.api.PprofMutexProfileRequest.encode(message.pprofMutexProfileRequest, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {replit.goval.api.PprofRequest} message PprofRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofRequest} PprofRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.pprofCpuProfileRequest = $root.replit.goval.api.PprofCpuProfileRequest.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.pprofHeapProfileRequest = $root.replit.goval.api.PprofHeapProfileRequest.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.pprofAllocsProfileRequest = $root.replit.goval.api.PprofAllocsProfileRequest.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.pprofBlockProfileRequest = $root.replit.goval.api.PprofBlockProfileRequest.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.pprofMutexProfileRequest = $root.replit.goval.api.PprofMutexProfileRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofRequest} PprofRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.pprofCpuProfileRequest != null && message.hasOwnProperty("pprofCpuProfileRequest")) {
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofCpuProfileRequest.verify(message.pprofCpuProfileRequest);
                                if (error)
                                    return "pprofCpuProfileRequest." + error;
                            }
                        }
                        if (message.pprofHeapProfileRequest != null && message.hasOwnProperty("pprofHeapProfileRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofHeapProfileRequest.verify(message.pprofHeapProfileRequest);
                                if (error)
                                    return "pprofHeapProfileRequest." + error;
                            }
                        }
                        if (message.pprofAllocsProfileRequest != null && message.hasOwnProperty("pprofAllocsProfileRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofAllocsProfileRequest.verify(message.pprofAllocsProfileRequest);
                                if (error)
                                    return "pprofAllocsProfileRequest." + error;
                            }
                        }
                        if (message.pprofBlockProfileRequest != null && message.hasOwnProperty("pprofBlockProfileRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofBlockProfileRequest.verify(message.pprofBlockProfileRequest);
                                if (error)
                                    return "pprofBlockProfileRequest." + error;
                            }
                        }
                        if (message.pprofMutexProfileRequest != null && message.hasOwnProperty("pprofMutexProfileRequest")) {
                            if (properties.body === 1)
                                return "body: multiple values";
                            properties.body = 1;
                            {
                                var error = $root.replit.goval.api.PprofMutexProfileRequest.verify(message.pprofMutexProfileRequest);
                                if (error)
                                    return "pprofMutexProfileRequest." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PprofRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofRequest} PprofRequest
                     */
                    PprofRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.pprofCpuProfileRequest != null) {
                            if (typeof object.pprofCpuProfileRequest !== "object")
                                throw TypeError(".replit.goval.api.PprofRequest.pprofCpuProfileRequest: object expected");
                            message.pprofCpuProfileRequest = $root.replit.goval.api.PprofCpuProfileRequest.fromObject(object.pprofCpuProfileRequest);
                        }
                        if (object.pprofHeapProfileRequest != null) {
                            if (typeof object.pprofHeapProfileRequest !== "object")
                                throw TypeError(".replit.goval.api.PprofRequest.pprofHeapProfileRequest: object expected");
                            message.pprofHeapProfileRequest = $root.replit.goval.api.PprofHeapProfileRequest.fromObject(object.pprofHeapProfileRequest);
                        }
                        if (object.pprofAllocsProfileRequest != null) {
                            if (typeof object.pprofAllocsProfileRequest !== "object")
                                throw TypeError(".replit.goval.api.PprofRequest.pprofAllocsProfileRequest: object expected");
                            message.pprofAllocsProfileRequest = $root.replit.goval.api.PprofAllocsProfileRequest.fromObject(object.pprofAllocsProfileRequest);
                        }
                        if (object.pprofBlockProfileRequest != null) {
                            if (typeof object.pprofBlockProfileRequest !== "object")
                                throw TypeError(".replit.goval.api.PprofRequest.pprofBlockProfileRequest: object expected");
                            message.pprofBlockProfileRequest = $root.replit.goval.api.PprofBlockProfileRequest.fromObject(object.pprofBlockProfileRequest);
                        }
                        if (object.pprofMutexProfileRequest != null) {
                            if (typeof object.pprofMutexProfileRequest !== "object")
                                throw TypeError(".replit.goval.api.PprofRequest.pprofMutexProfileRequest: object expected");
                            message.pprofMutexProfileRequest = $root.replit.goval.api.PprofMutexProfileRequest.fromObject(object.pprofMutexProfileRequest);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofRequest
                     * @static
                     * @param {replit.goval.api.PprofRequest} message PprofRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.id = "";
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.pprofCpuProfileRequest != null && message.hasOwnProperty("pprofCpuProfileRequest")) {
                            object.pprofCpuProfileRequest = $root.replit.goval.api.PprofCpuProfileRequest.toObject(message.pprofCpuProfileRequest, options);
                            if (options.oneofs)
                                object.body = "pprofCpuProfileRequest";
                        }
                        if (message.pprofHeapProfileRequest != null && message.hasOwnProperty("pprofHeapProfileRequest")) {
                            object.pprofHeapProfileRequest = $root.replit.goval.api.PprofHeapProfileRequest.toObject(message.pprofHeapProfileRequest, options);
                            if (options.oneofs)
                                object.body = "pprofHeapProfileRequest";
                        }
                        if (message.pprofAllocsProfileRequest != null && message.hasOwnProperty("pprofAllocsProfileRequest")) {
                            object.pprofAllocsProfileRequest = $root.replit.goval.api.PprofAllocsProfileRequest.toObject(message.pprofAllocsProfileRequest, options);
                            if (options.oneofs)
                                object.body = "pprofAllocsProfileRequest";
                        }
                        if (message.pprofBlockProfileRequest != null && message.hasOwnProperty("pprofBlockProfileRequest")) {
                            object.pprofBlockProfileRequest = $root.replit.goval.api.PprofBlockProfileRequest.toObject(message.pprofBlockProfileRequest, options);
                            if (options.oneofs)
                                object.body = "pprofBlockProfileRequest";
                        }
                        if (message.pprofMutexProfileRequest != null && message.hasOwnProperty("pprofMutexProfileRequest")) {
                            object.pprofMutexProfileRequest = $root.replit.goval.api.PprofMutexProfileRequest.toObject(message.pprofMutexProfileRequest, options);
                            if (options.oneofs)
                                object.body = "pprofMutexProfileRequest";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this PprofRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofRequest;
                })();
    
                api.PprofAllocsProfileRequest = (function() {
    
                    /**
                     * Properties of a PprofAllocsProfileRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofAllocsProfileRequest
                     * @property {boolean|null} [debug] PprofAllocsProfileRequest debug
                     */
    
                    /**
                     * Constructs a new PprofAllocsProfileRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofAllocsProfileRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofAllocsProfileRequest=} [properties] Properties to set
                     */
                    function PprofAllocsProfileRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofAllocsProfileRequest debug.
                     * @member {boolean} debug
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @instance
                     */
                    PprofAllocsProfileRequest.prototype.debug = false;
    
                    /**
                     * Creates a new PprofAllocsProfileRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {replit.goval.api.IPprofAllocsProfileRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofAllocsProfileRequest} PprofAllocsProfileRequest instance
                     */
                    PprofAllocsProfileRequest.create = function create(properties) {
                        return PprofAllocsProfileRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofAllocsProfileRequest message. Does not implicitly {@link replit.goval.api.PprofAllocsProfileRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofAllocsProfileRequest} message PprofAllocsProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofAllocsProfileRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.debug);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofAllocsProfileRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofAllocsProfileRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofAllocsProfileRequest} message PprofAllocsProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofAllocsProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofAllocsProfileRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofAllocsProfileRequest} PprofAllocsProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofAllocsProfileRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofAllocsProfileRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.debug = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofAllocsProfileRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofAllocsProfileRequest} PprofAllocsProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofAllocsProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofAllocsProfileRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofAllocsProfileRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            if (typeof message.debug !== "boolean")
                                return "debug: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofAllocsProfileRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofAllocsProfileRequest} PprofAllocsProfileRequest
                     */
                    PprofAllocsProfileRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofAllocsProfileRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofAllocsProfileRequest();
                        if (object.debug != null)
                            message.debug = Boolean(object.debug);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofAllocsProfileRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofAllocsProfileRequest} message PprofAllocsProfileRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofAllocsProfileRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.debug = false;
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            object.debug = message.debug;
                        return object;
                    };
    
                    /**
                     * Converts this PprofAllocsProfileRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofAllocsProfileRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofAllocsProfileRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofAllocsProfileRequest;
                })();
    
                api.PprofBlockProfileRequest = (function() {
    
                    /**
                     * Properties of a PprofBlockProfileRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofBlockProfileRequest
                     * @property {boolean|null} [debug] PprofBlockProfileRequest debug
                     */
    
                    /**
                     * Constructs a new PprofBlockProfileRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofBlockProfileRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofBlockProfileRequest=} [properties] Properties to set
                     */
                    function PprofBlockProfileRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofBlockProfileRequest debug.
                     * @member {boolean} debug
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @instance
                     */
                    PprofBlockProfileRequest.prototype.debug = false;
    
                    /**
                     * Creates a new PprofBlockProfileRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {replit.goval.api.IPprofBlockProfileRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofBlockProfileRequest} PprofBlockProfileRequest instance
                     */
                    PprofBlockProfileRequest.create = function create(properties) {
                        return PprofBlockProfileRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofBlockProfileRequest message. Does not implicitly {@link replit.goval.api.PprofBlockProfileRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofBlockProfileRequest} message PprofBlockProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofBlockProfileRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.debug);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofBlockProfileRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofBlockProfileRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofBlockProfileRequest} message PprofBlockProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofBlockProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofBlockProfileRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofBlockProfileRequest} PprofBlockProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofBlockProfileRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofBlockProfileRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.debug = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofBlockProfileRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofBlockProfileRequest} PprofBlockProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofBlockProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofBlockProfileRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofBlockProfileRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            if (typeof message.debug !== "boolean")
                                return "debug: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofBlockProfileRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofBlockProfileRequest} PprofBlockProfileRequest
                     */
                    PprofBlockProfileRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofBlockProfileRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofBlockProfileRequest();
                        if (object.debug != null)
                            message.debug = Boolean(object.debug);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofBlockProfileRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofBlockProfileRequest} message PprofBlockProfileRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofBlockProfileRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.debug = false;
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            object.debug = message.debug;
                        return object;
                    };
    
                    /**
                     * Converts this PprofBlockProfileRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofBlockProfileRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofBlockProfileRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofBlockProfileRequest;
                })();
    
                api.PprofCpuProfileRequest = (function() {
    
                    /**
                     * Properties of a PprofCpuProfileRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofCpuProfileRequest
                     * @property {number|null} [seconds] PprofCpuProfileRequest seconds
                     */
    
                    /**
                     * Constructs a new PprofCpuProfileRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofCpuProfileRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofCpuProfileRequest=} [properties] Properties to set
                     */
                    function PprofCpuProfileRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofCpuProfileRequest seconds.
                     * @member {number} seconds
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @instance
                     */
                    PprofCpuProfileRequest.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Creates a new PprofCpuProfileRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {replit.goval.api.IPprofCpuProfileRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofCpuProfileRequest} PprofCpuProfileRequest instance
                     */
                    PprofCpuProfileRequest.create = function create(properties) {
                        return PprofCpuProfileRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofCpuProfileRequest message. Does not implicitly {@link replit.goval.api.PprofCpuProfileRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofCpuProfileRequest} message PprofCpuProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofCpuProfileRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofCpuProfileRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofCpuProfileRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofCpuProfileRequest} message PprofCpuProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofCpuProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofCpuProfileRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofCpuProfileRequest} PprofCpuProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofCpuProfileRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofCpuProfileRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.seconds = reader.int64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofCpuProfileRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofCpuProfileRequest} PprofCpuProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofCpuProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofCpuProfileRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofCpuProfileRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.seconds != null && message.hasOwnProperty("seconds"))
                            if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                                return "seconds: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofCpuProfileRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofCpuProfileRequest} PprofCpuProfileRequest
                     */
                    PprofCpuProfileRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofCpuProfileRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofCpuProfileRequest();
                        if (object.seconds != null)
                            if ($util.Long)
                                (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                            else if (typeof object.seconds === "string")
                                message.seconds = parseInt(object.seconds, 10);
                            else if (typeof object.seconds === "number")
                                message.seconds = object.seconds;
                            else if (typeof object.seconds === "object")
                                message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofCpuProfileRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofCpuProfileRequest} message PprofCpuProfileRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofCpuProfileRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.seconds = options.longs === String ? "0" : 0;
                        if (message.seconds != null && message.hasOwnProperty("seconds"))
                            if (typeof message.seconds === "number")
                                object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                            else
                                object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                        return object;
                    };
    
                    /**
                     * Converts this PprofCpuProfileRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofCpuProfileRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofCpuProfileRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofCpuProfileRequest;
                })();
    
                api.PprofHeapProfileRequest = (function() {
    
                    /**
                     * Properties of a PprofHeapProfileRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofHeapProfileRequest
                     * @property {boolean|null} [gc] PprofHeapProfileRequest gc
                     * @property {boolean|null} [debug] PprofHeapProfileRequest debug
                     */
    
                    /**
                     * Constructs a new PprofHeapProfileRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofHeapProfileRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofHeapProfileRequest=} [properties] Properties to set
                     */
                    function PprofHeapProfileRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofHeapProfileRequest gc.
                     * @member {boolean} gc
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @instance
                     */
                    PprofHeapProfileRequest.prototype.gc = false;
    
                    /**
                     * PprofHeapProfileRequest debug.
                     * @member {boolean} debug
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @instance
                     */
                    PprofHeapProfileRequest.prototype.debug = false;
    
                    /**
                     * Creates a new PprofHeapProfileRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {replit.goval.api.IPprofHeapProfileRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofHeapProfileRequest} PprofHeapProfileRequest instance
                     */
                    PprofHeapProfileRequest.create = function create(properties) {
                        return PprofHeapProfileRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofHeapProfileRequest message. Does not implicitly {@link replit.goval.api.PprofHeapProfileRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofHeapProfileRequest} message PprofHeapProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofHeapProfileRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.gc != null && Object.hasOwnProperty.call(message, "gc"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.gc);
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.debug);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofHeapProfileRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofHeapProfileRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofHeapProfileRequest} message PprofHeapProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofHeapProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofHeapProfileRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofHeapProfileRequest} PprofHeapProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofHeapProfileRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofHeapProfileRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.gc = reader.bool();
                                break;
                            case 2:
                                message.debug = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofHeapProfileRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofHeapProfileRequest} PprofHeapProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofHeapProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofHeapProfileRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofHeapProfileRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.gc != null && message.hasOwnProperty("gc"))
                            if (typeof message.gc !== "boolean")
                                return "gc: boolean expected";
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            if (typeof message.debug !== "boolean")
                                return "debug: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofHeapProfileRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofHeapProfileRequest} PprofHeapProfileRequest
                     */
                    PprofHeapProfileRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofHeapProfileRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofHeapProfileRequest();
                        if (object.gc != null)
                            message.gc = Boolean(object.gc);
                        if (object.debug != null)
                            message.debug = Boolean(object.debug);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofHeapProfileRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofHeapProfileRequest} message PprofHeapProfileRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofHeapProfileRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.gc = false;
                            object.debug = false;
                        }
                        if (message.gc != null && message.hasOwnProperty("gc"))
                            object.gc = message.gc;
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            object.debug = message.debug;
                        return object;
                    };
    
                    /**
                     * Converts this PprofHeapProfileRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofHeapProfileRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofHeapProfileRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofHeapProfileRequest;
                })();
    
                api.PprofMutexProfileRequest = (function() {
    
                    /**
                     * Properties of a PprofMutexProfileRequest.
                     * @memberof replit.goval.api
                     * @interface IPprofMutexProfileRequest
                     * @property {boolean|null} [debug] PprofMutexProfileRequest debug
                     */
    
                    /**
                     * Constructs a new PprofMutexProfileRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofMutexProfileRequest.
                     * @constructor
                     * @param {replit.goval.api.IPprofMutexProfileRequest=} [properties] Properties to set
                     */
                    function PprofMutexProfileRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofMutexProfileRequest debug.
                     * @member {boolean} debug
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @instance
                     */
                    PprofMutexProfileRequest.prototype.debug = false;
    
                    /**
                     * Creates a new PprofMutexProfileRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {replit.goval.api.IPprofMutexProfileRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofMutexProfileRequest} PprofMutexProfileRequest instance
                     */
                    PprofMutexProfileRequest.create = function create(properties) {
                        return PprofMutexProfileRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofMutexProfileRequest message. Does not implicitly {@link replit.goval.api.PprofMutexProfileRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofMutexProfileRequest} message PprofMutexProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofMutexProfileRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.debug);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofMutexProfileRequest message, length delimited. Does not implicitly {@link replit.goval.api.PprofMutexProfileRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofMutexProfileRequest} message PprofMutexProfileRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofMutexProfileRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofMutexProfileRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofMutexProfileRequest} PprofMutexProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofMutexProfileRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofMutexProfileRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.debug = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofMutexProfileRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofMutexProfileRequest} PprofMutexProfileRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofMutexProfileRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofMutexProfileRequest message.
                     * @function verify
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofMutexProfileRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            if (typeof message.debug !== "boolean")
                                return "debug: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofMutexProfileRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofMutexProfileRequest} PprofMutexProfileRequest
                     */
                    PprofMutexProfileRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofMutexProfileRequest)
                            return object;
                        var message = new $root.replit.goval.api.PprofMutexProfileRequest();
                        if (object.debug != null)
                            message.debug = Boolean(object.debug);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofMutexProfileRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @static
                     * @param {replit.goval.api.PprofMutexProfileRequest} message PprofMutexProfileRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofMutexProfileRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.debug = false;
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            object.debug = message.debug;
                        return object;
                    };
    
                    /**
                     * Converts this PprofMutexProfileRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofMutexProfileRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofMutexProfileRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofMutexProfileRequest;
                })();
    
                api.PprofResponse = (function() {
    
                    /**
                     * Properties of a PprofResponse.
                     * @memberof replit.goval.api
                     * @interface IPprofResponse
                     * @property {string|null} [id] PprofResponse id
                     * @property {Uint8Array|null} [profile] PprofResponse profile
                     */
    
                    /**
                     * Constructs a new PprofResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PprofResponse.
                     * @constructor
                     * @param {replit.goval.api.IPprofResponse=} [properties] Properties to set
                     */
                    function PprofResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PprofResponse id.
                     * @member {string} id
                     * @memberof replit.goval.api.PprofResponse
                     * @instance
                     */
                    PprofResponse.prototype.id = "";
    
                    /**
                     * PprofResponse profile.
                     * @member {Uint8Array} profile
                     * @memberof replit.goval.api.PprofResponse
                     * @instance
                     */
                    PprofResponse.prototype.profile = $util.newBuffer([]);
    
                    /**
                     * Creates a new PprofResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {replit.goval.api.IPprofResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.PprofResponse} PprofResponse instance
                     */
                    PprofResponse.create = function create(properties) {
                        return PprofResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PprofResponse message. Does not implicitly {@link replit.goval.api.PprofResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {replit.goval.api.PprofResponse} message PprofResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.profile != null && Object.hasOwnProperty.call(message, "profile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.profile);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PprofResponse message, length delimited. Does not implicitly {@link replit.goval.api.PprofResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {replit.goval.api.PprofResponse} message PprofResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PprofResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PprofResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PprofResponse} PprofResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PprofResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.profile = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PprofResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PprofResponse} PprofResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PprofResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PprofResponse message.
                     * @function verify
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PprofResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.profile != null && message.hasOwnProperty("profile"))
                            if (!(message.profile && typeof message.profile.length === "number" || $util.isString(message.profile)))
                                return "profile: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a PprofResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PprofResponse} PprofResponse
                     */
                    PprofResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PprofResponse)
                            return object;
                        var message = new $root.replit.goval.api.PprofResponse();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.profile != null)
                            if (typeof object.profile === "string")
                                $util.base64.decode(object.profile, message.profile = $util.newBuffer($util.base64.length(object.profile)), 0);
                            else if (object.profile.length)
                                message.profile = object.profile;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PprofResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PprofResponse
                     * @static
                     * @param {replit.goval.api.PprofResponse} message PprofResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PprofResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = "";
                            if (options.bytes === String)
                                object.profile = "";
                            else {
                                object.profile = [];
                                if (options.bytes !== Array)
                                    object.profile = $util.newBuffer(object.profile);
                            }
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.profile != null && message.hasOwnProperty("profile"))
                            object.profile = options.bytes === String ? $util.base64.encode(message.profile, 0, message.profile.length) : options.bytes === Array ? Array.prototype.slice.call(message.profile) : message.profile;
                        return object;
                    };
    
                    /**
                     * Converts this PprofResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PprofResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PprofResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PprofResponse;
                })();
    
                api.PTYConfig = (function() {
    
                    /**
                     * Properties of a PTYConfig.
                     * @memberof replit.goval.api
                     * @interface IPTYConfig
                     * @property {boolean|null} [pipeMode] PTYConfig pipeMode
                     */
    
                    /**
                     * Constructs a new PTYConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PTYConfig.
                     * @constructor
                     * @param {replit.goval.api.IPTYConfig=} [properties] Properties to set
                     */
                    function PTYConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PTYConfig pipeMode.
                     * @member {boolean} pipeMode
                     * @memberof replit.goval.api.PTYConfig
                     * @instance
                     */
                    PTYConfig.prototype.pipeMode = false;
    
                    /**
                     * Creates a new PTYConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {replit.goval.api.IPTYConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.PTYConfig} PTYConfig instance
                     */
                    PTYConfig.create = function create(properties) {
                        return PTYConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PTYConfig message. Does not implicitly {@link replit.goval.api.PTYConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {replit.goval.api.PTYConfig} message PTYConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PTYConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pipeMode != null && Object.hasOwnProperty.call(message, "pipeMode"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.pipeMode);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PTYConfig message, length delimited. Does not implicitly {@link replit.goval.api.PTYConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {replit.goval.api.PTYConfig} message PTYConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PTYConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PTYConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PTYConfig} PTYConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PTYConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PTYConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pipeMode = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PTYConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PTYConfig} PTYConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PTYConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PTYConfig message.
                     * @function verify
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PTYConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pipeMode != null && message.hasOwnProperty("pipeMode"))
                            if (typeof message.pipeMode !== "boolean")
                                return "pipeMode: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a PTYConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PTYConfig} PTYConfig
                     */
                    PTYConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PTYConfig)
                            return object;
                        var message = new $root.replit.goval.api.PTYConfig();
                        if (object.pipeMode != null)
                            message.pipeMode = Boolean(object.pipeMode);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PTYConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PTYConfig
                     * @static
                     * @param {replit.goval.api.PTYConfig} message PTYConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PTYConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.pipeMode = false;
                        if (message.pipeMode != null && message.hasOwnProperty("pipeMode"))
                            object.pipeMode = message.pipeMode;
                        return object;
                    };
    
                    /**
                     * Converts this PTYConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PTYConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PTYConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PTYConfig;
                })();
    
                api.DebugMain = (function() {
    
                    /**
                     * Properties of a DebugMain.
                     * @memberof replit.goval.api
                     * @interface IDebugMain
                     * @property {string|null} [session] DebugMain session
                     * @property {boolean|null} [readOnly] DebugMain readOnly
                     */
    
                    /**
                     * Constructs a new DebugMain.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugMain.
                     * @constructor
                     * @param {replit.goval.api.IDebugMain=} [properties] Properties to set
                     */
                    function DebugMain(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugMain session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugMain
                     * @instance
                     */
                    DebugMain.prototype.session = "";
    
                    /**
                     * DebugMain readOnly.
                     * @member {boolean} readOnly
                     * @memberof replit.goval.api.DebugMain
                     * @instance
                     */
                    DebugMain.prototype.readOnly = false;
    
                    /**
                     * Creates a new DebugMain instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {replit.goval.api.IDebugMain=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugMain} DebugMain instance
                     */
                    DebugMain.create = function create(properties) {
                        return DebugMain.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugMain message. Does not implicitly {@link replit.goval.api.DebugMain.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {replit.goval.api.DebugMain} message DebugMain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugMain.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.readOnly != null && Object.hasOwnProperty.call(message, "readOnly"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.readOnly);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugMain message, length delimited. Does not implicitly {@link replit.goval.api.DebugMain.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {replit.goval.api.DebugMain} message DebugMain message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugMain.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugMain message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugMain} DebugMain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugMain.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugMain();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.readOnly = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugMain message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugMain} DebugMain
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugMain.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugMain message.
                     * @function verify
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugMain.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.readOnly != null && message.hasOwnProperty("readOnly"))
                            if (typeof message.readOnly !== "boolean")
                                return "readOnly: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugMain message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugMain} DebugMain
                     */
                    DebugMain.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugMain)
                            return object;
                        var message = new $root.replit.goval.api.DebugMain();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.readOnly != null)
                            message.readOnly = Boolean(object.readOnly);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugMain message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugMain
                     * @static
                     * @param {replit.goval.api.DebugMain} message DebugMain
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugMain.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.session = "";
                            object.readOnly = false;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.readOnly != null && message.hasOwnProperty("readOnly"))
                            object.readOnly = message.readOnly;
                        return object;
                    };
    
                    /**
                     * Converts this DebugMain to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugMain
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugMain.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugMain;
                })();
    
                api.DebugMainReply = (function() {
    
                    /**
                     * Properties of a DebugMainReply.
                     * @memberof replit.goval.api
                     * @interface IDebugMainReply
                     * @property {boolean|null} [joined] DebugMainReply joined
                     * @property {replit.goval.api.DebugMainReply.Protocol|null} [protocol] DebugMainReply protocol
                     */
    
                    /**
                     * Constructs a new DebugMainReply.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugMainReply.
                     * @constructor
                     * @param {replit.goval.api.IDebugMainReply=} [properties] Properties to set
                     */
                    function DebugMainReply(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugMainReply joined.
                     * @member {boolean} joined
                     * @memberof replit.goval.api.DebugMainReply
                     * @instance
                     */
                    DebugMainReply.prototype.joined = false;
    
                    /**
                     * DebugMainReply protocol.
                     * @member {replit.goval.api.DebugMainReply.Protocol} protocol
                     * @memberof replit.goval.api.DebugMainReply
                     * @instance
                     */
                    DebugMainReply.prototype.protocol = 0;
    
                    /**
                     * Creates a new DebugMainReply instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {replit.goval.api.IDebugMainReply=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugMainReply} DebugMainReply instance
                     */
                    DebugMainReply.create = function create(properties) {
                        return DebugMainReply.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugMainReply message. Does not implicitly {@link replit.goval.api.DebugMainReply.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {replit.goval.api.DebugMainReply} message DebugMainReply message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugMainReply.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.joined != null && Object.hasOwnProperty.call(message, "joined"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.joined);
                        if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.protocol);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugMainReply message, length delimited. Does not implicitly {@link replit.goval.api.DebugMainReply.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {replit.goval.api.DebugMainReply} message DebugMainReply message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugMainReply.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugMainReply message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugMainReply} DebugMainReply
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugMainReply.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugMainReply();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.joined = reader.bool();
                                break;
                            case 2:
                                message.protocol = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugMainReply message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugMainReply} DebugMainReply
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugMainReply.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugMainReply message.
                     * @function verify
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugMainReply.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.joined != null && message.hasOwnProperty("joined"))
                            if (typeof message.joined !== "boolean")
                                return "joined: boolean expected";
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            switch (message.protocol) {
                            default:
                                return "protocol: enum value expected";
                            case 0:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a DebugMainReply message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugMainReply} DebugMainReply
                     */
                    DebugMainReply.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugMainReply)
                            return object;
                        var message = new $root.replit.goval.api.DebugMainReply();
                        if (object.joined != null)
                            message.joined = Boolean(object.joined);
                        switch (object.protocol) {
                        case "DAP":
                        case 0:
                            message.protocol = 0;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugMainReply message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugMainReply
                     * @static
                     * @param {replit.goval.api.DebugMainReply} message DebugMainReply
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugMainReply.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.joined = false;
                            object.protocol = options.enums === String ? "DAP" : 0;
                        }
                        if (message.joined != null && message.hasOwnProperty("joined"))
                            object.joined = message.joined;
                        if (message.protocol != null && message.hasOwnProperty("protocol"))
                            object.protocol = options.enums === String ? $root.replit.goval.api.DebugMainReply.Protocol[message.protocol] : message.protocol;
                        return object;
                    };
    
                    /**
                     * Converts this DebugMainReply to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugMainReply
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugMainReply.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Protocol enum.
                     * @name replit.goval.api.DebugMainReply.Protocol
                     * @enum {number}
                     * @property {number} DAP=0 DAP value
                     */
                    DebugMainReply.Protocol = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DAP"] = 0;
                        return values;
                    })();
    
                    return DebugMainReply;
                })();
    
                api.DebugState = (function() {
    
                    /**
                     * Properties of a DebugState.
                     * @memberof replit.goval.api
                     * @interface IDebugState
                     * @property {string|null} [session] DebugState session
                     * @property {replit.goval.api.State|null} [state] DebugState state
                     */
    
                    /**
                     * Constructs a new DebugState.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugState.
                     * @constructor
                     * @param {replit.goval.api.IDebugState=} [properties] Properties to set
                     */
                    function DebugState(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugState session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugState
                     * @instance
                     */
                    DebugState.prototype.session = "";
    
                    /**
                     * DebugState state.
                     * @member {replit.goval.api.State} state
                     * @memberof replit.goval.api.DebugState
                     * @instance
                     */
                    DebugState.prototype.state = 0;
    
                    /**
                     * Creates a new DebugState instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {replit.goval.api.IDebugState=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugState} DebugState instance
                     */
                    DebugState.create = function create(properties) {
                        return DebugState.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugState message. Does not implicitly {@link replit.goval.api.DebugState.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {replit.goval.api.DebugState} message DebugState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugState message, length delimited. Does not implicitly {@link replit.goval.api.DebugState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {replit.goval.api.DebugState} message DebugState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugState message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugState} DebugState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugState();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.state = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugState} DebugState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugState message.
                     * @function verify
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a DebugState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugState} DebugState
                     */
                    DebugState.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugState)
                            return object;
                        var message = new $root.replit.goval.api.DebugState();
                        if (object.session != null)
                            message.session = String(object.session);
                        switch (object.state) {
                        case "Stopped":
                        case 0:
                            message.state = 0;
                            break;
                        case "Running":
                        case 1:
                            message.state = 1;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugState
                     * @static
                     * @param {replit.goval.api.DebugState} message DebugState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.session = "";
                            object.state = options.enums === String ? "Stopped" : 0;
                        }
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.replit.goval.api.State[message.state] : message.state;
                        return object;
                    };
    
                    /**
                     * Converts this DebugState to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugState;
                })();
    
                api.DebugInput = (function() {
    
                    /**
                     * Properties of a DebugInput.
                     * @memberof replit.goval.api
                     * @interface IDebugInput
                     * @property {string|null} [session] DebugInput session
                     * @property {string|null} [input] DebugInput input
                     * @property {string|null} [adapterInput] DebugInput adapterInput
                     */
    
                    /**
                     * Constructs a new DebugInput.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugInput.
                     * @constructor
                     * @param {replit.goval.api.IDebugInput=} [properties] Properties to set
                     */
                    function DebugInput(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugInput session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugInput
                     * @instance
                     */
                    DebugInput.prototype.session = "";
    
                    /**
                     * DebugInput input.
                     * @member {string|null|undefined} input
                     * @memberof replit.goval.api.DebugInput
                     * @instance
                     */
                    DebugInput.prototype.input = null;
    
                    /**
                     * DebugInput adapterInput.
                     * @member {string|null|undefined} adapterInput
                     * @memberof replit.goval.api.DebugInput
                     * @instance
                     */
                    DebugInput.prototype.adapterInput = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * DebugInput stream.
                     * @member {"input"|"adapterInput"|undefined} stream
                     * @memberof replit.goval.api.DebugInput
                     * @instance
                     */
                    Object.defineProperty(DebugInput.prototype, "stream", {
                        get: $util.oneOfGetter($oneOfFields = ["input", "adapterInput"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new DebugInput instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {replit.goval.api.IDebugInput=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugInput} DebugInput instance
                     */
                    DebugInput.create = function create(properties) {
                        return DebugInput.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugInput message. Does not implicitly {@link replit.goval.api.DebugInput.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {replit.goval.api.DebugInput} message DebugInput message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugInput.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.input);
                        if (message.adapterInput != null && Object.hasOwnProperty.call(message, "adapterInput"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.adapterInput);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugInput message, length delimited. Does not implicitly {@link replit.goval.api.DebugInput.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {replit.goval.api.DebugInput} message DebugInput message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugInput.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugInput message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugInput} DebugInput
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugInput.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugInput();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.input = reader.string();
                                break;
                            case 3:
                                message.adapterInput = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugInput message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugInput} DebugInput
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugInput.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugInput message.
                     * @function verify
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugInput.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.input != null && message.hasOwnProperty("input")) {
                            properties.stream = 1;
                            if (!$util.isString(message.input))
                                return "input: string expected";
                        }
                        if (message.adapterInput != null && message.hasOwnProperty("adapterInput")) {
                            if (properties.stream === 1)
                                return "stream: multiple values";
                            properties.stream = 1;
                            if (!$util.isString(message.adapterInput))
                                return "adapterInput: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebugInput message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugInput} DebugInput
                     */
                    DebugInput.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugInput)
                            return object;
                        var message = new $root.replit.goval.api.DebugInput();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.input != null)
                            message.input = String(object.input);
                        if (object.adapterInput != null)
                            message.adapterInput = String(object.adapterInput);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugInput message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugInput
                     * @static
                     * @param {replit.goval.api.DebugInput} message DebugInput
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugInput.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = "";
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.input != null && message.hasOwnProperty("input")) {
                            object.input = message.input;
                            if (options.oneofs)
                                object.stream = "input";
                        }
                        if (message.adapterInput != null && message.hasOwnProperty("adapterInput")) {
                            object.adapterInput = message.adapterInput;
                            if (options.oneofs)
                                object.stream = "adapterInput";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DebugInput to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugInput
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugInput.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugInput;
                })();
    
                api.DebugOutput = (function() {
    
                    /**
                     * Properties of a DebugOutput.
                     * @memberof replit.goval.api
                     * @interface IDebugOutput
                     * @property {string|null} [session] DebugOutput session
                     * @property {string|null} [output] DebugOutput output
                     * @property {string|null} [adapterOutput] DebugOutput adapterOutput
                     */
    
                    /**
                     * Constructs a new DebugOutput.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugOutput.
                     * @constructor
                     * @param {replit.goval.api.IDebugOutput=} [properties] Properties to set
                     */
                    function DebugOutput(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugOutput session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugOutput
                     * @instance
                     */
                    DebugOutput.prototype.session = "";
    
                    /**
                     * DebugOutput output.
                     * @member {string|null|undefined} output
                     * @memberof replit.goval.api.DebugOutput
                     * @instance
                     */
                    DebugOutput.prototype.output = null;
    
                    /**
                     * DebugOutput adapterOutput.
                     * @member {string|null|undefined} adapterOutput
                     * @memberof replit.goval.api.DebugOutput
                     * @instance
                     */
                    DebugOutput.prototype.adapterOutput = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * DebugOutput stream.
                     * @member {"output"|"adapterOutput"|undefined} stream
                     * @memberof replit.goval.api.DebugOutput
                     * @instance
                     */
                    Object.defineProperty(DebugOutput.prototype, "stream", {
                        get: $util.oneOfGetter($oneOfFields = ["output", "adapterOutput"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new DebugOutput instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {replit.goval.api.IDebugOutput=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugOutput} DebugOutput instance
                     */
                    DebugOutput.create = function create(properties) {
                        return DebugOutput.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugOutput message. Does not implicitly {@link replit.goval.api.DebugOutput.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {replit.goval.api.DebugOutput} message DebugOutput message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugOutput.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.output);
                        if (message.adapterOutput != null && Object.hasOwnProperty.call(message, "adapterOutput"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.adapterOutput);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugOutput message, length delimited. Does not implicitly {@link replit.goval.api.DebugOutput.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {replit.goval.api.DebugOutput} message DebugOutput message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugOutput.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugOutput message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugOutput} DebugOutput
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugOutput.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugOutput();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            case 2:
                                message.output = reader.string();
                                break;
                            case 3:
                                message.adapterOutput = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugOutput message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugOutput} DebugOutput
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugOutput.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugOutput message.
                     * @function verify
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugOutput.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        if (message.output != null && message.hasOwnProperty("output")) {
                            properties.stream = 1;
                            if (!$util.isString(message.output))
                                return "output: string expected";
                        }
                        if (message.adapterOutput != null && message.hasOwnProperty("adapterOutput")) {
                            if (properties.stream === 1)
                                return "stream: multiple values";
                            properties.stream = 1;
                            if (!$util.isString(message.adapterOutput))
                                return "adapterOutput: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebugOutput message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugOutput} DebugOutput
                     */
                    DebugOutput.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugOutput)
                            return object;
                        var message = new $root.replit.goval.api.DebugOutput();
                        if (object.session != null)
                            message.session = String(object.session);
                        if (object.output != null)
                            message.output = String(object.output);
                        if (object.adapterOutput != null)
                            message.adapterOutput = String(object.adapterOutput);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugOutput message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugOutput
                     * @static
                     * @param {replit.goval.api.DebugOutput} message DebugOutput
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugOutput.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = "";
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        if (message.output != null && message.hasOwnProperty("output")) {
                            object.output = message.output;
                            if (options.oneofs)
                                object.stream = "output";
                        }
                        if (message.adapterOutput != null && message.hasOwnProperty("adapterOutput")) {
                            object.adapterOutput = message.adapterOutput;
                            if (options.oneofs)
                                object.stream = "adapterOutput";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DebugOutput to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugOutput
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugOutput.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugOutput;
                })();
    
                api.DebugStop = (function() {
    
                    /**
                     * Properties of a DebugStop.
                     * @memberof replit.goval.api
                     * @interface IDebugStop
                     * @property {string|null} [session] DebugStop session
                     */
    
                    /**
                     * Constructs a new DebugStop.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugStop.
                     * @constructor
                     * @param {replit.goval.api.IDebugStop=} [properties] Properties to set
                     */
                    function DebugStop(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugStop session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugStop
                     * @instance
                     */
                    DebugStop.prototype.session = "";
    
                    /**
                     * Creates a new DebugStop instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {replit.goval.api.IDebugStop=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugStop} DebugStop instance
                     */
                    DebugStop.create = function create(properties) {
                        return DebugStop.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugStop message. Does not implicitly {@link replit.goval.api.DebugStop.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {replit.goval.api.DebugStop} message DebugStop message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugStop.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugStop message, length delimited. Does not implicitly {@link replit.goval.api.DebugStop.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {replit.goval.api.DebugStop} message DebugStop message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugStop.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugStop message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugStop} DebugStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugStop.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugStop();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugStop message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugStop} DebugStop
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugStop.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugStop message.
                     * @function verify
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugStop.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugStop message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugStop} DebugStop
                     */
                    DebugStop.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugStop)
                            return object;
                        var message = new $root.replit.goval.api.DebugStop();
                        if (object.session != null)
                            message.session = String(object.session);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugStop message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugStop
                     * @static
                     * @param {replit.goval.api.DebugStop} message DebugStop
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugStop.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = "";
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        return object;
                    };
    
                    /**
                     * Converts this DebugStop to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugStop
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugStop.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugStop;
                })();
    
                api.DebugLeave = (function() {
    
                    /**
                     * Properties of a DebugLeave.
                     * @memberof replit.goval.api
                     * @interface IDebugLeave
                     * @property {string|null} [session] DebugLeave session
                     */
    
                    /**
                     * Constructs a new DebugLeave.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugLeave.
                     * @constructor
                     * @param {replit.goval.api.IDebugLeave=} [properties] Properties to set
                     */
                    function DebugLeave(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugLeave session.
                     * @member {string} session
                     * @memberof replit.goval.api.DebugLeave
                     * @instance
                     */
                    DebugLeave.prototype.session = "";
    
                    /**
                     * Creates a new DebugLeave instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {replit.goval.api.IDebugLeave=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugLeave} DebugLeave instance
                     */
                    DebugLeave.create = function create(properties) {
                        return DebugLeave.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugLeave message. Does not implicitly {@link replit.goval.api.DebugLeave.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {replit.goval.api.DebugLeave} message DebugLeave message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugLeave.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.session != null && Object.hasOwnProperty.call(message, "session"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugLeave message, length delimited. Does not implicitly {@link replit.goval.api.DebugLeave.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {replit.goval.api.DebugLeave} message DebugLeave message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugLeave.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugLeave message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugLeave} DebugLeave
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugLeave.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugLeave();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.session = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugLeave message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugLeave} DebugLeave
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugLeave.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugLeave message.
                     * @function verify
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugLeave.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.session != null && message.hasOwnProperty("session"))
                            if (!$util.isString(message.session))
                                return "session: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugLeave message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugLeave} DebugLeave
                     */
                    DebugLeave.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugLeave)
                            return object;
                        var message = new $root.replit.goval.api.DebugLeave();
                        if (object.session != null)
                            message.session = String(object.session);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugLeave message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugLeave
                     * @static
                     * @param {replit.goval.api.DebugLeave} message DebugLeave
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugLeave.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.session = "";
                        if (message.session != null && message.hasOwnProperty("session"))
                            object.session = message.session;
                        return object;
                    };
    
                    /**
                     * Converts this DebugLeave to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugLeave
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugLeave.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugLeave;
                })();
    
                api.DebugSessions = (function() {
    
                    /**
                     * Properties of a DebugSessions.
                     * @memberof replit.goval.api
                     * @interface IDebugSessions
                     * @property {Object.<string,replit.goval.api.State>|null} [sessions] DebugSessions sessions
                     */
    
                    /**
                     * Constructs a new DebugSessions.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugSessions.
                     * @constructor
                     * @param {replit.goval.api.IDebugSessions=} [properties] Properties to set
                     */
                    function DebugSessions(properties) {
                        this.sessions = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugSessions sessions.
                     * @member {Object.<string,replit.goval.api.State>} sessions
                     * @memberof replit.goval.api.DebugSessions
                     * @instance
                     */
                    DebugSessions.prototype.sessions = $util.emptyObject;
    
                    /**
                     * Creates a new DebugSessions instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {replit.goval.api.IDebugSessions=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugSessions} DebugSessions instance
                     */
                    DebugSessions.create = function create(properties) {
                        return DebugSessions.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugSessions message. Does not implicitly {@link replit.goval.api.DebugSessions.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {replit.goval.api.DebugSessions} message DebugSessions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugSessions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sessions != null && Object.hasOwnProperty.call(message, "sessions"))
                            for (var keys = Object.keys(message.sessions), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.sessions[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugSessions message, length delimited. Does not implicitly {@link replit.goval.api.DebugSessions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {replit.goval.api.DebugSessions} message DebugSessions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugSessions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugSessions message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugSessions} DebugSessions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugSessions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugSessions(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (message.sessions === $util.emptyObject)
                                    message.sessions = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = 0;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.sessions[key] = value;
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugSessions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugSessions} DebugSessions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugSessions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugSessions message.
                     * @function verify
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugSessions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sessions != null && message.hasOwnProperty("sessions")) {
                            if (!$util.isObject(message.sessions))
                                return "sessions: object expected";
                            var key = Object.keys(message.sessions);
                            for (var i = 0; i < key.length; ++i)
                                switch (message.sessions[key[i]]) {
                                default:
                                    return "sessions: enum value{k:string} expected";
                                case 0:
                                case 1:
                                    break;
                                }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebugSessions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugSessions} DebugSessions
                     */
                    DebugSessions.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugSessions)
                            return object;
                        var message = new $root.replit.goval.api.DebugSessions();
                        if (object.sessions) {
                            if (typeof object.sessions !== "object")
                                throw TypeError(".replit.goval.api.DebugSessions.sessions: object expected");
                            message.sessions = {};
                            for (var keys = Object.keys(object.sessions), i = 0; i < keys.length; ++i)
                                switch (object.sessions[keys[i]]) {
                                case "Stopped":
                                case 0:
                                    message.sessions[keys[i]] = 0;
                                    break;
                                case "Running":
                                case 1:
                                    message.sessions[keys[i]] = 1;
                                    break;
                                }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugSessions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugSessions
                     * @static
                     * @param {replit.goval.api.DebugSessions} message DebugSessions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugSessions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.sessions = {};
                        var keys2;
                        if (message.sessions && (keys2 = Object.keys(message.sessions)).length) {
                            object.sessions = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.sessions[keys2[j]] = options.enums === String ? $root.replit.goval.api.State[message.sessions[keys2[j]]] : message.sessions[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DebugSessions to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugSessions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugSessions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugSessions;
                })();
    
                api.DotReplitGetRequest = (function() {
    
                    /**
                     * Properties of a DotReplitGetRequest.
                     * @memberof replit.goval.api
                     * @interface IDotReplitGetRequest
                     */
    
                    /**
                     * Constructs a new DotReplitGetRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitGetRequest.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitGetRequest=} [properties] Properties to set
                     */
                    function DotReplitGetRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new DotReplitGetRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {replit.goval.api.IDotReplitGetRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitGetRequest} DotReplitGetRequest instance
                     */
                    DotReplitGetRequest.create = function create(properties) {
                        return DotReplitGetRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitGetRequest message. Does not implicitly {@link replit.goval.api.DotReplitGetRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {replit.goval.api.DotReplitGetRequest} message DotReplitGetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitGetRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitGetRequest message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitGetRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {replit.goval.api.DotReplitGetRequest} message DotReplitGetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitGetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitGetRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitGetRequest} DotReplitGetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitGetRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitGetRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitGetRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitGetRequest} DotReplitGetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitGetRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitGetRequest message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitGetRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitGetRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitGetRequest} DotReplitGetRequest
                     */
                    DotReplitGetRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitGetRequest)
                            return object;
                        return new $root.replit.goval.api.DotReplitGetRequest();
                    };
    
                    /**
                     * Creates a plain object from a DotReplitGetRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @static
                     * @param {replit.goval.api.DotReplitGetRequest} message DotReplitGetRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitGetRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this DotReplitGetRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitGetRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitGetRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitGetRequest;
                })();
    
                api.DotReplitGetResponse = (function() {
    
                    /**
                     * Properties of a DotReplitGetResponse.
                     * @memberof replit.goval.api
                     * @interface IDotReplitGetResponse
                     * @property {replit.goval.api.DotReplit|replit.goval.api.IDotReplit|null} [dotReplit] DotReplitGetResponse dotReplit
                     */
    
                    /**
                     * Constructs a new DotReplitGetResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitGetResponse.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitGetResponse=} [properties] Properties to set
                     */
                    function DotReplitGetResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitGetResponse dotReplit.
                     * @member {replit.goval.api.DotReplit|null|undefined} dotReplit
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @instance
                     */
                    DotReplitGetResponse.prototype.dotReplit = null;
    
                    /**
                     * Creates a new DotReplitGetResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {replit.goval.api.IDotReplitGetResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitGetResponse} DotReplitGetResponse instance
                     */
                    DotReplitGetResponse.create = function create(properties) {
                        return DotReplitGetResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitGetResponse message. Does not implicitly {@link replit.goval.api.DotReplitGetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {replit.goval.api.DotReplitGetResponse} message DotReplitGetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitGetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dotReplit != null && Object.hasOwnProperty.call(message, "dotReplit"))
                            $root.replit.goval.api.DotReplit.encode(message.dotReplit, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitGetResponse message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitGetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {replit.goval.api.DotReplitGetResponse} message DotReplitGetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitGetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitGetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitGetResponse} DotReplitGetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitGetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitGetResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.dotReplit = $root.replit.goval.api.DotReplit.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitGetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitGetResponse} DotReplitGetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitGetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitGetResponse message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitGetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.dotReplit != null && message.hasOwnProperty("dotReplit")) {
                            var error = $root.replit.goval.api.DotReplit.verify(message.dotReplit);
                            if (error)
                                return "dotReplit." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitGetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitGetResponse} DotReplitGetResponse
                     */
                    DotReplitGetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitGetResponse)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitGetResponse();
                        if (object.dotReplit != null) {
                            if (typeof object.dotReplit !== "object")
                                throw TypeError(".replit.goval.api.DotReplitGetResponse.dotReplit: object expected");
                            message.dotReplit = $root.replit.goval.api.DotReplit.fromObject(object.dotReplit);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitGetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @static
                     * @param {replit.goval.api.DotReplitGetResponse} message DotReplitGetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitGetResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.dotReplit = null;
                        if (message.dotReplit != null && message.hasOwnProperty("dotReplit"))
                            object.dotReplit = $root.replit.goval.api.DotReplit.toObject(message.dotReplit, options);
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitGetResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitGetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitGetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitGetResponse;
                })();
    
                api.RunConfigGetRequest = (function() {
    
                    /**
                     * Properties of a RunConfigGetRequest.
                     * @memberof replit.goval.api
                     * @interface IRunConfigGetRequest
                     */
    
                    /**
                     * Constructs a new RunConfigGetRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a RunConfigGetRequest.
                     * @constructor
                     * @param {replit.goval.api.IRunConfigGetRequest=} [properties] Properties to set
                     */
                    function RunConfigGetRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new RunConfigGetRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {replit.goval.api.IRunConfigGetRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.RunConfigGetRequest} RunConfigGetRequest instance
                     */
                    RunConfigGetRequest.create = function create(properties) {
                        return RunConfigGetRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified RunConfigGetRequest message. Does not implicitly {@link replit.goval.api.RunConfigGetRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {replit.goval.api.RunConfigGetRequest} message RunConfigGetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunConfigGetRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RunConfigGetRequest message, length delimited. Does not implicitly {@link replit.goval.api.RunConfigGetRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {replit.goval.api.RunConfigGetRequest} message RunConfigGetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunConfigGetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RunConfigGetRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.RunConfigGetRequest} RunConfigGetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunConfigGetRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.RunConfigGetRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RunConfigGetRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.RunConfigGetRequest} RunConfigGetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunConfigGetRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RunConfigGetRequest message.
                     * @function verify
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RunConfigGetRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a RunConfigGetRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.RunConfigGetRequest} RunConfigGetRequest
                     */
                    RunConfigGetRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.RunConfigGetRequest)
                            return object;
                        return new $root.replit.goval.api.RunConfigGetRequest();
                    };
    
                    /**
                     * Creates a plain object from a RunConfigGetRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @static
                     * @param {replit.goval.api.RunConfigGetRequest} message RunConfigGetRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RunConfigGetRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this RunConfigGetRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.RunConfigGetRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RunConfigGetRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return RunConfigGetRequest;
                })();
    
                api.RunConfigGetResponse = (function() {
    
                    /**
                     * Properties of a RunConfigGetResponse.
                     * @memberof replit.goval.api
                     * @interface IRunConfigGetResponse
                     * @property {replit.goval.api.DotReplitInterp|replit.goval.api.IDotReplitInterp|null} [interp] RunConfigGetResponse interp
                     * @property {replit.goval.api.RunConfigGetResponse.Run|replit.goval.api.RunConfigGetResponse.IRun|null} [run] RunConfigGetResponse run
                     */
    
                    /**
                     * Constructs a new RunConfigGetResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a RunConfigGetResponse.
                     * @constructor
                     * @param {replit.goval.api.IRunConfigGetResponse=} [properties] Properties to set
                     */
                    function RunConfigGetResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * RunConfigGetResponse interp.
                     * @member {replit.goval.api.DotReplitInterp|null|undefined} interp
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @instance
                     */
                    RunConfigGetResponse.prototype.interp = null;
    
                    /**
                     * RunConfigGetResponse run.
                     * @member {replit.goval.api.RunConfigGetResponse.Run|null|undefined} run
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @instance
                     */
                    RunConfigGetResponse.prototype.run = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * RunConfigGetResponse config.
                     * @member {"interp"|"run"|undefined} config
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @instance
                     */
                    Object.defineProperty(RunConfigGetResponse.prototype, "config", {
                        get: $util.oneOfGetter($oneOfFields = ["interp", "run"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new RunConfigGetResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {replit.goval.api.IRunConfigGetResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.RunConfigGetResponse} RunConfigGetResponse instance
                     */
                    RunConfigGetResponse.create = function create(properties) {
                        return RunConfigGetResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified RunConfigGetResponse message. Does not implicitly {@link replit.goval.api.RunConfigGetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {replit.goval.api.RunConfigGetResponse} message RunConfigGetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunConfigGetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.interp != null && Object.hasOwnProperty.call(message, "interp"))
                            $root.replit.goval.api.DotReplitInterp.encode(message.interp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.run != null && Object.hasOwnProperty.call(message, "run"))
                            $root.replit.goval.api.RunConfigGetResponse.Run.encode(message.run, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified RunConfigGetResponse message, length delimited. Does not implicitly {@link replit.goval.api.RunConfigGetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {replit.goval.api.RunConfigGetResponse} message RunConfigGetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    RunConfigGetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a RunConfigGetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.RunConfigGetResponse} RunConfigGetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunConfigGetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.RunConfigGetResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.interp = $root.replit.goval.api.DotReplitInterp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.run = $root.replit.goval.api.RunConfigGetResponse.Run.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a RunConfigGetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.RunConfigGetResponse} RunConfigGetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    RunConfigGetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a RunConfigGetResponse message.
                     * @function verify
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    RunConfigGetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.interp != null && message.hasOwnProperty("interp")) {
                            properties.config = 1;
                            {
                                var error = $root.replit.goval.api.DotReplitInterp.verify(message.interp);
                                if (error)
                                    return "interp." + error;
                            }
                        }
                        if (message.run != null && message.hasOwnProperty("run")) {
                            if (properties.config === 1)
                                return "config: multiple values";
                            properties.config = 1;
                            {
                                var error = $root.replit.goval.api.RunConfigGetResponse.Run.verify(message.run);
                                if (error)
                                    return "run." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a RunConfigGetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.RunConfigGetResponse} RunConfigGetResponse
                     */
                    RunConfigGetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.RunConfigGetResponse)
                            return object;
                        var message = new $root.replit.goval.api.RunConfigGetResponse();
                        if (object.interp != null) {
                            if (typeof object.interp !== "object")
                                throw TypeError(".replit.goval.api.RunConfigGetResponse.interp: object expected");
                            message.interp = $root.replit.goval.api.DotReplitInterp.fromObject(object.interp);
                        }
                        if (object.run != null) {
                            if (typeof object.run !== "object")
                                throw TypeError(".replit.goval.api.RunConfigGetResponse.run: object expected");
                            message.run = $root.replit.goval.api.RunConfigGetResponse.Run.fromObject(object.run);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a RunConfigGetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @static
                     * @param {replit.goval.api.RunConfigGetResponse} message RunConfigGetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    RunConfigGetResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.interp != null && message.hasOwnProperty("interp")) {
                            object.interp = $root.replit.goval.api.DotReplitInterp.toObject(message.interp, options);
                            if (options.oneofs)
                                object.config = "interp";
                        }
                        if (message.run != null && message.hasOwnProperty("run")) {
                            object.run = $root.replit.goval.api.RunConfigGetResponse.Run.toObject(message.run, options);
                            if (options.oneofs)
                                object.config = "run";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this RunConfigGetResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.RunConfigGetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    RunConfigGetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    RunConfigGetResponse.Run = (function() {
    
                        /**
                         * Properties of a Run.
                         * @memberof replit.goval.api.RunConfigGetResponse
                         * @interface IRun
                         * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [compile] Run compile
                         * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [run] Run run
                         */
    
                        /**
                         * Constructs a new Run.
                         * @memberof replit.goval.api.RunConfigGetResponse
                         * @classdesc Represents a Run.
                         * @constructor
                         * @param {replit.goval.api.RunConfigGetResponse.IRun=} [properties] Properties to set
                         */
                        function Run(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Run compile.
                         * @member {replit.goval.api.Exec|null|undefined} compile
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @instance
                         */
                        Run.prototype.compile = null;
    
                        /**
                         * Run run.
                         * @member {replit.goval.api.Exec|null|undefined} run
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @instance
                         */
                        Run.prototype.run = null;
    
                        /**
                         * Creates a new Run instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {replit.goval.api.RunConfigGetResponse.IRun=} [properties] Properties to set
                         * @returns {replit.goval.api.RunConfigGetResponse.Run} Run instance
                         */
                        Run.create = function create(properties) {
                            return Run.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Run message. Does not implicitly {@link replit.goval.api.RunConfigGetResponse.Run.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {replit.goval.api.RunConfigGetResponse.Run} message Run message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Run.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.compile != null && Object.hasOwnProperty.call(message, "compile"))
                                $root.replit.goval.api.Exec.encode(message.compile, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.run != null && Object.hasOwnProperty.call(message, "run"))
                                $root.replit.goval.api.Exec.encode(message.run, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Run message, length delimited. Does not implicitly {@link replit.goval.api.RunConfigGetResponse.Run.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {replit.goval.api.RunConfigGetResponse.Run} message Run message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Run.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Run message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.RunConfigGetResponse.Run} Run
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Run.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.RunConfigGetResponse.Run();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.compile = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.run = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Run message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.RunConfigGetResponse.Run} Run
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Run.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Run message.
                         * @function verify
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Run.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.compile != null && message.hasOwnProperty("compile")) {
                                var error = $root.replit.goval.api.Exec.verify(message.compile);
                                if (error)
                                    return "compile." + error;
                            }
                            if (message.run != null && message.hasOwnProperty("run")) {
                                var error = $root.replit.goval.api.Exec.verify(message.run);
                                if (error)
                                    return "run." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Run message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.RunConfigGetResponse.Run} Run
                         */
                        Run.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.RunConfigGetResponse.Run)
                                return object;
                            var message = new $root.replit.goval.api.RunConfigGetResponse.Run();
                            if (object.compile != null) {
                                if (typeof object.compile !== "object")
                                    throw TypeError(".replit.goval.api.RunConfigGetResponse.Run.compile: object expected");
                                message.compile = $root.replit.goval.api.Exec.fromObject(object.compile);
                            }
                            if (object.run != null) {
                                if (typeof object.run !== "object")
                                    throw TypeError(".replit.goval.api.RunConfigGetResponse.Run.run: object expected");
                                message.run = $root.replit.goval.api.Exec.fromObject(object.run);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Run message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @static
                         * @param {replit.goval.api.RunConfigGetResponse.Run} message Run
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Run.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.compile = null;
                                object.run = null;
                            }
                            if (message.compile != null && message.hasOwnProperty("compile"))
                                object.compile = $root.replit.goval.api.Exec.toObject(message.compile, options);
                            if (message.run != null && message.hasOwnProperty("run"))
                                object.run = $root.replit.goval.api.Exec.toObject(message.run, options);
                            return object;
                        };
    
                        /**
                         * Converts this Run to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.RunConfigGetResponse.Run
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Run.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Run;
                    })();
    
                    return RunConfigGetResponse;
                })();
    
                api.DotReplitUpdateOp = (function() {
    
                    /**
                     * Properties of a DotReplitUpdateOp.
                     * @memberof replit.goval.api
                     * @interface IDotReplitUpdateOp
                     * @property {string|null} [op] DotReplitUpdateOp op
                     * @property {string|null} [path] DotReplitUpdateOp path
                     * @property {string|null} [value] DotReplitUpdateOp value
                     */
    
                    /**
                     * Constructs a new DotReplitUpdateOp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitUpdateOp.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitUpdateOp=} [properties] Properties to set
                     */
                    function DotReplitUpdateOp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitUpdateOp op.
                     * @member {string} op
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @instance
                     */
                    DotReplitUpdateOp.prototype.op = "";
    
                    /**
                     * DotReplitUpdateOp path.
                     * @member {string} path
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @instance
                     */
                    DotReplitUpdateOp.prototype.path = "";
    
                    /**
                     * DotReplitUpdateOp value.
                     * @member {string} value
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @instance
                     */
                    DotReplitUpdateOp.prototype.value = "";
    
                    /**
                     * Creates a new DotReplitUpdateOp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {replit.goval.api.IDotReplitUpdateOp=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitUpdateOp} DotReplitUpdateOp instance
                     */
                    DotReplitUpdateOp.create = function create(properties) {
                        return DotReplitUpdateOp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateOp message. Does not implicitly {@link replit.goval.api.DotReplitUpdateOp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateOp} message DotReplitUpdateOp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateOp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.op != null && Object.hasOwnProperty.call(message, "op"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.op);
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateOp message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitUpdateOp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateOp} message DotReplitUpdateOp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateOp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitUpdateOp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitUpdateOp} DotReplitUpdateOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateOp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitUpdateOp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.op = reader.string();
                                break;
                            case 2:
                                message.path = reader.string();
                                break;
                            case 3:
                                message.value = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitUpdateOp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitUpdateOp} DotReplitUpdateOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateOp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitUpdateOp message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitUpdateOp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.op != null && message.hasOwnProperty("op"))
                            if (!$util.isString(message.op))
                                return "op: string expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitUpdateOp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitUpdateOp} DotReplitUpdateOp
                     */
                    DotReplitUpdateOp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitUpdateOp)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitUpdateOp();
                        if (object.op != null)
                            message.op = String(object.op);
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.value != null)
                            message.value = String(object.value);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitUpdateOp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateOp} message DotReplitUpdateOp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitUpdateOp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.op = "";
                            object.path = "";
                            object.value = "";
                        }
                        if (message.op != null && message.hasOwnProperty("op"))
                            object.op = message.op;
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitUpdateOp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitUpdateOp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitUpdateOp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitUpdateOp;
                })();
    
                api.DotReplitUpdateRequest = (function() {
    
                    /**
                     * Properties of a DotReplitUpdateRequest.
                     * @memberof replit.goval.api
                     * @interface IDotReplitUpdateRequest
                     * @property {Array.<replit.goval.api.DotReplitUpdateOp|replit.goval.api.IDotReplitUpdateOp>|null} [ops] DotReplitUpdateRequest ops
                     */
    
                    /**
                     * Constructs a new DotReplitUpdateRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitUpdateRequest.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitUpdateRequest=} [properties] Properties to set
                     */
                    function DotReplitUpdateRequest(properties) {
                        this.ops = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitUpdateRequest ops.
                     * @member {Array.<replit.goval.api.DotReplitUpdateOp>} ops
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @instance
                     */
                    DotReplitUpdateRequest.prototype.ops = $util.emptyArray;
    
                    /**
                     * Creates a new DotReplitUpdateRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {replit.goval.api.IDotReplitUpdateRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitUpdateRequest} DotReplitUpdateRequest instance
                     */
                    DotReplitUpdateRequest.create = function create(properties) {
                        return DotReplitUpdateRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateRequest message. Does not implicitly {@link replit.goval.api.DotReplitUpdateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateRequest} message DotReplitUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.ops != null && message.ops.length)
                            for (var i = 0; i < message.ops.length; ++i)
                                $root.replit.goval.api.DotReplitUpdateOp.encode(message.ops[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateRequest message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitUpdateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateRequest} message DotReplitUpdateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitUpdateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitUpdateRequest} DotReplitUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitUpdateRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.ops && message.ops.length))
                                    message.ops = [];
                                message.ops.push($root.replit.goval.api.DotReplitUpdateOp.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitUpdateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitUpdateRequest} DotReplitUpdateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitUpdateRequest message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitUpdateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.ops != null && message.hasOwnProperty("ops")) {
                            if (!Array.isArray(message.ops))
                                return "ops: array expected";
                            for (var i = 0; i < message.ops.length; ++i) {
                                var error = $root.replit.goval.api.DotReplitUpdateOp.verify(message.ops[i]);
                                if (error)
                                    return "ops." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitUpdateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitUpdateRequest} DotReplitUpdateRequest
                     */
                    DotReplitUpdateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitUpdateRequest)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitUpdateRequest();
                        if (object.ops) {
                            if (!Array.isArray(object.ops))
                                throw TypeError(".replit.goval.api.DotReplitUpdateRequest.ops: array expected");
                            message.ops = [];
                            for (var i = 0; i < object.ops.length; ++i) {
                                if (typeof object.ops[i] !== "object")
                                    throw TypeError(".replit.goval.api.DotReplitUpdateRequest.ops: object expected");
                                message.ops[i] = $root.replit.goval.api.DotReplitUpdateOp.fromObject(object.ops[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitUpdateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateRequest} message DotReplitUpdateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitUpdateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.ops = [];
                        if (message.ops && message.ops.length) {
                            object.ops = [];
                            for (var j = 0; j < message.ops.length; ++j)
                                object.ops[j] = $root.replit.goval.api.DotReplitUpdateOp.toObject(message.ops[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitUpdateRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitUpdateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitUpdateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitUpdateRequest;
                })();
    
                api.DotReplitUpdateResponse = (function() {
    
                    /**
                     * Properties of a DotReplitUpdateResponse.
                     * @memberof replit.goval.api
                     * @interface IDotReplitUpdateResponse
                     */
    
                    /**
                     * Constructs a new DotReplitUpdateResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitUpdateResponse.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitUpdateResponse=} [properties] Properties to set
                     */
                    function DotReplitUpdateResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new DotReplitUpdateResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {replit.goval.api.IDotReplitUpdateResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitUpdateResponse} DotReplitUpdateResponse instance
                     */
                    DotReplitUpdateResponse.create = function create(properties) {
                        return DotReplitUpdateResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateResponse message. Does not implicitly {@link replit.goval.api.DotReplitUpdateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateResponse} message DotReplitUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitUpdateResponse message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitUpdateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateResponse} message DotReplitUpdateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUpdateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitUpdateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitUpdateResponse} DotReplitUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitUpdateResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitUpdateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitUpdateResponse} DotReplitUpdateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUpdateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitUpdateResponse message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitUpdateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitUpdateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitUpdateResponse} DotReplitUpdateResponse
                     */
                    DotReplitUpdateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitUpdateResponse)
                            return object;
                        return new $root.replit.goval.api.DotReplitUpdateResponse();
                    };
    
                    /**
                     * Creates a plain object from a DotReplitUpdateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @static
                     * @param {replit.goval.api.DotReplitUpdateResponse} message DotReplitUpdateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitUpdateResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this DotReplitUpdateResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitUpdateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitUpdateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitUpdateResponse;
                })();
    
                api.DebugAddBreakpointRequest = (function() {
    
                    /**
                     * Properties of a DebugAddBreakpointRequest.
                     * @memberof replit.goval.api
                     * @interface IDebugAddBreakpointRequest
                     * @property {string|null} [path] DebugAddBreakpointRequest path
                     * @property {number|null} [otVersion] DebugAddBreakpointRequest otVersion
                     * @property {number|null} [otIndex] DebugAddBreakpointRequest otIndex
                     * @property {boolean|null} [sessionLocal] DebugAddBreakpointRequest sessionLocal
                     * @property {number|null} [line] DebugAddBreakpointRequest line
                     * @property {string|null} [logMessage] DebugAddBreakpointRequest logMessage
                     */
    
                    /**
                     * Constructs a new DebugAddBreakpointRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugAddBreakpointRequest.
                     * @constructor
                     * @param {replit.goval.api.IDebugAddBreakpointRequest=} [properties] Properties to set
                     */
                    function DebugAddBreakpointRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugAddBreakpointRequest path.
                     * @member {string} path
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.path = "";
    
                    /**
                     * DebugAddBreakpointRequest otVersion.
                     * @member {number} otVersion
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.otVersion = 0;
    
                    /**
                     * DebugAddBreakpointRequest otIndex.
                     * @member {number} otIndex
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.otIndex = 0;
    
                    /**
                     * DebugAddBreakpointRequest sessionLocal.
                     * @member {boolean} sessionLocal
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.sessionLocal = false;
    
                    /**
                     * DebugAddBreakpointRequest line.
                     * @member {number} line
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.line = 0;
    
                    /**
                     * DebugAddBreakpointRequest logMessage.
                     * @member {string} logMessage
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     */
                    DebugAddBreakpointRequest.prototype.logMessage = "";
    
                    /**
                     * Creates a new DebugAddBreakpointRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {replit.goval.api.IDebugAddBreakpointRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugAddBreakpointRequest} DebugAddBreakpointRequest instance
                     */
                    DebugAddBreakpointRequest.create = function create(properties) {
                        return DebugAddBreakpointRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugAddBreakpointRequest message. Does not implicitly {@link replit.goval.api.DebugAddBreakpointRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugAddBreakpointRequest} message DebugAddBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugAddBreakpointRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.otVersion != null && Object.hasOwnProperty.call(message, "otVersion"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.otVersion);
                        if (message.otIndex != null && Object.hasOwnProperty.call(message, "otIndex"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.otIndex);
                        if (message.line != null && Object.hasOwnProperty.call(message, "line"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.line);
                        if (message.logMessage != null && Object.hasOwnProperty.call(message, "logMessage"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.logMessage);
                        if (message.sessionLocal != null && Object.hasOwnProperty.call(message, "sessionLocal"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.sessionLocal);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugAddBreakpointRequest message, length delimited. Does not implicitly {@link replit.goval.api.DebugAddBreakpointRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugAddBreakpointRequest} message DebugAddBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugAddBreakpointRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugAddBreakpointRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugAddBreakpointRequest} DebugAddBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugAddBreakpointRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugAddBreakpointRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 2:
                                message.otVersion = reader.uint32();
                                break;
                            case 3:
                                message.otIndex = reader.uint32();
                                break;
                            case 6:
                                message.sessionLocal = reader.bool();
                                break;
                            case 4:
                                message.line = reader.int32();
                                break;
                            case 5:
                                message.logMessage = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugAddBreakpointRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugAddBreakpointRequest} DebugAddBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugAddBreakpointRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugAddBreakpointRequest message.
                     * @function verify
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugAddBreakpointRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.otVersion != null && message.hasOwnProperty("otVersion"))
                            if (!$util.isInteger(message.otVersion))
                                return "otVersion: integer expected";
                        if (message.otIndex != null && message.hasOwnProperty("otIndex"))
                            if (!$util.isInteger(message.otIndex))
                                return "otIndex: integer expected";
                        if (message.sessionLocal != null && message.hasOwnProperty("sessionLocal"))
                            if (typeof message.sessionLocal !== "boolean")
                                return "sessionLocal: boolean expected";
                        if (message.line != null && message.hasOwnProperty("line"))
                            if (!$util.isInteger(message.line))
                                return "line: integer expected";
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            if (!$util.isString(message.logMessage))
                                return "logMessage: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugAddBreakpointRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugAddBreakpointRequest} DebugAddBreakpointRequest
                     */
                    DebugAddBreakpointRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugAddBreakpointRequest)
                            return object;
                        var message = new $root.replit.goval.api.DebugAddBreakpointRequest();
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.otVersion != null)
                            message.otVersion = object.otVersion >>> 0;
                        if (object.otIndex != null)
                            message.otIndex = object.otIndex >>> 0;
                        if (object.sessionLocal != null)
                            message.sessionLocal = Boolean(object.sessionLocal);
                        if (object.line != null)
                            message.line = object.line | 0;
                        if (object.logMessage != null)
                            message.logMessage = String(object.logMessage);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugAddBreakpointRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugAddBreakpointRequest} message DebugAddBreakpointRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugAddBreakpointRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.path = "";
                            object.otVersion = 0;
                            object.otIndex = 0;
                            object.line = 0;
                            object.logMessage = "";
                            object.sessionLocal = false;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.otVersion != null && message.hasOwnProperty("otVersion"))
                            object.otVersion = message.otVersion;
                        if (message.otIndex != null && message.hasOwnProperty("otIndex"))
                            object.otIndex = message.otIndex;
                        if (message.line != null && message.hasOwnProperty("line"))
                            object.line = message.line;
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            object.logMessage = message.logMessage;
                        if (message.sessionLocal != null && message.hasOwnProperty("sessionLocal"))
                            object.sessionLocal = message.sessionLocal;
                        return object;
                    };
    
                    /**
                     * Converts this DebugAddBreakpointRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugAddBreakpointRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugAddBreakpointRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugAddBreakpointRequest;
                })();
    
                api.DebugUpdateBreakpointRequest = (function() {
    
                    /**
                     * Properties of a DebugUpdateBreakpointRequest.
                     * @memberof replit.goval.api
                     * @interface IDebugUpdateBreakpointRequest
                     * @property {string|null} [breakpointId] DebugUpdateBreakpointRequest breakpointId
                     * @property {string|null} [logMessage] DebugUpdateBreakpointRequest logMessage
                     */
    
                    /**
                     * Constructs a new DebugUpdateBreakpointRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugUpdateBreakpointRequest.
                     * @constructor
                     * @param {replit.goval.api.IDebugUpdateBreakpointRequest=} [properties] Properties to set
                     */
                    function DebugUpdateBreakpointRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugUpdateBreakpointRequest breakpointId.
                     * @member {string} breakpointId
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @instance
                     */
                    DebugUpdateBreakpointRequest.prototype.breakpointId = "";
    
                    /**
                     * DebugUpdateBreakpointRequest logMessage.
                     * @member {string} logMessage
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @instance
                     */
                    DebugUpdateBreakpointRequest.prototype.logMessage = "";
    
                    /**
                     * Creates a new DebugUpdateBreakpointRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {replit.goval.api.IDebugUpdateBreakpointRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugUpdateBreakpointRequest} DebugUpdateBreakpointRequest instance
                     */
                    DebugUpdateBreakpointRequest.create = function create(properties) {
                        return DebugUpdateBreakpointRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugUpdateBreakpointRequest message. Does not implicitly {@link replit.goval.api.DebugUpdateBreakpointRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugUpdateBreakpointRequest} message DebugUpdateBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugUpdateBreakpointRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.breakpointId != null && Object.hasOwnProperty.call(message, "breakpointId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.breakpointId);
                        if (message.logMessage != null && Object.hasOwnProperty.call(message, "logMessage"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.logMessage);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugUpdateBreakpointRequest message, length delimited. Does not implicitly {@link replit.goval.api.DebugUpdateBreakpointRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugUpdateBreakpointRequest} message DebugUpdateBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugUpdateBreakpointRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugUpdateBreakpointRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugUpdateBreakpointRequest} DebugUpdateBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugUpdateBreakpointRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugUpdateBreakpointRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.breakpointId = reader.string();
                                break;
                            case 2:
                                message.logMessage = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugUpdateBreakpointRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugUpdateBreakpointRequest} DebugUpdateBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugUpdateBreakpointRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugUpdateBreakpointRequest message.
                     * @function verify
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugUpdateBreakpointRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            if (!$util.isString(message.breakpointId))
                                return "breakpointId: string expected";
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            if (!$util.isString(message.logMessage))
                                return "logMessage: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugUpdateBreakpointRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugUpdateBreakpointRequest} DebugUpdateBreakpointRequest
                     */
                    DebugUpdateBreakpointRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugUpdateBreakpointRequest)
                            return object;
                        var message = new $root.replit.goval.api.DebugUpdateBreakpointRequest();
                        if (object.breakpointId != null)
                            message.breakpointId = String(object.breakpointId);
                        if (object.logMessage != null)
                            message.logMessage = String(object.logMessage);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugUpdateBreakpointRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugUpdateBreakpointRequest} message DebugUpdateBreakpointRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugUpdateBreakpointRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.breakpointId = "";
                            object.logMessage = "";
                        }
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            object.breakpointId = message.breakpointId;
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            object.logMessage = message.logMessage;
                        return object;
                    };
    
                    /**
                     * Converts this DebugUpdateBreakpointRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugUpdateBreakpointRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugUpdateBreakpointRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugUpdateBreakpointRequest;
                })();
    
                api.DebugRemoveBreakpointRequest = (function() {
    
                    /**
                     * Properties of a DebugRemoveBreakpointRequest.
                     * @memberof replit.goval.api
                     * @interface IDebugRemoveBreakpointRequest
                     * @property {string|null} [breakpointId] DebugRemoveBreakpointRequest breakpointId
                     */
    
                    /**
                     * Constructs a new DebugRemoveBreakpointRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugRemoveBreakpointRequest.
                     * @constructor
                     * @param {replit.goval.api.IDebugRemoveBreakpointRequest=} [properties] Properties to set
                     */
                    function DebugRemoveBreakpointRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugRemoveBreakpointRequest breakpointId.
                     * @member {string} breakpointId
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @instance
                     */
                    DebugRemoveBreakpointRequest.prototype.breakpointId = "";
    
                    /**
                     * Creates a new DebugRemoveBreakpointRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {replit.goval.api.IDebugRemoveBreakpointRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugRemoveBreakpointRequest} DebugRemoveBreakpointRequest instance
                     */
                    DebugRemoveBreakpointRequest.create = function create(properties) {
                        return DebugRemoveBreakpointRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugRemoveBreakpointRequest message. Does not implicitly {@link replit.goval.api.DebugRemoveBreakpointRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugRemoveBreakpointRequest} message DebugRemoveBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugRemoveBreakpointRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.breakpointId != null && Object.hasOwnProperty.call(message, "breakpointId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.breakpointId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugRemoveBreakpointRequest message, length delimited. Does not implicitly {@link replit.goval.api.DebugRemoveBreakpointRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugRemoveBreakpointRequest} message DebugRemoveBreakpointRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugRemoveBreakpointRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugRemoveBreakpointRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugRemoveBreakpointRequest} DebugRemoveBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugRemoveBreakpointRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugRemoveBreakpointRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                message.breakpointId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugRemoveBreakpointRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugRemoveBreakpointRequest} DebugRemoveBreakpointRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugRemoveBreakpointRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugRemoveBreakpointRequest message.
                     * @function verify
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugRemoveBreakpointRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            if (!$util.isString(message.breakpointId))
                                return "breakpointId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugRemoveBreakpointRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugRemoveBreakpointRequest} DebugRemoveBreakpointRequest
                     */
                    DebugRemoveBreakpointRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugRemoveBreakpointRequest)
                            return object;
                        var message = new $root.replit.goval.api.DebugRemoveBreakpointRequest();
                        if (object.breakpointId != null)
                            message.breakpointId = String(object.breakpointId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugRemoveBreakpointRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @static
                     * @param {replit.goval.api.DebugRemoveBreakpointRequest} message DebugRemoveBreakpointRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugRemoveBreakpointRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.breakpointId = "";
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            object.breakpointId = message.breakpointId;
                        return object;
                    };
    
                    /**
                     * Converts this DebugRemoveBreakpointRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugRemoveBreakpointRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugRemoveBreakpointRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugRemoveBreakpointRequest;
                })();
    
                api.DebugBreakpointEvent = (function() {
    
                    /**
                     * Properties of a DebugBreakpointEvent.
                     * @memberof replit.goval.api
                     * @interface IDebugBreakpointEvent
                     * @property {string|null} [path] DebugBreakpointEvent path
                     * @property {string|null} [absolutePath] DebugBreakpointEvent absolutePath
                     * @property {Array.<replit.goval.api.DebugBreakpoint|replit.goval.api.IDebugBreakpoint>|null} [breakpoints] DebugBreakpointEvent breakpoints
                     */
    
                    /**
                     * Constructs a new DebugBreakpointEvent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugBreakpointEvent.
                     * @constructor
                     * @param {replit.goval.api.IDebugBreakpointEvent=} [properties] Properties to set
                     */
                    function DebugBreakpointEvent(properties) {
                        this.breakpoints = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugBreakpointEvent path.
                     * @member {string} path
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @instance
                     */
                    DebugBreakpointEvent.prototype.path = "";
    
                    /**
                     * DebugBreakpointEvent absolutePath.
                     * @member {string} absolutePath
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @instance
                     */
                    DebugBreakpointEvent.prototype.absolutePath = "";
    
                    /**
                     * DebugBreakpointEvent breakpoints.
                     * @member {Array.<replit.goval.api.DebugBreakpoint>} breakpoints
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @instance
                     */
                    DebugBreakpointEvent.prototype.breakpoints = $util.emptyArray;
    
                    /**
                     * Creates a new DebugBreakpointEvent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {replit.goval.api.IDebugBreakpointEvent=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugBreakpointEvent} DebugBreakpointEvent instance
                     */
                    DebugBreakpointEvent.create = function create(properties) {
                        return DebugBreakpointEvent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugBreakpointEvent message. Does not implicitly {@link replit.goval.api.DebugBreakpointEvent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {replit.goval.api.DebugBreakpointEvent} message DebugBreakpointEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugBreakpointEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.breakpoints != null && message.breakpoints.length)
                            for (var i = 0; i < message.breakpoints.length; ++i)
                                $root.replit.goval.api.DebugBreakpoint.encode(message.breakpoints[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.absolutePath != null && Object.hasOwnProperty.call(message, "absolutePath"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.absolutePath);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugBreakpointEvent message, length delimited. Does not implicitly {@link replit.goval.api.DebugBreakpointEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {replit.goval.api.DebugBreakpointEvent} message DebugBreakpointEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugBreakpointEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugBreakpointEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugBreakpointEvent} DebugBreakpointEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugBreakpointEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugBreakpointEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 3:
                                message.absolutePath = reader.string();
                                break;
                            case 2:
                                if (!(message.breakpoints && message.breakpoints.length))
                                    message.breakpoints = [];
                                message.breakpoints.push($root.replit.goval.api.DebugBreakpoint.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugBreakpointEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugBreakpointEvent} DebugBreakpointEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugBreakpointEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugBreakpointEvent message.
                     * @function verify
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugBreakpointEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.absolutePath != null && message.hasOwnProperty("absolutePath"))
                            if (!$util.isString(message.absolutePath))
                                return "absolutePath: string expected";
                        if (message.breakpoints != null && message.hasOwnProperty("breakpoints")) {
                            if (!Array.isArray(message.breakpoints))
                                return "breakpoints: array expected";
                            for (var i = 0; i < message.breakpoints.length; ++i) {
                                var error = $root.replit.goval.api.DebugBreakpoint.verify(message.breakpoints[i]);
                                if (error)
                                    return "breakpoints." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebugBreakpointEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugBreakpointEvent} DebugBreakpointEvent
                     */
                    DebugBreakpointEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugBreakpointEvent)
                            return object;
                        var message = new $root.replit.goval.api.DebugBreakpointEvent();
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.absolutePath != null)
                            message.absolutePath = String(object.absolutePath);
                        if (object.breakpoints) {
                            if (!Array.isArray(object.breakpoints))
                                throw TypeError(".replit.goval.api.DebugBreakpointEvent.breakpoints: array expected");
                            message.breakpoints = [];
                            for (var i = 0; i < object.breakpoints.length; ++i) {
                                if (typeof object.breakpoints[i] !== "object")
                                    throw TypeError(".replit.goval.api.DebugBreakpointEvent.breakpoints: object expected");
                                message.breakpoints[i] = $root.replit.goval.api.DebugBreakpoint.fromObject(object.breakpoints[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugBreakpointEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @static
                     * @param {replit.goval.api.DebugBreakpointEvent} message DebugBreakpointEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugBreakpointEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.breakpoints = [];
                        if (options.defaults) {
                            object.path = "";
                            object.absolutePath = "";
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.breakpoints && message.breakpoints.length) {
                            object.breakpoints = [];
                            for (var j = 0; j < message.breakpoints.length; ++j)
                                object.breakpoints[j] = $root.replit.goval.api.DebugBreakpoint.toObject(message.breakpoints[j], options);
                        }
                        if (message.absolutePath != null && message.hasOwnProperty("absolutePath"))
                            object.absolutePath = message.absolutePath;
                        return object;
                    };
    
                    /**
                     * Converts this DebugBreakpointEvent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugBreakpointEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugBreakpointEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugBreakpointEvent;
                })();
    
                api.DebugBreakpoint = (function() {
    
                    /**
                     * Properties of a DebugBreakpoint.
                     * @memberof replit.goval.api
                     * @interface IDebugBreakpoint
                     * @property {string|null} [breakpointId] DebugBreakpoint breakpointId
                     * @property {number|null} [line] DebugBreakpoint line
                     * @property {number|null} [otVersion] DebugBreakpoint otVersion
                     * @property {number|null} [otIndex] DebugBreakpoint otIndex
                     * @property {boolean|null} [sessionLocal] DebugBreakpoint sessionLocal
                     * @property {string|null} [logMessage] DebugBreakpoint logMessage
                     */
    
                    /**
                     * Constructs a new DebugBreakpoint.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebugBreakpoint.
                     * @constructor
                     * @param {replit.goval.api.IDebugBreakpoint=} [properties] Properties to set
                     */
                    function DebugBreakpoint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebugBreakpoint breakpointId.
                     * @member {string} breakpointId
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.breakpointId = "";
    
                    /**
                     * DebugBreakpoint line.
                     * @member {number} line
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.line = 0;
    
                    /**
                     * DebugBreakpoint otVersion.
                     * @member {number} otVersion
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.otVersion = 0;
    
                    /**
                     * DebugBreakpoint otIndex.
                     * @member {number} otIndex
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.otIndex = 0;
    
                    /**
                     * DebugBreakpoint sessionLocal.
                     * @member {boolean} sessionLocal
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.sessionLocal = false;
    
                    /**
                     * DebugBreakpoint logMessage.
                     * @member {string} logMessage
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     */
                    DebugBreakpoint.prototype.logMessage = "";
    
                    /**
                     * Creates a new DebugBreakpoint instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {replit.goval.api.IDebugBreakpoint=} [properties] Properties to set
                     * @returns {replit.goval.api.DebugBreakpoint} DebugBreakpoint instance
                     */
                    DebugBreakpoint.create = function create(properties) {
                        return DebugBreakpoint.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebugBreakpoint message. Does not implicitly {@link replit.goval.api.DebugBreakpoint.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {replit.goval.api.DebugBreakpoint} message DebugBreakpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugBreakpoint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.breakpointId != null && Object.hasOwnProperty.call(message, "breakpointId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.breakpointId);
                        if (message.line != null && Object.hasOwnProperty.call(message, "line"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.line);
                        if (message.otVersion != null && Object.hasOwnProperty.call(message, "otVersion"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.otVersion);
                        if (message.otIndex != null && Object.hasOwnProperty.call(message, "otIndex"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.otIndex);
                        if (message.logMessage != null && Object.hasOwnProperty.call(message, "logMessage"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.logMessage);
                        if (message.sessionLocal != null && Object.hasOwnProperty.call(message, "sessionLocal"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.sessionLocal);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebugBreakpoint message, length delimited. Does not implicitly {@link replit.goval.api.DebugBreakpoint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {replit.goval.api.DebugBreakpoint} message DebugBreakpoint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebugBreakpoint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebugBreakpoint message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebugBreakpoint} DebugBreakpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugBreakpoint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebugBreakpoint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.breakpointId = reader.string();
                                break;
                            case 2:
                                message.line = reader.int32();
                                break;
                            case 3:
                                message.otVersion = reader.uint32();
                                break;
                            case 4:
                                message.otIndex = reader.uint32();
                                break;
                            case 6:
                                message.sessionLocal = reader.bool();
                                break;
                            case 5:
                                message.logMessage = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebugBreakpoint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebugBreakpoint} DebugBreakpoint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebugBreakpoint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebugBreakpoint message.
                     * @function verify
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebugBreakpoint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            if (!$util.isString(message.breakpointId))
                                return "breakpointId: string expected";
                        if (message.line != null && message.hasOwnProperty("line"))
                            if (!$util.isInteger(message.line))
                                return "line: integer expected";
                        if (message.otVersion != null && message.hasOwnProperty("otVersion"))
                            if (!$util.isInteger(message.otVersion))
                                return "otVersion: integer expected";
                        if (message.otIndex != null && message.hasOwnProperty("otIndex"))
                            if (!$util.isInteger(message.otIndex))
                                return "otIndex: integer expected";
                        if (message.sessionLocal != null && message.hasOwnProperty("sessionLocal"))
                            if (typeof message.sessionLocal !== "boolean")
                                return "sessionLocal: boolean expected";
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            if (!$util.isString(message.logMessage))
                                return "logMessage: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DebugBreakpoint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebugBreakpoint} DebugBreakpoint
                     */
                    DebugBreakpoint.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebugBreakpoint)
                            return object;
                        var message = new $root.replit.goval.api.DebugBreakpoint();
                        if (object.breakpointId != null)
                            message.breakpointId = String(object.breakpointId);
                        if (object.line != null)
                            message.line = object.line | 0;
                        if (object.otVersion != null)
                            message.otVersion = object.otVersion >>> 0;
                        if (object.otIndex != null)
                            message.otIndex = object.otIndex >>> 0;
                        if (object.sessionLocal != null)
                            message.sessionLocal = Boolean(object.sessionLocal);
                        if (object.logMessage != null)
                            message.logMessage = String(object.logMessage);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebugBreakpoint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @static
                     * @param {replit.goval.api.DebugBreakpoint} message DebugBreakpoint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebugBreakpoint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.breakpointId = "";
                            object.line = 0;
                            object.otVersion = 0;
                            object.otIndex = 0;
                            object.logMessage = "";
                            object.sessionLocal = false;
                        }
                        if (message.breakpointId != null && message.hasOwnProperty("breakpointId"))
                            object.breakpointId = message.breakpointId;
                        if (message.line != null && message.hasOwnProperty("line"))
                            object.line = message.line;
                        if (message.otVersion != null && message.hasOwnProperty("otVersion"))
                            object.otVersion = message.otVersion;
                        if (message.otIndex != null && message.hasOwnProperty("otIndex"))
                            object.otIndex = message.otIndex;
                        if (message.logMessage != null && message.hasOwnProperty("logMessage"))
                            object.logMessage = message.logMessage;
                        if (message.sessionLocal != null && message.hasOwnProperty("sessionLocal"))
                            object.sessionLocal = message.sessionLocal;
                        return object;
                    };
    
                    /**
                     * Converts this DebugBreakpoint to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebugBreakpoint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebugBreakpoint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebugBreakpoint;
                })();
    
                api.DotReplit = (function() {
    
                    /**
                     * Properties of a DotReplit.
                     * @memberof replit.goval.api
                     * @interface IDotReplit
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [run] DotReplit run
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [compile] DotReplit compile
                     * @property {replit.goval.api.DebuggerConfig|replit.goval.api.IDebuggerConfig|null} ["debugger"] DotReplit debugger
                     * @property {string|null} [language] DotReplit language
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [onBoot] DotReplit onBoot
                     * @property {replit.goval.api.DotReplitPackager|replit.goval.api.IDotReplitPackager|null} [packager] DotReplit packager
                     * @property {replit.goval.api.DotReplitInterp|replit.goval.api.IDotReplitInterp|null} [interpreter] DotReplit interpreter
                     * @property {string|null} [entrypoint] DotReplit entrypoint
                     * @property {Object.<string,replit.goval.api.DotReplitLanguage|replit.goval.api.IDotReplitLanguage>|null} [languages] DotReplit languages
                     * @property {replit.goval.api.DotReplitUnitTest|replit.goval.api.IDotReplitUnitTest|null} [unitTest] DotReplit unitTest
                     * @property {Array.<string>|null} [hidden] DotReplit hidden
                     * @property {replit.goval.api.NixConfig|replit.goval.api.INixConfig|null} [nix] DotReplit nix
                     * @property {boolean|null} [audio] DotReplit audio
                     * @property {replit.goval.api.HostingConfig|replit.goval.api.IHostingConfig|null} [hosting] DotReplit hosting
                     * @property {Object.<string,string>|null} [env] DotReplit env
                     * @property {replit.goval.api.GitHubImportConfig|replit.goval.api.IGitHubImportConfig|null} [gitHubImport] DotReplit gitHubImport
                     * @property {replit.goval.api.AuthConfig|replit.goval.api.IAuthConfig|null} [auth] DotReplit auth
                     * @property {Array.<replit.goval.api.DotReplitHint|replit.goval.api.IDotReplitHint>|null} [hintsList] DotReplit hintsList
                     * @property {Array.<replit.goval.api.DotReplitPort|replit.goval.api.IDotReplitPort>|null} [ports] DotReplit ports
                     * @property {Array.<replit.goval.api.DotReplitEnvVar|replit.goval.api.IDotReplitEnvVar>|null} [orderedEnv] DotReplit orderedEnv
                     * @property {Array.<string>|null} [refreshWebViewOnFileChange] DotReplit refreshWebViewOnFileChange
                     * @property {replit.goval.api.DeploymentConfig|replit.goval.api.IDeploymentConfig|null} [deployment] DotReplit deployment
                     */
    
                    /**
                     * Constructs a new DotReplit.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplit.
                     * @constructor
                     * @param {replit.goval.api.IDotReplit=} [properties] Properties to set
                     */
                    function DotReplit(properties) {
                        this.languages = {};
                        this.hidden = [];
                        this.env = {};
                        this.hintsList = [];
                        this.ports = [];
                        this.orderedEnv = [];
                        this.refreshWebViewOnFileChange = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplit run.
                     * @member {replit.goval.api.Exec|null|undefined} run
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.run = null;
    
                    /**
                     * DotReplit compile.
                     * @member {replit.goval.api.Exec|null|undefined} compile
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.compile = null;
    
                    /**
                     * DotReplit debugger.
                     * @member {replit.goval.api.DebuggerConfig|null|undefined} debugger
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype["debugger"] = null;
    
                    /**
                     * DotReplit language.
                     * @member {string} language
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.language = "";
    
                    /**
                     * DotReplit onBoot.
                     * @member {replit.goval.api.Exec|null|undefined} onBoot
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.onBoot = null;
    
                    /**
                     * DotReplit packager.
                     * @member {replit.goval.api.DotReplitPackager|null|undefined} packager
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.packager = null;
    
                    /**
                     * DotReplit interpreter.
                     * @member {replit.goval.api.DotReplitInterp|null|undefined} interpreter
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.interpreter = null;
    
                    /**
                     * DotReplit entrypoint.
                     * @member {string} entrypoint
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.entrypoint = "";
    
                    /**
                     * DotReplit languages.
                     * @member {Object.<string,replit.goval.api.DotReplitLanguage>} languages
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.languages = $util.emptyObject;
    
                    /**
                     * DotReplit unitTest.
                     * @member {replit.goval.api.DotReplitUnitTest|null|undefined} unitTest
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.unitTest = null;
    
                    /**
                     * DotReplit hidden.
                     * @member {Array.<string>} hidden
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.hidden = $util.emptyArray;
    
                    /**
                     * DotReplit nix.
                     * @member {replit.goval.api.NixConfig|null|undefined} nix
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.nix = null;
    
                    /**
                     * DotReplit audio.
                     * @member {boolean} audio
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.audio = false;
    
                    /**
                     * DotReplit hosting.
                     * @member {replit.goval.api.HostingConfig|null|undefined} hosting
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.hosting = null;
    
                    /**
                     * DotReplit env.
                     * @member {Object.<string,string>} env
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.env = $util.emptyObject;
    
                    /**
                     * DotReplit gitHubImport.
                     * @member {replit.goval.api.GitHubImportConfig|null|undefined} gitHubImport
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.gitHubImport = null;
    
                    /**
                     * DotReplit auth.
                     * @member {replit.goval.api.AuthConfig|null|undefined} auth
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.auth = null;
    
                    /**
                     * DotReplit hintsList.
                     * @member {Array.<replit.goval.api.DotReplitHint>} hintsList
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.hintsList = $util.emptyArray;
    
                    /**
                     * DotReplit ports.
                     * @member {Array.<replit.goval.api.DotReplitPort>} ports
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.ports = $util.emptyArray;
    
                    /**
                     * DotReplit orderedEnv.
                     * @member {Array.<replit.goval.api.DotReplitEnvVar>} orderedEnv
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.orderedEnv = $util.emptyArray;
    
                    /**
                     * DotReplit refreshWebViewOnFileChange.
                     * @member {Array.<string>} refreshWebViewOnFileChange
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.refreshWebViewOnFileChange = $util.emptyArray;
    
                    /**
                     * DotReplit deployment.
                     * @member {replit.goval.api.DeploymentConfig|null|undefined} deployment
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     */
                    DotReplit.prototype.deployment = null;
    
                    /**
                     * Creates a new DotReplit instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {replit.goval.api.IDotReplit=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplit} DotReplit instance
                     */
                    DotReplit.create = function create(properties) {
                        return DotReplit.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplit message. Does not implicitly {@link replit.goval.api.DotReplit.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {replit.goval.api.DotReplit} message DotReplit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.run != null && Object.hasOwnProperty.call(message, "run"))
                            $root.replit.goval.api.Exec.encode(message.run, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.compile != null && Object.hasOwnProperty.call(message, "compile"))
                            $root.replit.goval.api.Exec.encode(message.compile, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message["debugger"] != null && Object.hasOwnProperty.call(message, "debugger"))
                            $root.replit.goval.api.DebuggerConfig.encode(message["debugger"], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);
                        if (message.onBoot != null && Object.hasOwnProperty.call(message, "onBoot"))
                            $root.replit.goval.api.Exec.encode(message.onBoot, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.packager != null && Object.hasOwnProperty.call(message, "packager"))
                            $root.replit.goval.api.DotReplitPackager.encode(message.packager, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.interpreter != null && Object.hasOwnProperty.call(message, "interpreter"))
                            $root.replit.goval.api.DotReplitInterp.encode(message.interpreter, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.entrypoint != null && Object.hasOwnProperty.call(message, "entrypoint"))
                            writer.uint32(/* id 8, wireType 2 =*/66).string(message.entrypoint);
                        if (message.languages != null && Object.hasOwnProperty.call(message, "languages"))
                            for (var keys = Object.keys(message.languages), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.replit.goval.api.DotReplitLanguage.encode(message.languages[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.unitTest != null && Object.hasOwnProperty.call(message, "unitTest"))
                            $root.replit.goval.api.DotReplitUnitTest.encode(message.unitTest, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.hidden != null && message.hidden.length)
                            for (var i = 0; i < message.hidden.length; ++i)
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.hidden[i]);
                        if (message.nix != null && Object.hasOwnProperty.call(message, "nix"))
                            $root.replit.goval.api.NixConfig.encode(message.nix, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                        if (message.audio != null && Object.hasOwnProperty.call(message, "audio"))
                            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.audio);
                        if (message.hosting != null && Object.hasOwnProperty.call(message, "hosting"))
                            $root.replit.goval.api.HostingConfig.encode(message.hosting, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.env != null && Object.hasOwnProperty.call(message, "env"))
                            for (var keys = Object.keys(message.env), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 15, wireType 2 =*/122).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.env[keys[i]]).ldelim();
                        if (message.gitHubImport != null && Object.hasOwnProperty.call(message, "gitHubImport"))
                            $root.replit.goval.api.GitHubImportConfig.encode(message.gitHubImport, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                        if (message.auth != null && Object.hasOwnProperty.call(message, "auth"))
                            $root.replit.goval.api.AuthConfig.encode(message.auth, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.hintsList != null && message.hintsList.length)
                            for (var i = 0; i < message.hintsList.length; ++i)
                                $root.replit.goval.api.DotReplitHint.encode(message.hintsList[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                        if (message.ports != null && message.ports.length)
                            for (var i = 0; i < message.ports.length; ++i)
                                $root.replit.goval.api.DotReplitPort.encode(message.ports[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                        if (message.orderedEnv != null && message.orderedEnv.length)
                            for (var i = 0; i < message.orderedEnv.length; ++i)
                                $root.replit.goval.api.DotReplitEnvVar.encode(message.orderedEnv[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                        if (message.refreshWebViewOnFileChange != null && message.refreshWebViewOnFileChange.length)
                            for (var i = 0; i < message.refreshWebViewOnFileChange.length; ++i)
                                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refreshWebViewOnFileChange[i]);
                        if (message.deployment != null && Object.hasOwnProperty.call(message, "deployment"))
                            $root.replit.goval.api.DeploymentConfig.encode(message.deployment, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplit message, length delimited. Does not implicitly {@link replit.goval.api.DotReplit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {replit.goval.api.DotReplit} message DotReplit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplit message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplit} DotReplit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplit(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.run = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.compile = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message["debugger"] = $root.replit.goval.api.DebuggerConfig.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.language = reader.string();
                                break;
                            case 5:
                                message.onBoot = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.packager = $root.replit.goval.api.DotReplitPackager.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.interpreter = $root.replit.goval.api.DotReplitInterp.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.entrypoint = reader.string();
                                break;
                            case 9:
                                if (message.languages === $util.emptyObject)
                                    message.languages = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.replit.goval.api.DotReplitLanguage.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.languages[key] = value;
                                break;
                            case 10:
                                message.unitTest = $root.replit.goval.api.DotReplitUnitTest.decode(reader, reader.uint32());
                                break;
                            case 11:
                                if (!(message.hidden && message.hidden.length))
                                    message.hidden = [];
                                message.hidden.push(reader.string());
                                break;
                            case 12:
                                message.nix = $root.replit.goval.api.NixConfig.decode(reader, reader.uint32());
                                break;
                            case 13:
                                message.audio = reader.bool();
                                break;
                            case 14:
                                message.hosting = $root.replit.goval.api.HostingConfig.decode(reader, reader.uint32());
                                break;
                            case 15:
                                if (message.env === $util.emptyObject)
                                    message.env = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.env[key] = value;
                                break;
                            case 16:
                                message.gitHubImport = $root.replit.goval.api.GitHubImportConfig.decode(reader, reader.uint32());
                                break;
                            case 17:
                                message.auth = $root.replit.goval.api.AuthConfig.decode(reader, reader.uint32());
                                break;
                            case 18:
                                if (!(message.hintsList && message.hintsList.length))
                                    message.hintsList = [];
                                message.hintsList.push($root.replit.goval.api.DotReplitHint.decode(reader, reader.uint32()));
                                break;
                            case 19:
                                if (!(message.ports && message.ports.length))
                                    message.ports = [];
                                message.ports.push($root.replit.goval.api.DotReplitPort.decode(reader, reader.uint32()));
                                break;
                            case 20:
                                if (!(message.orderedEnv && message.orderedEnv.length))
                                    message.orderedEnv = [];
                                message.orderedEnv.push($root.replit.goval.api.DotReplitEnvVar.decode(reader, reader.uint32()));
                                break;
                            case 21:
                                if (!(message.refreshWebViewOnFileChange && message.refreshWebViewOnFileChange.length))
                                    message.refreshWebViewOnFileChange = [];
                                message.refreshWebViewOnFileChange.push(reader.string());
                                break;
                            case 22:
                                message.deployment = $root.replit.goval.api.DeploymentConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplit} DotReplit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplit message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.run != null && message.hasOwnProperty("run")) {
                            var error = $root.replit.goval.api.Exec.verify(message.run);
                            if (error)
                                return "run." + error;
                        }
                        if (message.compile != null && message.hasOwnProperty("compile")) {
                            var error = $root.replit.goval.api.Exec.verify(message.compile);
                            if (error)
                                return "compile." + error;
                        }
                        if (message["debugger"] != null && message.hasOwnProperty("debugger")) {
                            var error = $root.replit.goval.api.DebuggerConfig.verify(message["debugger"]);
                            if (error)
                                return "debugger." + error;
                        }
                        if (message.language != null && message.hasOwnProperty("language"))
                            if (!$util.isString(message.language))
                                return "language: string expected";
                        if (message.onBoot != null && message.hasOwnProperty("onBoot")) {
                            var error = $root.replit.goval.api.Exec.verify(message.onBoot);
                            if (error)
                                return "onBoot." + error;
                        }
                        if (message.packager != null && message.hasOwnProperty("packager")) {
                            var error = $root.replit.goval.api.DotReplitPackager.verify(message.packager);
                            if (error)
                                return "packager." + error;
                        }
                        if (message.interpreter != null && message.hasOwnProperty("interpreter")) {
                            var error = $root.replit.goval.api.DotReplitInterp.verify(message.interpreter);
                            if (error)
                                return "interpreter." + error;
                        }
                        if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                            if (!$util.isString(message.entrypoint))
                                return "entrypoint: string expected";
                        if (message.languages != null && message.hasOwnProperty("languages")) {
                            if (!$util.isObject(message.languages))
                                return "languages: object expected";
                            var key = Object.keys(message.languages);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.replit.goval.api.DotReplitLanguage.verify(message.languages[key[i]]);
                                if (error)
                                    return "languages." + error;
                            }
                        }
                        if (message.unitTest != null && message.hasOwnProperty("unitTest")) {
                            var error = $root.replit.goval.api.DotReplitUnitTest.verify(message.unitTest);
                            if (error)
                                return "unitTest." + error;
                        }
                        if (message.hidden != null && message.hasOwnProperty("hidden")) {
                            if (!Array.isArray(message.hidden))
                                return "hidden: array expected";
                            for (var i = 0; i < message.hidden.length; ++i)
                                if (!$util.isString(message.hidden[i]))
                                    return "hidden: string[] expected";
                        }
                        if (message.nix != null && message.hasOwnProperty("nix")) {
                            var error = $root.replit.goval.api.NixConfig.verify(message.nix);
                            if (error)
                                return "nix." + error;
                        }
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            if (typeof message.audio !== "boolean")
                                return "audio: boolean expected";
                        if (message.hosting != null && message.hasOwnProperty("hosting")) {
                            var error = $root.replit.goval.api.HostingConfig.verify(message.hosting);
                            if (error)
                                return "hosting." + error;
                        }
                        if (message.env != null && message.hasOwnProperty("env")) {
                            if (!$util.isObject(message.env))
                                return "env: object expected";
                            var key = Object.keys(message.env);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.env[key[i]]))
                                    return "env: string{k:string} expected";
                        }
                        if (message.gitHubImport != null && message.hasOwnProperty("gitHubImport")) {
                            var error = $root.replit.goval.api.GitHubImportConfig.verify(message.gitHubImport);
                            if (error)
                                return "gitHubImport." + error;
                        }
                        if (message.auth != null && message.hasOwnProperty("auth")) {
                            var error = $root.replit.goval.api.AuthConfig.verify(message.auth);
                            if (error)
                                return "auth." + error;
                        }
                        if (message.hintsList != null && message.hasOwnProperty("hintsList")) {
                            if (!Array.isArray(message.hintsList))
                                return "hintsList: array expected";
                            for (var i = 0; i < message.hintsList.length; ++i) {
                                var error = $root.replit.goval.api.DotReplitHint.verify(message.hintsList[i]);
                                if (error)
                                    return "hintsList." + error;
                            }
                        }
                        if (message.ports != null && message.hasOwnProperty("ports")) {
                            if (!Array.isArray(message.ports))
                                return "ports: array expected";
                            for (var i = 0; i < message.ports.length; ++i) {
                                var error = $root.replit.goval.api.DotReplitPort.verify(message.ports[i]);
                                if (error)
                                    return "ports." + error;
                            }
                        }
                        if (message.orderedEnv != null && message.hasOwnProperty("orderedEnv")) {
                            if (!Array.isArray(message.orderedEnv))
                                return "orderedEnv: array expected";
                            for (var i = 0; i < message.orderedEnv.length; ++i) {
                                var error = $root.replit.goval.api.DotReplitEnvVar.verify(message.orderedEnv[i]);
                                if (error)
                                    return "orderedEnv." + error;
                            }
                        }
                        if (message.refreshWebViewOnFileChange != null && message.hasOwnProperty("refreshWebViewOnFileChange")) {
                            if (!Array.isArray(message.refreshWebViewOnFileChange))
                                return "refreshWebViewOnFileChange: array expected";
                            for (var i = 0; i < message.refreshWebViewOnFileChange.length; ++i)
                                if (!$util.isString(message.refreshWebViewOnFileChange[i]))
                                    return "refreshWebViewOnFileChange: string[] expected";
                        }
                        if (message.deployment != null && message.hasOwnProperty("deployment")) {
                            var error = $root.replit.goval.api.DeploymentConfig.verify(message.deployment);
                            if (error)
                                return "deployment." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DotReplit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplit} DotReplit
                     */
                    DotReplit.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplit)
                            return object;
                        var message = new $root.replit.goval.api.DotReplit();
                        if (object.run != null) {
                            if (typeof object.run !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.run: object expected");
                            message.run = $root.replit.goval.api.Exec.fromObject(object.run);
                        }
                        if (object.compile != null) {
                            if (typeof object.compile !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.compile: object expected");
                            message.compile = $root.replit.goval.api.Exec.fromObject(object.compile);
                        }
                        if (object["debugger"] != null) {
                            if (typeof object["debugger"] !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.debugger: object expected");
                            message["debugger"] = $root.replit.goval.api.DebuggerConfig.fromObject(object["debugger"]);
                        }
                        if (object.language != null)
                            message.language = String(object.language);
                        if (object.onBoot != null) {
                            if (typeof object.onBoot !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.onBoot: object expected");
                            message.onBoot = $root.replit.goval.api.Exec.fromObject(object.onBoot);
                        }
                        if (object.packager != null) {
                            if (typeof object.packager !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.packager: object expected");
                            message.packager = $root.replit.goval.api.DotReplitPackager.fromObject(object.packager);
                        }
                        if (object.interpreter != null) {
                            if (typeof object.interpreter !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.interpreter: object expected");
                            message.interpreter = $root.replit.goval.api.DotReplitInterp.fromObject(object.interpreter);
                        }
                        if (object.entrypoint != null)
                            message.entrypoint = String(object.entrypoint);
                        if (object.languages) {
                            if (typeof object.languages !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.languages: object expected");
                            message.languages = {};
                            for (var keys = Object.keys(object.languages), i = 0; i < keys.length; ++i) {
                                if (typeof object.languages[keys[i]] !== "object")
                                    throw TypeError(".replit.goval.api.DotReplit.languages: object expected");
                                message.languages[keys[i]] = $root.replit.goval.api.DotReplitLanguage.fromObject(object.languages[keys[i]]);
                            }
                        }
                        if (object.unitTest != null) {
                            if (typeof object.unitTest !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.unitTest: object expected");
                            message.unitTest = $root.replit.goval.api.DotReplitUnitTest.fromObject(object.unitTest);
                        }
                        if (object.hidden) {
                            if (!Array.isArray(object.hidden))
                                throw TypeError(".replit.goval.api.DotReplit.hidden: array expected");
                            message.hidden = [];
                            for (var i = 0; i < object.hidden.length; ++i)
                                message.hidden[i] = String(object.hidden[i]);
                        }
                        if (object.nix != null) {
                            if (typeof object.nix !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.nix: object expected");
                            message.nix = $root.replit.goval.api.NixConfig.fromObject(object.nix);
                        }
                        if (object.audio != null)
                            message.audio = Boolean(object.audio);
                        if (object.hosting != null) {
                            if (typeof object.hosting !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.hosting: object expected");
                            message.hosting = $root.replit.goval.api.HostingConfig.fromObject(object.hosting);
                        }
                        if (object.env) {
                            if (typeof object.env !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.env: object expected");
                            message.env = {};
                            for (var keys = Object.keys(object.env), i = 0; i < keys.length; ++i)
                                message.env[keys[i]] = String(object.env[keys[i]]);
                        }
                        if (object.gitHubImport != null) {
                            if (typeof object.gitHubImport !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.gitHubImport: object expected");
                            message.gitHubImport = $root.replit.goval.api.GitHubImportConfig.fromObject(object.gitHubImport);
                        }
                        if (object.auth != null) {
                            if (typeof object.auth !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.auth: object expected");
                            message.auth = $root.replit.goval.api.AuthConfig.fromObject(object.auth);
                        }
                        if (object.hintsList) {
                            if (!Array.isArray(object.hintsList))
                                throw TypeError(".replit.goval.api.DotReplit.hintsList: array expected");
                            message.hintsList = [];
                            for (var i = 0; i < object.hintsList.length; ++i) {
                                if (typeof object.hintsList[i] !== "object")
                                    throw TypeError(".replit.goval.api.DotReplit.hintsList: object expected");
                                message.hintsList[i] = $root.replit.goval.api.DotReplitHint.fromObject(object.hintsList[i]);
                            }
                        }
                        if (object.ports) {
                            if (!Array.isArray(object.ports))
                                throw TypeError(".replit.goval.api.DotReplit.ports: array expected");
                            message.ports = [];
                            for (var i = 0; i < object.ports.length; ++i) {
                                if (typeof object.ports[i] !== "object")
                                    throw TypeError(".replit.goval.api.DotReplit.ports: object expected");
                                message.ports[i] = $root.replit.goval.api.DotReplitPort.fromObject(object.ports[i]);
                            }
                        }
                        if (object.orderedEnv) {
                            if (!Array.isArray(object.orderedEnv))
                                throw TypeError(".replit.goval.api.DotReplit.orderedEnv: array expected");
                            message.orderedEnv = [];
                            for (var i = 0; i < object.orderedEnv.length; ++i) {
                                if (typeof object.orderedEnv[i] !== "object")
                                    throw TypeError(".replit.goval.api.DotReplit.orderedEnv: object expected");
                                message.orderedEnv[i] = $root.replit.goval.api.DotReplitEnvVar.fromObject(object.orderedEnv[i]);
                            }
                        }
                        if (object.refreshWebViewOnFileChange) {
                            if (!Array.isArray(object.refreshWebViewOnFileChange))
                                throw TypeError(".replit.goval.api.DotReplit.refreshWebViewOnFileChange: array expected");
                            message.refreshWebViewOnFileChange = [];
                            for (var i = 0; i < object.refreshWebViewOnFileChange.length; ++i)
                                message.refreshWebViewOnFileChange[i] = String(object.refreshWebViewOnFileChange[i]);
                        }
                        if (object.deployment != null) {
                            if (typeof object.deployment !== "object")
                                throw TypeError(".replit.goval.api.DotReplit.deployment: object expected");
                            message.deployment = $root.replit.goval.api.DeploymentConfig.fromObject(object.deployment);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplit
                     * @static
                     * @param {replit.goval.api.DotReplit} message DotReplit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.hidden = [];
                            object.hintsList = [];
                            object.ports = [];
                            object.orderedEnv = [];
                            object.refreshWebViewOnFileChange = [];
                        }
                        if (options.objects || options.defaults) {
                            object.languages = {};
                            object.env = {};
                        }
                        if (options.defaults) {
                            object.run = null;
                            object.compile = null;
                            object["debugger"] = null;
                            object.language = "";
                            object.onBoot = null;
                            object.packager = null;
                            object.interpreter = null;
                            object.entrypoint = "";
                            object.unitTest = null;
                            object.nix = null;
                            object.audio = false;
                            object.hosting = null;
                            object.gitHubImport = null;
                            object.auth = null;
                            object.deployment = null;
                        }
                        if (message.run != null && message.hasOwnProperty("run"))
                            object.run = $root.replit.goval.api.Exec.toObject(message.run, options);
                        if (message.compile != null && message.hasOwnProperty("compile"))
                            object.compile = $root.replit.goval.api.Exec.toObject(message.compile, options);
                        if (message["debugger"] != null && message.hasOwnProperty("debugger"))
                            object["debugger"] = $root.replit.goval.api.DebuggerConfig.toObject(message["debugger"], options);
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = message.language;
                        if (message.onBoot != null && message.hasOwnProperty("onBoot"))
                            object.onBoot = $root.replit.goval.api.Exec.toObject(message.onBoot, options);
                        if (message.packager != null && message.hasOwnProperty("packager"))
                            object.packager = $root.replit.goval.api.DotReplitPackager.toObject(message.packager, options);
                        if (message.interpreter != null && message.hasOwnProperty("interpreter"))
                            object.interpreter = $root.replit.goval.api.DotReplitInterp.toObject(message.interpreter, options);
                        if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                            object.entrypoint = message.entrypoint;
                        var keys2;
                        if (message.languages && (keys2 = Object.keys(message.languages)).length) {
                            object.languages = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.languages[keys2[j]] = $root.replit.goval.api.DotReplitLanguage.toObject(message.languages[keys2[j]], options);
                        }
                        if (message.unitTest != null && message.hasOwnProperty("unitTest"))
                            object.unitTest = $root.replit.goval.api.DotReplitUnitTest.toObject(message.unitTest, options);
                        if (message.hidden && message.hidden.length) {
                            object.hidden = [];
                            for (var j = 0; j < message.hidden.length; ++j)
                                object.hidden[j] = message.hidden[j];
                        }
                        if (message.nix != null && message.hasOwnProperty("nix"))
                            object.nix = $root.replit.goval.api.NixConfig.toObject(message.nix, options);
                        if (message.audio != null && message.hasOwnProperty("audio"))
                            object.audio = message.audio;
                        if (message.hosting != null && message.hasOwnProperty("hosting"))
                            object.hosting = $root.replit.goval.api.HostingConfig.toObject(message.hosting, options);
                        if (message.env && (keys2 = Object.keys(message.env)).length) {
                            object.env = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.env[keys2[j]] = message.env[keys2[j]];
                        }
                        if (message.gitHubImport != null && message.hasOwnProperty("gitHubImport"))
                            object.gitHubImport = $root.replit.goval.api.GitHubImportConfig.toObject(message.gitHubImport, options);
                        if (message.auth != null && message.hasOwnProperty("auth"))
                            object.auth = $root.replit.goval.api.AuthConfig.toObject(message.auth, options);
                        if (message.hintsList && message.hintsList.length) {
                            object.hintsList = [];
                            for (var j = 0; j < message.hintsList.length; ++j)
                                object.hintsList[j] = $root.replit.goval.api.DotReplitHint.toObject(message.hintsList[j], options);
                        }
                        if (message.ports && message.ports.length) {
                            object.ports = [];
                            for (var j = 0; j < message.ports.length; ++j)
                                object.ports[j] = $root.replit.goval.api.DotReplitPort.toObject(message.ports[j], options);
                        }
                        if (message.orderedEnv && message.orderedEnv.length) {
                            object.orderedEnv = [];
                            for (var j = 0; j < message.orderedEnv.length; ++j)
                                object.orderedEnv[j] = $root.replit.goval.api.DotReplitEnvVar.toObject(message.orderedEnv[j], options);
                        }
                        if (message.refreshWebViewOnFileChange && message.refreshWebViewOnFileChange.length) {
                            object.refreshWebViewOnFileChange = [];
                            for (var j = 0; j < message.refreshWebViewOnFileChange.length; ++j)
                                object.refreshWebViewOnFileChange[j] = message.refreshWebViewOnFileChange[j];
                        }
                        if (message.deployment != null && message.hasOwnProperty("deployment"))
                            object.deployment = $root.replit.goval.api.DeploymentConfig.toObject(message.deployment, options);
                        return object;
                    };
    
                    /**
                     * Converts this DotReplit to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplit;
                })();
    
                api.DotReplitEnvVar = (function() {
    
                    /**
                     * Properties of a DotReplitEnvVar.
                     * @memberof replit.goval.api
                     * @interface IDotReplitEnvVar
                     * @property {string|null} [key] DotReplitEnvVar key
                     * @property {string|null} [value] DotReplitEnvVar value
                     */
    
                    /**
                     * Constructs a new DotReplitEnvVar.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitEnvVar.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitEnvVar=} [properties] Properties to set
                     */
                    function DotReplitEnvVar(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitEnvVar key.
                     * @member {string} key
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @instance
                     */
                    DotReplitEnvVar.prototype.key = "";
    
                    /**
                     * DotReplitEnvVar value.
                     * @member {string} value
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @instance
                     */
                    DotReplitEnvVar.prototype.value = "";
    
                    /**
                     * Creates a new DotReplitEnvVar instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {replit.goval.api.IDotReplitEnvVar=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitEnvVar} DotReplitEnvVar instance
                     */
                    DotReplitEnvVar.create = function create(properties) {
                        return DotReplitEnvVar.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitEnvVar message. Does not implicitly {@link replit.goval.api.DotReplitEnvVar.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {replit.goval.api.DotReplitEnvVar} message DotReplitEnvVar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitEnvVar.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitEnvVar message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitEnvVar.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {replit.goval.api.DotReplitEnvVar} message DotReplitEnvVar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitEnvVar.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitEnvVar message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitEnvVar} DotReplitEnvVar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitEnvVar.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitEnvVar();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.string();
                                break;
                            case 2:
                                message.value = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitEnvVar message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitEnvVar} DotReplitEnvVar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitEnvVar.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitEnvVar message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitEnvVar.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!$util.isString(message.key))
                                return "key: string expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitEnvVar message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitEnvVar} DotReplitEnvVar
                     */
                    DotReplitEnvVar.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitEnvVar)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitEnvVar();
                        if (object.key != null)
                            message.key = String(object.key);
                        if (object.value != null)
                            message.value = String(object.value);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitEnvVar message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @static
                     * @param {replit.goval.api.DotReplitEnvVar} message DotReplitEnvVar
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitEnvVar.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.key = "";
                            object.value = "";
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = message.key;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitEnvVar to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitEnvVar
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitEnvVar.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitEnvVar;
                })();
    
                api.DotReplitPort = (function() {
    
                    /**
                     * Properties of a DotReplitPort.
                     * @memberof replit.goval.api
                     * @interface IDotReplitPort
                     * @property {number|null} [localPort] DotReplitPort localPort
                     * @property {number|null} [externalPort] DotReplitPort externalPort
                     */
    
                    /**
                     * Constructs a new DotReplitPort.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitPort.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitPort=} [properties] Properties to set
                     */
                    function DotReplitPort(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitPort localPort.
                     * @member {number} localPort
                     * @memberof replit.goval.api.DotReplitPort
                     * @instance
                     */
                    DotReplitPort.prototype.localPort = 0;
    
                    /**
                     * DotReplitPort externalPort.
                     * @member {number} externalPort
                     * @memberof replit.goval.api.DotReplitPort
                     * @instance
                     */
                    DotReplitPort.prototype.externalPort = 0;
    
                    /**
                     * Creates a new DotReplitPort instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {replit.goval.api.IDotReplitPort=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitPort} DotReplitPort instance
                     */
                    DotReplitPort.create = function create(properties) {
                        return DotReplitPort.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitPort message. Does not implicitly {@link replit.goval.api.DotReplitPort.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {replit.goval.api.DotReplitPort} message DotReplitPort message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPort.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.localPort != null && Object.hasOwnProperty.call(message, "localPort"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.localPort);
                        if (message.externalPort != null && Object.hasOwnProperty.call(message, "externalPort"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.externalPort);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitPort message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitPort.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {replit.goval.api.DotReplitPort} message DotReplitPort message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPort.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitPort message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitPort} DotReplitPort
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPort.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitPort();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.localPort = reader.uint32();
                                break;
                            case 2:
                                message.externalPort = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitPort message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitPort} DotReplitPort
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPort.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitPort message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitPort.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.localPort != null && message.hasOwnProperty("localPort"))
                            if (!$util.isInteger(message.localPort))
                                return "localPort: integer expected";
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            if (!$util.isInteger(message.externalPort))
                                return "externalPort: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitPort message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitPort} DotReplitPort
                     */
                    DotReplitPort.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitPort)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitPort();
                        if (object.localPort != null)
                            message.localPort = object.localPort >>> 0;
                        if (object.externalPort != null)
                            message.externalPort = object.externalPort >>> 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitPort message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitPort
                     * @static
                     * @param {replit.goval.api.DotReplitPort} message DotReplitPort
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitPort.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.localPort = 0;
                            object.externalPort = 0;
                        }
                        if (message.localPort != null && message.hasOwnProperty("localPort"))
                            object.localPort = message.localPort;
                        if (message.externalPort != null && message.hasOwnProperty("externalPort"))
                            object.externalPort = message.externalPort;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitPort to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitPort
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitPort.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitPort;
                })();
    
                api.DotReplitHint = (function() {
    
                    /**
                     * Properties of a DotReplitHint.
                     * @memberof replit.goval.api
                     * @interface IDotReplitHint
                     * @property {string|null} [regex] DotReplitHint regex
                     * @property {string|null} [message] DotReplitHint message
                     */
    
                    /**
                     * Constructs a new DotReplitHint.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitHint.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitHint=} [properties] Properties to set
                     */
                    function DotReplitHint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitHint regex.
                     * @member {string} regex
                     * @memberof replit.goval.api.DotReplitHint
                     * @instance
                     */
                    DotReplitHint.prototype.regex = "";
    
                    /**
                     * DotReplitHint message.
                     * @member {string} message
                     * @memberof replit.goval.api.DotReplitHint
                     * @instance
                     */
                    DotReplitHint.prototype.message = "";
    
                    /**
                     * Creates a new DotReplitHint instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {replit.goval.api.IDotReplitHint=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitHint} DotReplitHint instance
                     */
                    DotReplitHint.create = function create(properties) {
                        return DotReplitHint.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitHint message. Does not implicitly {@link replit.goval.api.DotReplitHint.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {replit.goval.api.DotReplitHint} message DotReplitHint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitHint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.regex != null && Object.hasOwnProperty.call(message, "regex"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.regex);
                        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitHint message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitHint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {replit.goval.api.DotReplitHint} message DotReplitHint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitHint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitHint message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitHint} DotReplitHint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitHint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitHint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.regex = reader.string();
                                break;
                            case 2:
                                message.message = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitHint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitHint} DotReplitHint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitHint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitHint message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitHint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.regex != null && message.hasOwnProperty("regex"))
                            if (!$util.isString(message.regex))
                                return "regex: string expected";
                        if (message.message != null && message.hasOwnProperty("message"))
                            if (!$util.isString(message.message))
                                return "message: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitHint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitHint} DotReplitHint
                     */
                    DotReplitHint.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitHint)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitHint();
                        if (object.regex != null)
                            message.regex = String(object.regex);
                        if (object.message != null)
                            message.message = String(object.message);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitHint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitHint
                     * @static
                     * @param {replit.goval.api.DotReplitHint} message DotReplitHint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitHint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.regex = "";
                            object.message = "";
                        }
                        if (message.regex != null && message.hasOwnProperty("regex"))
                            object.regex = message.regex;
                        if (message.message != null && message.hasOwnProperty("message"))
                            object.message = message.message;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitHint to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitHint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitHint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitHint;
                })();
    
                api.GitHubImportConfig = (function() {
    
                    /**
                     * Properties of a GitHubImportConfig.
                     * @memberof replit.goval.api
                     * @interface IGitHubImportConfig
                     * @property {Array.<string>|null} [requiredFiles] GitHubImportConfig requiredFiles
                     */
    
                    /**
                     * Constructs a new GitHubImportConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GitHubImportConfig.
                     * @constructor
                     * @param {replit.goval.api.IGitHubImportConfig=} [properties] Properties to set
                     */
                    function GitHubImportConfig(properties) {
                        this.requiredFiles = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GitHubImportConfig requiredFiles.
                     * @member {Array.<string>} requiredFiles
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @instance
                     */
                    GitHubImportConfig.prototype.requiredFiles = $util.emptyArray;
    
                    /**
                     * Creates a new GitHubImportConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {replit.goval.api.IGitHubImportConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.GitHubImportConfig} GitHubImportConfig instance
                     */
                    GitHubImportConfig.create = function create(properties) {
                        return GitHubImportConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GitHubImportConfig message. Does not implicitly {@link replit.goval.api.GitHubImportConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {replit.goval.api.GitHubImportConfig} message GitHubImportConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GitHubImportConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.requiredFiles != null && message.requiredFiles.length)
                            for (var i = 0; i < message.requiredFiles.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.requiredFiles[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GitHubImportConfig message, length delimited. Does not implicitly {@link replit.goval.api.GitHubImportConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {replit.goval.api.GitHubImportConfig} message GitHubImportConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GitHubImportConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GitHubImportConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GitHubImportConfig} GitHubImportConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GitHubImportConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GitHubImportConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.requiredFiles && message.requiredFiles.length))
                                    message.requiredFiles = [];
                                message.requiredFiles.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GitHubImportConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GitHubImportConfig} GitHubImportConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GitHubImportConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GitHubImportConfig message.
                     * @function verify
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GitHubImportConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.requiredFiles != null && message.hasOwnProperty("requiredFiles")) {
                            if (!Array.isArray(message.requiredFiles))
                                return "requiredFiles: array expected";
                            for (var i = 0; i < message.requiredFiles.length; ++i)
                                if (!$util.isString(message.requiredFiles[i]))
                                    return "requiredFiles: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GitHubImportConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GitHubImportConfig} GitHubImportConfig
                     */
                    GitHubImportConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GitHubImportConfig)
                            return object;
                        var message = new $root.replit.goval.api.GitHubImportConfig();
                        if (object.requiredFiles) {
                            if (!Array.isArray(object.requiredFiles))
                                throw TypeError(".replit.goval.api.GitHubImportConfig.requiredFiles: array expected");
                            message.requiredFiles = [];
                            for (var i = 0; i < object.requiredFiles.length; ++i)
                                message.requiredFiles[i] = String(object.requiredFiles[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GitHubImportConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @static
                     * @param {replit.goval.api.GitHubImportConfig} message GitHubImportConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GitHubImportConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.requiredFiles = [];
                        if (message.requiredFiles && message.requiredFiles.length) {
                            object.requiredFiles = [];
                            for (var j = 0; j < message.requiredFiles.length; ++j)
                                object.requiredFiles[j] = message.requiredFiles[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GitHubImportConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GitHubImportConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GitHubImportConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GitHubImportConfig;
                })();
    
                api.DeploymentConfig = (function() {
    
                    /**
                     * Properties of a DeploymentConfig.
                     * @memberof replit.goval.api
                     * @interface IDeploymentConfig
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [run] DeploymentConfig run
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [build] DeploymentConfig build
                     */
    
                    /**
                     * Constructs a new DeploymentConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DeploymentConfig.
                     * @constructor
                     * @param {replit.goval.api.IDeploymentConfig=} [properties] Properties to set
                     */
                    function DeploymentConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DeploymentConfig run.
                     * @member {replit.goval.api.Exec|null|undefined} run
                     * @memberof replit.goval.api.DeploymentConfig
                     * @instance
                     */
                    DeploymentConfig.prototype.run = null;
    
                    /**
                     * DeploymentConfig build.
                     * @member {replit.goval.api.Exec|null|undefined} build
                     * @memberof replit.goval.api.DeploymentConfig
                     * @instance
                     */
                    DeploymentConfig.prototype.build = null;
    
                    /**
                     * Creates a new DeploymentConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {replit.goval.api.IDeploymentConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.DeploymentConfig} DeploymentConfig instance
                     */
                    DeploymentConfig.create = function create(properties) {
                        return DeploymentConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DeploymentConfig message. Does not implicitly {@link replit.goval.api.DeploymentConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {replit.goval.api.DeploymentConfig} message DeploymentConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeploymentConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.run != null && Object.hasOwnProperty.call(message, "run"))
                            $root.replit.goval.api.Exec.encode(message.run, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                            $root.replit.goval.api.Exec.encode(message.build, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DeploymentConfig message, length delimited. Does not implicitly {@link replit.goval.api.DeploymentConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {replit.goval.api.DeploymentConfig} message DeploymentConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeploymentConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DeploymentConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DeploymentConfig} DeploymentConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeploymentConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DeploymentConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.run = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.build = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DeploymentConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DeploymentConfig} DeploymentConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeploymentConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DeploymentConfig message.
                     * @function verify
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeploymentConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.run != null && message.hasOwnProperty("run")) {
                            var error = $root.replit.goval.api.Exec.verify(message.run);
                            if (error)
                                return "run." + error;
                        }
                        if (message.build != null && message.hasOwnProperty("build")) {
                            var error = $root.replit.goval.api.Exec.verify(message.build);
                            if (error)
                                return "build." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DeploymentConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DeploymentConfig} DeploymentConfig
                     */
                    DeploymentConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DeploymentConfig)
                            return object;
                        var message = new $root.replit.goval.api.DeploymentConfig();
                        if (object.run != null) {
                            if (typeof object.run !== "object")
                                throw TypeError(".replit.goval.api.DeploymentConfig.run: object expected");
                            message.run = $root.replit.goval.api.Exec.fromObject(object.run);
                        }
                        if (object.build != null) {
                            if (typeof object.build !== "object")
                                throw TypeError(".replit.goval.api.DeploymentConfig.build: object expected");
                            message.build = $root.replit.goval.api.Exec.fromObject(object.build);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DeploymentConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DeploymentConfig
                     * @static
                     * @param {replit.goval.api.DeploymentConfig} message DeploymentConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeploymentConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.run = null;
                            object.build = null;
                        }
                        if (message.run != null && message.hasOwnProperty("run"))
                            object.run = $root.replit.goval.api.Exec.toObject(message.run, options);
                        if (message.build != null && message.hasOwnProperty("build"))
                            object.build = $root.replit.goval.api.Exec.toObject(message.build, options);
                        return object;
                    };
    
                    /**
                     * Converts this DeploymentConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DeploymentConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeploymentConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DeploymentConfig;
                })();
    
                api.NixConfig = (function() {
    
                    /**
                     * Properties of a NixConfig.
                     * @memberof replit.goval.api
                     * @interface INixConfig
                     * @property {string|null} [channel] NixConfig channel
                     */
    
                    /**
                     * Constructs a new NixConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a NixConfig.
                     * @constructor
                     * @param {replit.goval.api.INixConfig=} [properties] Properties to set
                     */
                    function NixConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NixConfig channel.
                     * @member {string} channel
                     * @memberof replit.goval.api.NixConfig
                     * @instance
                     */
                    NixConfig.prototype.channel = "";
    
                    /**
                     * Creates a new NixConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {replit.goval.api.INixConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.NixConfig} NixConfig instance
                     */
                    NixConfig.create = function create(properties) {
                        return NixConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified NixConfig message. Does not implicitly {@link replit.goval.api.NixConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {replit.goval.api.NixConfig} message NixConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.channel);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NixConfig message, length delimited. Does not implicitly {@link replit.goval.api.NixConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {replit.goval.api.NixConfig} message NixConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NixConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NixConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.NixConfig} NixConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.NixConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NixConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.NixConfig} NixConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NixConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NixConfig message.
                     * @function verify
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NixConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            if (!$util.isString(message.channel))
                                return "channel: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a NixConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.NixConfig} NixConfig
                     */
                    NixConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.NixConfig)
                            return object;
                        var message = new $root.replit.goval.api.NixConfig();
                        if (object.channel != null)
                            message.channel = String(object.channel);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NixConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.NixConfig
                     * @static
                     * @param {replit.goval.api.NixConfig} message NixConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NixConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.channel = "";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = message.channel;
                        return object;
                    };
    
                    /**
                     * Converts this NixConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.NixConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NixConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NixConfig;
                })();
    
                api.HostingConfig = (function() {
    
                    /**
                     * Properties of a HostingConfig.
                     * @memberof replit.goval.api
                     * @interface IHostingConfig
                     * @property {string|null} [route] HostingConfig route
                     * @property {string|null} [directory] HostingConfig directory
                     */
    
                    /**
                     * Constructs a new HostingConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a HostingConfig.
                     * @constructor
                     * @param {replit.goval.api.IHostingConfig=} [properties] Properties to set
                     */
                    function HostingConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * HostingConfig route.
                     * @member {string} route
                     * @memberof replit.goval.api.HostingConfig
                     * @instance
                     */
                    HostingConfig.prototype.route = "";
    
                    /**
                     * HostingConfig directory.
                     * @member {string} directory
                     * @memberof replit.goval.api.HostingConfig
                     * @instance
                     */
                    HostingConfig.prototype.directory = "";
    
                    /**
                     * Creates a new HostingConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {replit.goval.api.IHostingConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.HostingConfig} HostingConfig instance
                     */
                    HostingConfig.create = function create(properties) {
                        return HostingConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified HostingConfig message. Does not implicitly {@link replit.goval.api.HostingConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {replit.goval.api.HostingConfig} message HostingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HostingConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.route != null && Object.hasOwnProperty.call(message, "route"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.route);
                        if (message.directory != null && Object.hasOwnProperty.call(message, "directory"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.directory);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified HostingConfig message, length delimited. Does not implicitly {@link replit.goval.api.HostingConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {replit.goval.api.HostingConfig} message HostingConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HostingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a HostingConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.HostingConfig} HostingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HostingConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.HostingConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.route = reader.string();
                                break;
                            case 2:
                                message.directory = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a HostingConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.HostingConfig} HostingConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HostingConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a HostingConfig message.
                     * @function verify
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HostingConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.route != null && message.hasOwnProperty("route"))
                            if (!$util.isString(message.route))
                                return "route: string expected";
                        if (message.directory != null && message.hasOwnProperty("directory"))
                            if (!$util.isString(message.directory))
                                return "directory: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a HostingConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.HostingConfig} HostingConfig
                     */
                    HostingConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.HostingConfig)
                            return object;
                        var message = new $root.replit.goval.api.HostingConfig();
                        if (object.route != null)
                            message.route = String(object.route);
                        if (object.directory != null)
                            message.directory = String(object.directory);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a HostingConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.HostingConfig
                     * @static
                     * @param {replit.goval.api.HostingConfig} message HostingConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HostingConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.route = "";
                            object.directory = "";
                        }
                        if (message.route != null && message.hasOwnProperty("route"))
                            object.route = message.route;
                        if (message.directory != null && message.hasOwnProperty("directory"))
                            object.directory = message.directory;
                        return object;
                    };
    
                    /**
                     * Converts this HostingConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.HostingConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HostingConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return HostingConfig;
                })();
    
                api.AuthConfig = (function() {
    
                    /**
                     * Properties of an AuthConfig.
                     * @memberof replit.goval.api
                     * @interface IAuthConfig
                     * @property {boolean|null} [pageEnabled] AuthConfig pageEnabled
                     * @property {string|null} [pageTitle] AuthConfig pageTitle
                     * @property {string|null} [pageDescription] AuthConfig pageDescription
                     * @property {string|null} [pageColor] AuthConfig pageColor
                     * @property {string|null} [pageImage] AuthConfig pageImage
                     * @property {boolean|null} [buttonEnabled] AuthConfig buttonEnabled
                     */
    
                    /**
                     * Constructs a new AuthConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents an AuthConfig.
                     * @constructor
                     * @param {replit.goval.api.IAuthConfig=} [properties] Properties to set
                     */
                    function AuthConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AuthConfig pageEnabled.
                     * @member {boolean} pageEnabled
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.pageEnabled = false;
    
                    /**
                     * AuthConfig pageTitle.
                     * @member {string} pageTitle
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.pageTitle = "";
    
                    /**
                     * AuthConfig pageDescription.
                     * @member {string} pageDescription
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.pageDescription = "";
    
                    /**
                     * AuthConfig pageColor.
                     * @member {string} pageColor
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.pageColor = "";
    
                    /**
                     * AuthConfig pageImage.
                     * @member {string} pageImage
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.pageImage = "";
    
                    /**
                     * AuthConfig buttonEnabled.
                     * @member {boolean} buttonEnabled
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     */
                    AuthConfig.prototype.buttonEnabled = false;
    
                    /**
                     * Creates a new AuthConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {replit.goval.api.IAuthConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.AuthConfig} AuthConfig instance
                     */
                    AuthConfig.create = function create(properties) {
                        return AuthConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified AuthConfig message. Does not implicitly {@link replit.goval.api.AuthConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {replit.goval.api.AuthConfig} message AuthConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuthConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pageEnabled != null && Object.hasOwnProperty.call(message, "pageEnabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.pageEnabled);
                        if (message.pageTitle != null && Object.hasOwnProperty.call(message, "pageTitle"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pageTitle);
                        if (message.pageDescription != null && Object.hasOwnProperty.call(message, "pageDescription"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageDescription);
                        if (message.pageColor != null && Object.hasOwnProperty.call(message, "pageColor"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageColor);
                        if (message.pageImage != null && Object.hasOwnProperty.call(message, "pageImage"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.pageImage);
                        if (message.buttonEnabled != null && Object.hasOwnProperty.call(message, "buttonEnabled"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.buttonEnabled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AuthConfig message, length delimited. Does not implicitly {@link replit.goval.api.AuthConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {replit.goval.api.AuthConfig} message AuthConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AuthConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AuthConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.AuthConfig} AuthConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuthConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.AuthConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pageEnabled = reader.bool();
                                break;
                            case 2:
                                message.pageTitle = reader.string();
                                break;
                            case 3:
                                message.pageDescription = reader.string();
                                break;
                            case 4:
                                message.pageColor = reader.string();
                                break;
                            case 5:
                                message.pageImage = reader.string();
                                break;
                            case 6:
                                message.buttonEnabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AuthConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.AuthConfig} AuthConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AuthConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AuthConfig message.
                     * @function verify
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AuthConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pageEnabled != null && message.hasOwnProperty("pageEnabled"))
                            if (typeof message.pageEnabled !== "boolean")
                                return "pageEnabled: boolean expected";
                        if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                            if (!$util.isString(message.pageTitle))
                                return "pageTitle: string expected";
                        if (message.pageDescription != null && message.hasOwnProperty("pageDescription"))
                            if (!$util.isString(message.pageDescription))
                                return "pageDescription: string expected";
                        if (message.pageColor != null && message.hasOwnProperty("pageColor"))
                            if (!$util.isString(message.pageColor))
                                return "pageColor: string expected";
                        if (message.pageImage != null && message.hasOwnProperty("pageImage"))
                            if (!$util.isString(message.pageImage))
                                return "pageImage: string expected";
                        if (message.buttonEnabled != null && message.hasOwnProperty("buttonEnabled"))
                            if (typeof message.buttonEnabled !== "boolean")
                                return "buttonEnabled: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates an AuthConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.AuthConfig} AuthConfig
                     */
                    AuthConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.AuthConfig)
                            return object;
                        var message = new $root.replit.goval.api.AuthConfig();
                        if (object.pageEnabled != null)
                            message.pageEnabled = Boolean(object.pageEnabled);
                        if (object.pageTitle != null)
                            message.pageTitle = String(object.pageTitle);
                        if (object.pageDescription != null)
                            message.pageDescription = String(object.pageDescription);
                        if (object.pageColor != null)
                            message.pageColor = String(object.pageColor);
                        if (object.pageImage != null)
                            message.pageImage = String(object.pageImage);
                        if (object.buttonEnabled != null)
                            message.buttonEnabled = Boolean(object.buttonEnabled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AuthConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.AuthConfig
                     * @static
                     * @param {replit.goval.api.AuthConfig} message AuthConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AuthConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pageEnabled = false;
                            object.pageTitle = "";
                            object.pageDescription = "";
                            object.pageColor = "";
                            object.pageImage = "";
                            object.buttonEnabled = false;
                        }
                        if (message.pageEnabled != null && message.hasOwnProperty("pageEnabled"))
                            object.pageEnabled = message.pageEnabled;
                        if (message.pageTitle != null && message.hasOwnProperty("pageTitle"))
                            object.pageTitle = message.pageTitle;
                        if (message.pageDescription != null && message.hasOwnProperty("pageDescription"))
                            object.pageDescription = message.pageDescription;
                        if (message.pageColor != null && message.hasOwnProperty("pageColor"))
                            object.pageColor = message.pageColor;
                        if (message.pageImage != null && message.hasOwnProperty("pageImage"))
                            object.pageImage = message.pageImage;
                        if (message.buttonEnabled != null && message.hasOwnProperty("buttonEnabled"))
                            object.buttonEnabled = message.buttonEnabled;
                        return object;
                    };
    
                    /**
                     * Converts this AuthConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.AuthConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AuthConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AuthConfig;
                })();
    
                api.DotReplitInterp = (function() {
    
                    /**
                     * Properties of a DotReplitInterp.
                     * @memberof replit.goval.api
                     * @interface IDotReplitInterp
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [command] DotReplitInterp command
                     * @property {Uint8Array|null} [prompt] DotReplitInterp prompt
                     */
    
                    /**
                     * Constructs a new DotReplitInterp.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitInterp.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitInterp=} [properties] Properties to set
                     */
                    function DotReplitInterp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitInterp command.
                     * @member {replit.goval.api.Exec|null|undefined} command
                     * @memberof replit.goval.api.DotReplitInterp
                     * @instance
                     */
                    DotReplitInterp.prototype.command = null;
    
                    /**
                     * DotReplitInterp prompt.
                     * @member {Uint8Array} prompt
                     * @memberof replit.goval.api.DotReplitInterp
                     * @instance
                     */
                    DotReplitInterp.prototype.prompt = $util.newBuffer([]);
    
                    /**
                     * Creates a new DotReplitInterp instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {replit.goval.api.IDotReplitInterp=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitInterp} DotReplitInterp instance
                     */
                    DotReplitInterp.create = function create(properties) {
                        return DotReplitInterp.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitInterp message. Does not implicitly {@link replit.goval.api.DotReplitInterp.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {replit.goval.api.DotReplitInterp} message DotReplitInterp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitInterp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                            $root.replit.goval.api.Exec.encode(message.command, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.prompt != null && Object.hasOwnProperty.call(message, "prompt"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prompt);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitInterp message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitInterp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {replit.goval.api.DotReplitInterp} message DotReplitInterp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitInterp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitInterp message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitInterp} DotReplitInterp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitInterp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitInterp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.command = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.prompt = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitInterp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitInterp} DotReplitInterp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitInterp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitInterp message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitInterp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.command != null && message.hasOwnProperty("command")) {
                            var error = $root.replit.goval.api.Exec.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                        if (message.prompt != null && message.hasOwnProperty("prompt"))
                            if (!(message.prompt && typeof message.prompt.length === "number" || $util.isString(message.prompt)))
                                return "prompt: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitInterp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitInterp} DotReplitInterp
                     */
                    DotReplitInterp.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitInterp)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitInterp();
                        if (object.command != null) {
                            if (typeof object.command !== "object")
                                throw TypeError(".replit.goval.api.DotReplitInterp.command: object expected");
                            message.command = $root.replit.goval.api.Exec.fromObject(object.command);
                        }
                        if (object.prompt != null)
                            if (typeof object.prompt === "string")
                                $util.base64.decode(object.prompt, message.prompt = $util.newBuffer($util.base64.length(object.prompt)), 0);
                            else if (object.prompt.length)
                                message.prompt = object.prompt;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitInterp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitInterp
                     * @static
                     * @param {replit.goval.api.DotReplitInterp} message DotReplitInterp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitInterp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.command = null;
                            if (options.bytes === String)
                                object.prompt = "";
                            else {
                                object.prompt = [];
                                if (options.bytes !== Array)
                                    object.prompt = $util.newBuffer(object.prompt);
                            }
                        }
                        if (message.command != null && message.hasOwnProperty("command"))
                            object.command = $root.replit.goval.api.Exec.toObject(message.command, options);
                        if (message.prompt != null && message.hasOwnProperty("prompt"))
                            object.prompt = options.bytes === String ? $util.base64.encode(message.prompt, 0, message.prompt.length) : options.bytes === Array ? Array.prototype.slice.call(message.prompt) : message.prompt;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitInterp to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitInterp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitInterp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitInterp;
                })();
    
                api.DotReplitLanguage = (function() {
    
                    /**
                     * Properties of a DotReplitLanguage.
                     * @memberof replit.goval.api
                     * @interface IDotReplitLanguage
                     * @property {string|null} [pattern] DotReplitLanguage pattern
                     * @property {string|null} [syntax] DotReplitLanguage syntax
                     * @property {replit.goval.api.LanguageServerConfig|replit.goval.api.ILanguageServerConfig|null} [languageServer] DotReplitLanguage languageServer
                     */
    
                    /**
                     * Constructs a new DotReplitLanguage.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitLanguage.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitLanguage=} [properties] Properties to set
                     */
                    function DotReplitLanguage(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitLanguage pattern.
                     * @member {string} pattern
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @instance
                     */
                    DotReplitLanguage.prototype.pattern = "";
    
                    /**
                     * DotReplitLanguage syntax.
                     * @member {string} syntax
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @instance
                     */
                    DotReplitLanguage.prototype.syntax = "";
    
                    /**
                     * DotReplitLanguage languageServer.
                     * @member {replit.goval.api.LanguageServerConfig|null|undefined} languageServer
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @instance
                     */
                    DotReplitLanguage.prototype.languageServer = null;
    
                    /**
                     * Creates a new DotReplitLanguage instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {replit.goval.api.IDotReplitLanguage=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitLanguage} DotReplitLanguage instance
                     */
                    DotReplitLanguage.create = function create(properties) {
                        return DotReplitLanguage.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitLanguage message. Does not implicitly {@link replit.goval.api.DotReplitLanguage.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {replit.goval.api.DotReplitLanguage} message DotReplitLanguage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitLanguage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pattern != null && Object.hasOwnProperty.call(message, "pattern"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pattern);
                        if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.syntax);
                        if (message.languageServer != null && Object.hasOwnProperty.call(message, "languageServer"))
                            $root.replit.goval.api.LanguageServerConfig.encode(message.languageServer, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitLanguage message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitLanguage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {replit.goval.api.DotReplitLanguage} message DotReplitLanguage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitLanguage message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitLanguage} DotReplitLanguage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitLanguage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitLanguage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pattern = reader.string();
                                break;
                            case 2:
                                message.syntax = reader.string();
                                break;
                            case 3:
                                message.languageServer = $root.replit.goval.api.LanguageServerConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitLanguage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitLanguage} DotReplitLanguage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitLanguage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitLanguage message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitLanguage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pattern != null && message.hasOwnProperty("pattern"))
                            if (!$util.isString(message.pattern))
                                return "pattern: string expected";
                        if (message.syntax != null && message.hasOwnProperty("syntax"))
                            if (!$util.isString(message.syntax))
                                return "syntax: string expected";
                        if (message.languageServer != null && message.hasOwnProperty("languageServer")) {
                            var error = $root.replit.goval.api.LanguageServerConfig.verify(message.languageServer);
                            if (error)
                                return "languageServer." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitLanguage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitLanguage} DotReplitLanguage
                     */
                    DotReplitLanguage.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitLanguage)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitLanguage();
                        if (object.pattern != null)
                            message.pattern = String(object.pattern);
                        if (object.syntax != null)
                            message.syntax = String(object.syntax);
                        if (object.languageServer != null) {
                            if (typeof object.languageServer !== "object")
                                throw TypeError(".replit.goval.api.DotReplitLanguage.languageServer: object expected");
                            message.languageServer = $root.replit.goval.api.LanguageServerConfig.fromObject(object.languageServer);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitLanguage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @static
                     * @param {replit.goval.api.DotReplitLanguage} message DotReplitLanguage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitLanguage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.pattern = "";
                            object.syntax = "";
                            object.languageServer = null;
                        }
                        if (message.pattern != null && message.hasOwnProperty("pattern"))
                            object.pattern = message.pattern;
                        if (message.syntax != null && message.hasOwnProperty("syntax"))
                            object.syntax = message.syntax;
                        if (message.languageServer != null && message.hasOwnProperty("languageServer"))
                            object.languageServer = $root.replit.goval.api.LanguageServerConfig.toObject(message.languageServer, options);
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitLanguage to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitLanguage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitLanguage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitLanguage;
                })();
    
                api.LanguageServerConfig = (function() {
    
                    /**
                     * Properties of a LanguageServerConfig.
                     * @memberof replit.goval.api
                     * @interface ILanguageServerConfig
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [startCommand] LanguageServerConfig startCommand
                     * @property {string|null} [configurationJson] LanguageServerConfig configurationJson
                     * @property {string|null} [initializationOptionsJson] LanguageServerConfig initializationOptionsJson
                     */
    
                    /**
                     * Constructs a new LanguageServerConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a LanguageServerConfig.
                     * @constructor
                     * @param {replit.goval.api.ILanguageServerConfig=} [properties] Properties to set
                     */
                    function LanguageServerConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LanguageServerConfig startCommand.
                     * @member {replit.goval.api.Exec|null|undefined} startCommand
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @instance
                     */
                    LanguageServerConfig.prototype.startCommand = null;
    
                    /**
                     * LanguageServerConfig configurationJson.
                     * @member {string} configurationJson
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @instance
                     */
                    LanguageServerConfig.prototype.configurationJson = "";
    
                    /**
                     * LanguageServerConfig initializationOptionsJson.
                     * @member {string} initializationOptionsJson
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @instance
                     */
                    LanguageServerConfig.prototype.initializationOptionsJson = "";
    
                    /**
                     * Creates a new LanguageServerConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {replit.goval.api.ILanguageServerConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.LanguageServerConfig} LanguageServerConfig instance
                     */
                    LanguageServerConfig.create = function create(properties) {
                        return LanguageServerConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified LanguageServerConfig message. Does not implicitly {@link replit.goval.api.LanguageServerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {replit.goval.api.LanguageServerConfig} message LanguageServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LanguageServerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.startCommand != null && Object.hasOwnProperty.call(message, "startCommand"))
                            $root.replit.goval.api.Exec.encode(message.startCommand, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.configurationJson != null && Object.hasOwnProperty.call(message, "configurationJson"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.configurationJson);
                        if (message.initializationOptionsJson != null && Object.hasOwnProperty.call(message, "initializationOptionsJson"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.initializationOptionsJson);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LanguageServerConfig message, length delimited. Does not implicitly {@link replit.goval.api.LanguageServerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {replit.goval.api.LanguageServerConfig} message LanguageServerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LanguageServerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LanguageServerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.LanguageServerConfig} LanguageServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LanguageServerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.LanguageServerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.startCommand = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.configurationJson = reader.string();
                                break;
                            case 3:
                                message.initializationOptionsJson = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LanguageServerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.LanguageServerConfig} LanguageServerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LanguageServerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LanguageServerConfig message.
                     * @function verify
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LanguageServerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.startCommand != null && message.hasOwnProperty("startCommand")) {
                            var error = $root.replit.goval.api.Exec.verify(message.startCommand);
                            if (error)
                                return "startCommand." + error;
                        }
                        if (message.configurationJson != null && message.hasOwnProperty("configurationJson"))
                            if (!$util.isString(message.configurationJson))
                                return "configurationJson: string expected";
                        if (message.initializationOptionsJson != null && message.hasOwnProperty("initializationOptionsJson"))
                            if (!$util.isString(message.initializationOptionsJson))
                                return "initializationOptionsJson: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a LanguageServerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.LanguageServerConfig} LanguageServerConfig
                     */
                    LanguageServerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.LanguageServerConfig)
                            return object;
                        var message = new $root.replit.goval.api.LanguageServerConfig();
                        if (object.startCommand != null) {
                            if (typeof object.startCommand !== "object")
                                throw TypeError(".replit.goval.api.LanguageServerConfig.startCommand: object expected");
                            message.startCommand = $root.replit.goval.api.Exec.fromObject(object.startCommand);
                        }
                        if (object.configurationJson != null)
                            message.configurationJson = String(object.configurationJson);
                        if (object.initializationOptionsJson != null)
                            message.initializationOptionsJson = String(object.initializationOptionsJson);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LanguageServerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @static
                     * @param {replit.goval.api.LanguageServerConfig} message LanguageServerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LanguageServerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.startCommand = null;
                            object.configurationJson = "";
                            object.initializationOptionsJson = "";
                        }
                        if (message.startCommand != null && message.hasOwnProperty("startCommand"))
                            object.startCommand = $root.replit.goval.api.Exec.toObject(message.startCommand, options);
                        if (message.configurationJson != null && message.hasOwnProperty("configurationJson"))
                            object.configurationJson = message.configurationJson;
                        if (message.initializationOptionsJson != null && message.hasOwnProperty("initializationOptionsJson"))
                            object.initializationOptionsJson = message.initializationOptionsJson;
                        return object;
                    };
    
                    /**
                     * Converts this LanguageServerConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.LanguageServerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LanguageServerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LanguageServerConfig;
                })();
    
                api.DotReplitPackager = (function() {
    
                    /**
                     * Properties of a DotReplitPackager.
                     * @memberof replit.goval.api
                     * @interface IDotReplitPackager
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [afterInstall] DotReplitPackager afterInstall
                     * @property {string|null} [language] DotReplitPackager language
                     * @property {replit.goval.api.DotReplitPackagerFeatures|replit.goval.api.IDotReplitPackagerFeatures|null} [features] DotReplitPackager features
                     * @property {Object.<string,string>|null} [env] DotReplitPackager env
                     * @property {Array.<string>|null} [ignoredPaths] DotReplitPackager ignoredPaths
                     * @property {Array.<string>|null} [ignoredPackages] DotReplitPackager ignoredPackages
                     */
    
                    /**
                     * Constructs a new DotReplitPackager.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitPackager.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitPackager=} [properties] Properties to set
                     */
                    function DotReplitPackager(properties) {
                        this.env = {};
                        this.ignoredPaths = [];
                        this.ignoredPackages = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitPackager afterInstall.
                     * @member {replit.goval.api.Exec|null|undefined} afterInstall
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.afterInstall = null;
    
                    /**
                     * DotReplitPackager language.
                     * @member {string} language
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.language = "";
    
                    /**
                     * DotReplitPackager features.
                     * @member {replit.goval.api.DotReplitPackagerFeatures|null|undefined} features
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.features = null;
    
                    /**
                     * DotReplitPackager env.
                     * @member {Object.<string,string>} env
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.env = $util.emptyObject;
    
                    /**
                     * DotReplitPackager ignoredPaths.
                     * @member {Array.<string>} ignoredPaths
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.ignoredPaths = $util.emptyArray;
    
                    /**
                     * DotReplitPackager ignoredPackages.
                     * @member {Array.<string>} ignoredPackages
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     */
                    DotReplitPackager.prototype.ignoredPackages = $util.emptyArray;
    
                    /**
                     * Creates a new DotReplitPackager instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {replit.goval.api.IDotReplitPackager=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitPackager} DotReplitPackager instance
                     */
                    DotReplitPackager.create = function create(properties) {
                        return DotReplitPackager.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitPackager message. Does not implicitly {@link replit.goval.api.DotReplitPackager.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {replit.goval.api.DotReplitPackager} message DotReplitPackager message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPackager.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.afterInstall != null && Object.hasOwnProperty.call(message, "afterInstall"))
                            $root.replit.goval.api.Exec.encode(message.afterInstall, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.ignoredPaths != null && message.ignoredPaths.length)
                            for (var i = 0; i < message.ignoredPaths.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.ignoredPaths[i]);
                        if (message.ignoredPackages != null && message.ignoredPackages.length)
                            for (var i = 0; i < message.ignoredPackages.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.ignoredPackages[i]);
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.language);
                        if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                            $root.replit.goval.api.DotReplitPackagerFeatures.encode(message.features, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.env != null && Object.hasOwnProperty.call(message, "env"))
                            for (var keys = Object.keys(message.env), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.env[keys[i]]).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitPackager message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitPackager.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {replit.goval.api.DotReplitPackager} message DotReplitPackager message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPackager.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitPackager message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitPackager} DotReplitPackager
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPackager.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitPackager(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.afterInstall = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.language = reader.string();
                                break;
                            case 5:
                                message.features = $root.replit.goval.api.DotReplitPackagerFeatures.decode(reader, reader.uint32());
                                break;
                            case 6:
                                if (message.env === $util.emptyObject)
                                    message.env = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.env[key] = value;
                                break;
                            case 2:
                                if (!(message.ignoredPaths && message.ignoredPaths.length))
                                    message.ignoredPaths = [];
                                message.ignoredPaths.push(reader.string());
                                break;
                            case 3:
                                if (!(message.ignoredPackages && message.ignoredPackages.length))
                                    message.ignoredPackages = [];
                                message.ignoredPackages.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitPackager message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitPackager} DotReplitPackager
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPackager.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitPackager message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitPackager.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.afterInstall != null && message.hasOwnProperty("afterInstall")) {
                            var error = $root.replit.goval.api.Exec.verify(message.afterInstall);
                            if (error)
                                return "afterInstall." + error;
                        }
                        if (message.language != null && message.hasOwnProperty("language"))
                            if (!$util.isString(message.language))
                                return "language: string expected";
                        if (message.features != null && message.hasOwnProperty("features")) {
                            var error = $root.replit.goval.api.DotReplitPackagerFeatures.verify(message.features);
                            if (error)
                                return "features." + error;
                        }
                        if (message.env != null && message.hasOwnProperty("env")) {
                            if (!$util.isObject(message.env))
                                return "env: object expected";
                            var key = Object.keys(message.env);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.env[key[i]]))
                                    return "env: string{k:string} expected";
                        }
                        if (message.ignoredPaths != null && message.hasOwnProperty("ignoredPaths")) {
                            if (!Array.isArray(message.ignoredPaths))
                                return "ignoredPaths: array expected";
                            for (var i = 0; i < message.ignoredPaths.length; ++i)
                                if (!$util.isString(message.ignoredPaths[i]))
                                    return "ignoredPaths: string[] expected";
                        }
                        if (message.ignoredPackages != null && message.hasOwnProperty("ignoredPackages")) {
                            if (!Array.isArray(message.ignoredPackages))
                                return "ignoredPackages: array expected";
                            for (var i = 0; i < message.ignoredPackages.length; ++i)
                                if (!$util.isString(message.ignoredPackages[i]))
                                    return "ignoredPackages: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitPackager message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitPackager} DotReplitPackager
                     */
                    DotReplitPackager.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitPackager)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitPackager();
                        if (object.afterInstall != null) {
                            if (typeof object.afterInstall !== "object")
                                throw TypeError(".replit.goval.api.DotReplitPackager.afterInstall: object expected");
                            message.afterInstall = $root.replit.goval.api.Exec.fromObject(object.afterInstall);
                        }
                        if (object.language != null)
                            message.language = String(object.language);
                        if (object.features != null) {
                            if (typeof object.features !== "object")
                                throw TypeError(".replit.goval.api.DotReplitPackager.features: object expected");
                            message.features = $root.replit.goval.api.DotReplitPackagerFeatures.fromObject(object.features);
                        }
                        if (object.env) {
                            if (typeof object.env !== "object")
                                throw TypeError(".replit.goval.api.DotReplitPackager.env: object expected");
                            message.env = {};
                            for (var keys = Object.keys(object.env), i = 0; i < keys.length; ++i)
                                message.env[keys[i]] = String(object.env[keys[i]]);
                        }
                        if (object.ignoredPaths) {
                            if (!Array.isArray(object.ignoredPaths))
                                throw TypeError(".replit.goval.api.DotReplitPackager.ignoredPaths: array expected");
                            message.ignoredPaths = [];
                            for (var i = 0; i < object.ignoredPaths.length; ++i)
                                message.ignoredPaths[i] = String(object.ignoredPaths[i]);
                        }
                        if (object.ignoredPackages) {
                            if (!Array.isArray(object.ignoredPackages))
                                throw TypeError(".replit.goval.api.DotReplitPackager.ignoredPackages: array expected");
                            message.ignoredPackages = [];
                            for (var i = 0; i < object.ignoredPackages.length; ++i)
                                message.ignoredPackages[i] = String(object.ignoredPackages[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitPackager message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitPackager
                     * @static
                     * @param {replit.goval.api.DotReplitPackager} message DotReplitPackager
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitPackager.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.ignoredPaths = [];
                            object.ignoredPackages = [];
                        }
                        if (options.objects || options.defaults)
                            object.env = {};
                        if (options.defaults) {
                            object.afterInstall = null;
                            object.language = "";
                            object.features = null;
                        }
                        if (message.afterInstall != null && message.hasOwnProperty("afterInstall"))
                            object.afterInstall = $root.replit.goval.api.Exec.toObject(message.afterInstall, options);
                        if (message.ignoredPaths && message.ignoredPaths.length) {
                            object.ignoredPaths = [];
                            for (var j = 0; j < message.ignoredPaths.length; ++j)
                                object.ignoredPaths[j] = message.ignoredPaths[j];
                        }
                        if (message.ignoredPackages && message.ignoredPackages.length) {
                            object.ignoredPackages = [];
                            for (var j = 0; j < message.ignoredPackages.length; ++j)
                                object.ignoredPackages[j] = message.ignoredPackages[j];
                        }
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = message.language;
                        if (message.features != null && message.hasOwnProperty("features"))
                            object.features = $root.replit.goval.api.DotReplitPackagerFeatures.toObject(message.features, options);
                        var keys2;
                        if (message.env && (keys2 = Object.keys(message.env)).length) {
                            object.env = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.env[keys2[j]] = message.env[keys2[j]];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitPackager to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitPackager
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitPackager.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitPackager;
                })();
    
                api.DotReplitPackagerFeatures = (function() {
    
                    /**
                     * Properties of a DotReplitPackagerFeatures.
                     * @memberof replit.goval.api
                     * @interface IDotReplitPackagerFeatures
                     * @property {boolean|null} [packageSearch] DotReplitPackagerFeatures packageSearch
                     * @property {boolean|null} [guessImports] DotReplitPackagerFeatures guessImports
                     * @property {boolean|null} [enabledForHosting] DotReplitPackagerFeatures enabledForHosting
                     */
    
                    /**
                     * Constructs a new DotReplitPackagerFeatures.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitPackagerFeatures.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitPackagerFeatures=} [properties] Properties to set
                     */
                    function DotReplitPackagerFeatures(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitPackagerFeatures packageSearch.
                     * @member {boolean} packageSearch
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @instance
                     */
                    DotReplitPackagerFeatures.prototype.packageSearch = false;
    
                    /**
                     * DotReplitPackagerFeatures guessImports.
                     * @member {boolean} guessImports
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @instance
                     */
                    DotReplitPackagerFeatures.prototype.guessImports = false;
    
                    /**
                     * DotReplitPackagerFeatures enabledForHosting.
                     * @member {boolean} enabledForHosting
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @instance
                     */
                    DotReplitPackagerFeatures.prototype.enabledForHosting = false;
    
                    /**
                     * Creates a new DotReplitPackagerFeatures instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {replit.goval.api.IDotReplitPackagerFeatures=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitPackagerFeatures} DotReplitPackagerFeatures instance
                     */
                    DotReplitPackagerFeatures.create = function create(properties) {
                        return DotReplitPackagerFeatures.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitPackagerFeatures message. Does not implicitly {@link replit.goval.api.DotReplitPackagerFeatures.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {replit.goval.api.DotReplitPackagerFeatures} message DotReplitPackagerFeatures message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPackagerFeatures.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packageSearch != null && Object.hasOwnProperty.call(message, "packageSearch"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.packageSearch);
                        if (message.guessImports != null && Object.hasOwnProperty.call(message, "guessImports"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.guessImports);
                        if (message.enabledForHosting != null && Object.hasOwnProperty.call(message, "enabledForHosting"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enabledForHosting);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitPackagerFeatures message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitPackagerFeatures.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {replit.goval.api.DotReplitPackagerFeatures} message DotReplitPackagerFeatures message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitPackagerFeatures.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitPackagerFeatures message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitPackagerFeatures} DotReplitPackagerFeatures
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPackagerFeatures.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitPackagerFeatures();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packageSearch = reader.bool();
                                break;
                            case 2:
                                message.guessImports = reader.bool();
                                break;
                            case 3:
                                message.enabledForHosting = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitPackagerFeatures message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitPackagerFeatures} DotReplitPackagerFeatures
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitPackagerFeatures.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitPackagerFeatures message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitPackagerFeatures.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packageSearch != null && message.hasOwnProperty("packageSearch"))
                            if (typeof message.packageSearch !== "boolean")
                                return "packageSearch: boolean expected";
                        if (message.guessImports != null && message.hasOwnProperty("guessImports"))
                            if (typeof message.guessImports !== "boolean")
                                return "guessImports: boolean expected";
                        if (message.enabledForHosting != null && message.hasOwnProperty("enabledForHosting"))
                            if (typeof message.enabledForHosting !== "boolean")
                                return "enabledForHosting: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitPackagerFeatures message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitPackagerFeatures} DotReplitPackagerFeatures
                     */
                    DotReplitPackagerFeatures.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitPackagerFeatures)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitPackagerFeatures();
                        if (object.packageSearch != null)
                            message.packageSearch = Boolean(object.packageSearch);
                        if (object.guessImports != null)
                            message.guessImports = Boolean(object.guessImports);
                        if (object.enabledForHosting != null)
                            message.enabledForHosting = Boolean(object.enabledForHosting);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitPackagerFeatures message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @static
                     * @param {replit.goval.api.DotReplitPackagerFeatures} message DotReplitPackagerFeatures
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitPackagerFeatures.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.packageSearch = false;
                            object.guessImports = false;
                            object.enabledForHosting = false;
                        }
                        if (message.packageSearch != null && message.hasOwnProperty("packageSearch"))
                            object.packageSearch = message.packageSearch;
                        if (message.guessImports != null && message.hasOwnProperty("guessImports"))
                            object.guessImports = message.guessImports;
                        if (message.enabledForHosting != null && message.hasOwnProperty("enabledForHosting"))
                            object.enabledForHosting = message.enabledForHosting;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitPackagerFeatures to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitPackagerFeatures
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitPackagerFeatures.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitPackagerFeatures;
                })();
    
                api.DotReplitUnitTest = (function() {
    
                    /**
                     * Properties of a DotReplitUnitTest.
                     * @memberof replit.goval.api
                     * @interface IDotReplitUnitTest
                     * @property {string|null} [language] DotReplitUnitTest language
                     */
    
                    /**
                     * Constructs a new DotReplitUnitTest.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DotReplitUnitTest.
                     * @constructor
                     * @param {replit.goval.api.IDotReplitUnitTest=} [properties] Properties to set
                     */
                    function DotReplitUnitTest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DotReplitUnitTest language.
                     * @member {string} language
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @instance
                     */
                    DotReplitUnitTest.prototype.language = "";
    
                    /**
                     * Creates a new DotReplitUnitTest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {replit.goval.api.IDotReplitUnitTest=} [properties] Properties to set
                     * @returns {replit.goval.api.DotReplitUnitTest} DotReplitUnitTest instance
                     */
                    DotReplitUnitTest.create = function create(properties) {
                        return DotReplitUnitTest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DotReplitUnitTest message. Does not implicitly {@link replit.goval.api.DotReplitUnitTest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {replit.goval.api.DotReplitUnitTest} message DotReplitUnitTest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUnitTest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.language);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DotReplitUnitTest message, length delimited. Does not implicitly {@link replit.goval.api.DotReplitUnitTest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {replit.goval.api.DotReplitUnitTest} message DotReplitUnitTest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DotReplitUnitTest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DotReplitUnitTest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DotReplitUnitTest} DotReplitUnitTest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUnitTest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DotReplitUnitTest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.language = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DotReplitUnitTest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DotReplitUnitTest} DotReplitUnitTest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DotReplitUnitTest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DotReplitUnitTest message.
                     * @function verify
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DotReplitUnitTest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.language != null && message.hasOwnProperty("language"))
                            if (!$util.isString(message.language))
                                return "language: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DotReplitUnitTest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DotReplitUnitTest} DotReplitUnitTest
                     */
                    DotReplitUnitTest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DotReplitUnitTest)
                            return object;
                        var message = new $root.replit.goval.api.DotReplitUnitTest();
                        if (object.language != null)
                            message.language = String(object.language);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DotReplitUnitTest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @static
                     * @param {replit.goval.api.DotReplitUnitTest} message DotReplitUnitTest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DotReplitUnitTest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.language = "";
                        if (message.language != null && message.hasOwnProperty("language"))
                            object.language = message.language;
                        return object;
                    };
    
                    /**
                     * Converts this DotReplitUnitTest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DotReplitUnitTest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DotReplitUnitTest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DotReplitUnitTest;
                })();
    
                api.DebuggerConfig = (function() {
    
                    /**
                     * Properties of a DebuggerConfig.
                     * @memberof replit.goval.api
                     * @interface IDebuggerConfig
                     * @property {boolean|null} [support] DebuggerConfig support
                     * @property {replit.goval.api.CompileConfig|replit.goval.api.ICompileConfig|null} [compile] DebuggerConfig compile
                     * @property {replit.goval.api.DapConfig|replit.goval.api.IDapConfig|null} [interactive] DebuggerConfig interactive
                     * @property {replit.goval.api.TimeTravelConfig|replit.goval.api.ITimeTravelConfig|null} [timeTravel] DebuggerConfig timeTravel
                     * @property {string|null} [dapTransport] DebuggerConfig dapTransport
                     * @property {number|null} [dapConnectTimeout] DebuggerConfig dapConnectTimeout
                     * @property {replit.goval.api.DapIntegratedAdapterConfig|replit.goval.api.IDapIntegratedAdapterConfig|null} [dapIntegratedAdapter] DebuggerConfig dapIntegratedAdapter
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [dapStartCommand] DebuggerConfig dapStartCommand
                     * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [dapInitializeMessage] DebuggerConfig dapInitializeMessage
                     * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [dapLaunchMessage] DebuggerConfig dapLaunchMessage
                     */
    
                    /**
                     * Constructs a new DebuggerConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DebuggerConfig.
                     * @constructor
                     * @param {replit.goval.api.IDebuggerConfig=} [properties] Properties to set
                     */
                    function DebuggerConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DebuggerConfig support.
                     * @member {boolean} support
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.support = false;
    
                    /**
                     * DebuggerConfig compile.
                     * @member {replit.goval.api.CompileConfig|null|undefined} compile
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.compile = null;
    
                    /**
                     * DebuggerConfig interactive.
                     * @member {replit.goval.api.DapConfig|null|undefined} interactive
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.interactive = null;
    
                    /**
                     * DebuggerConfig timeTravel.
                     * @member {replit.goval.api.TimeTravelConfig|null|undefined} timeTravel
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.timeTravel = null;
    
                    /**
                     * DebuggerConfig dapTransport.
                     * @member {string} dapTransport
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapTransport = "";
    
                    /**
                     * DebuggerConfig dapConnectTimeout.
                     * @member {number} dapConnectTimeout
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapConnectTimeout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * DebuggerConfig dapIntegratedAdapter.
                     * @member {replit.goval.api.DapIntegratedAdapterConfig|null|undefined} dapIntegratedAdapter
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapIntegratedAdapter = null;
    
                    /**
                     * DebuggerConfig dapStartCommand.
                     * @member {replit.goval.api.Exec|null|undefined} dapStartCommand
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapStartCommand = null;
    
                    /**
                     * DebuggerConfig dapInitializeMessage.
                     * @member {google.protobuf.Struct|null|undefined} dapInitializeMessage
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapInitializeMessage = null;
    
                    /**
                     * DebuggerConfig dapLaunchMessage.
                     * @member {google.protobuf.Struct|null|undefined} dapLaunchMessage
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     */
                    DebuggerConfig.prototype.dapLaunchMessage = null;
    
                    /**
                     * Creates a new DebuggerConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {replit.goval.api.IDebuggerConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.DebuggerConfig} DebuggerConfig instance
                     */
                    DebuggerConfig.create = function create(properties) {
                        return DebuggerConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DebuggerConfig message. Does not implicitly {@link replit.goval.api.DebuggerConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {replit.goval.api.DebuggerConfig} message DebuggerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebuggerConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.support != null && Object.hasOwnProperty.call(message, "support"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.support);
                        if (message.compile != null && Object.hasOwnProperty.call(message, "compile"))
                            $root.replit.goval.api.CompileConfig.encode(message.compile, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.interactive != null && Object.hasOwnProperty.call(message, "interactive"))
                            $root.replit.goval.api.DapConfig.encode(message.interactive, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.timeTravel != null && Object.hasOwnProperty.call(message, "timeTravel"))
                            $root.replit.goval.api.TimeTravelConfig.encode(message.timeTravel, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.dapTransport != null && Object.hasOwnProperty.call(message, "dapTransport"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.dapTransport);
                        if (message.dapConnectTimeout != null && Object.hasOwnProperty.call(message, "dapConnectTimeout"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.dapConnectTimeout);
                        if (message.dapIntegratedAdapter != null && Object.hasOwnProperty.call(message, "dapIntegratedAdapter"))
                            $root.replit.goval.api.DapIntegratedAdapterConfig.encode(message.dapIntegratedAdapter, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.dapStartCommand != null && Object.hasOwnProperty.call(message, "dapStartCommand"))
                            $root.replit.goval.api.Exec.encode(message.dapStartCommand, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.dapInitializeMessage != null && Object.hasOwnProperty.call(message, "dapInitializeMessage"))
                            $root.google.protobuf.Struct.encode(message.dapInitializeMessage, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.dapLaunchMessage != null && Object.hasOwnProperty.call(message, "dapLaunchMessage"))
                            $root.google.protobuf.Struct.encode(message.dapLaunchMessage, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DebuggerConfig message, length delimited. Does not implicitly {@link replit.goval.api.DebuggerConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {replit.goval.api.DebuggerConfig} message DebuggerConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DebuggerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DebuggerConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DebuggerConfig} DebuggerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebuggerConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DebuggerConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.support = reader.bool();
                                break;
                            case 2:
                                message.compile = $root.replit.goval.api.CompileConfig.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.interactive = $root.replit.goval.api.DapConfig.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.timeTravel = $root.replit.goval.api.TimeTravelConfig.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.dapTransport = reader.string();
                                break;
                            case 6:
                                message.dapConnectTimeout = reader.int64();
                                break;
                            case 7:
                                message.dapIntegratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.dapStartCommand = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.dapInitializeMessage = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.dapLaunchMessage = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DebuggerConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DebuggerConfig} DebuggerConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DebuggerConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DebuggerConfig message.
                     * @function verify
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DebuggerConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.support != null && message.hasOwnProperty("support"))
                            if (typeof message.support !== "boolean")
                                return "support: boolean expected";
                        if (message.compile != null && message.hasOwnProperty("compile")) {
                            var error = $root.replit.goval.api.CompileConfig.verify(message.compile);
                            if (error)
                                return "compile." + error;
                        }
                        if (message.interactive != null && message.hasOwnProperty("interactive")) {
                            var error = $root.replit.goval.api.DapConfig.verify(message.interactive);
                            if (error)
                                return "interactive." + error;
                        }
                        if (message.timeTravel != null && message.hasOwnProperty("timeTravel")) {
                            var error = $root.replit.goval.api.TimeTravelConfig.verify(message.timeTravel);
                            if (error)
                                return "timeTravel." + error;
                        }
                        if (message.dapTransport != null && message.hasOwnProperty("dapTransport"))
                            if (!$util.isString(message.dapTransport))
                                return "dapTransport: string expected";
                        if (message.dapConnectTimeout != null && message.hasOwnProperty("dapConnectTimeout"))
                            if (!$util.isInteger(message.dapConnectTimeout) && !(message.dapConnectTimeout && $util.isInteger(message.dapConnectTimeout.low) && $util.isInteger(message.dapConnectTimeout.high)))
                                return "dapConnectTimeout: integer|Long expected";
                        if (message.dapIntegratedAdapter != null && message.hasOwnProperty("dapIntegratedAdapter")) {
                            var error = $root.replit.goval.api.DapIntegratedAdapterConfig.verify(message.dapIntegratedAdapter);
                            if (error)
                                return "dapIntegratedAdapter." + error;
                        }
                        if (message.dapStartCommand != null && message.hasOwnProperty("dapStartCommand")) {
                            var error = $root.replit.goval.api.Exec.verify(message.dapStartCommand);
                            if (error)
                                return "dapStartCommand." + error;
                        }
                        if (message.dapInitializeMessage != null && message.hasOwnProperty("dapInitializeMessage")) {
                            var error = $root.google.protobuf.Struct.verify(message.dapInitializeMessage);
                            if (error)
                                return "dapInitializeMessage." + error;
                        }
                        if (message.dapLaunchMessage != null && message.hasOwnProperty("dapLaunchMessage")) {
                            var error = $root.google.protobuf.Struct.verify(message.dapLaunchMessage);
                            if (error)
                                return "dapLaunchMessage." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DebuggerConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DebuggerConfig} DebuggerConfig
                     */
                    DebuggerConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DebuggerConfig)
                            return object;
                        var message = new $root.replit.goval.api.DebuggerConfig();
                        if (object.support != null)
                            message.support = Boolean(object.support);
                        if (object.compile != null) {
                            if (typeof object.compile !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.compile: object expected");
                            message.compile = $root.replit.goval.api.CompileConfig.fromObject(object.compile);
                        }
                        if (object.interactive != null) {
                            if (typeof object.interactive !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.interactive: object expected");
                            message.interactive = $root.replit.goval.api.DapConfig.fromObject(object.interactive);
                        }
                        if (object.timeTravel != null) {
                            if (typeof object.timeTravel !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.timeTravel: object expected");
                            message.timeTravel = $root.replit.goval.api.TimeTravelConfig.fromObject(object.timeTravel);
                        }
                        if (object.dapTransport != null)
                            message.dapTransport = String(object.dapTransport);
                        if (object.dapConnectTimeout != null)
                            if ($util.Long)
                                (message.dapConnectTimeout = $util.Long.fromValue(object.dapConnectTimeout)).unsigned = false;
                            else if (typeof object.dapConnectTimeout === "string")
                                message.dapConnectTimeout = parseInt(object.dapConnectTimeout, 10);
                            else if (typeof object.dapConnectTimeout === "number")
                                message.dapConnectTimeout = object.dapConnectTimeout;
                            else if (typeof object.dapConnectTimeout === "object")
                                message.dapConnectTimeout = new $util.LongBits(object.dapConnectTimeout.low >>> 0, object.dapConnectTimeout.high >>> 0).toNumber();
                        if (object.dapIntegratedAdapter != null) {
                            if (typeof object.dapIntegratedAdapter !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.dapIntegratedAdapter: object expected");
                            message.dapIntegratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.fromObject(object.dapIntegratedAdapter);
                        }
                        if (object.dapStartCommand != null) {
                            if (typeof object.dapStartCommand !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.dapStartCommand: object expected");
                            message.dapStartCommand = $root.replit.goval.api.Exec.fromObject(object.dapStartCommand);
                        }
                        if (object.dapInitializeMessage != null) {
                            if (typeof object.dapInitializeMessage !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.dapInitializeMessage: object expected");
                            message.dapInitializeMessage = $root.google.protobuf.Struct.fromObject(object.dapInitializeMessage);
                        }
                        if (object.dapLaunchMessage != null) {
                            if (typeof object.dapLaunchMessage !== "object")
                                throw TypeError(".replit.goval.api.DebuggerConfig.dapLaunchMessage: object expected");
                            message.dapLaunchMessage = $root.google.protobuf.Struct.fromObject(object.dapLaunchMessage);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DebuggerConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DebuggerConfig
                     * @static
                     * @param {replit.goval.api.DebuggerConfig} message DebuggerConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DebuggerConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.support = false;
                            object.compile = null;
                            object.interactive = null;
                            object.timeTravel = null;
                            object.dapTransport = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.dapConnectTimeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.dapConnectTimeout = options.longs === String ? "0" : 0;
                            object.dapIntegratedAdapter = null;
                            object.dapStartCommand = null;
                            object.dapInitializeMessage = null;
                            object.dapLaunchMessage = null;
                        }
                        if (message.support != null && message.hasOwnProperty("support"))
                            object.support = message.support;
                        if (message.compile != null && message.hasOwnProperty("compile"))
                            object.compile = $root.replit.goval.api.CompileConfig.toObject(message.compile, options);
                        if (message.interactive != null && message.hasOwnProperty("interactive"))
                            object.interactive = $root.replit.goval.api.DapConfig.toObject(message.interactive, options);
                        if (message.timeTravel != null && message.hasOwnProperty("timeTravel"))
                            object.timeTravel = $root.replit.goval.api.TimeTravelConfig.toObject(message.timeTravel, options);
                        if (message.dapTransport != null && message.hasOwnProperty("dapTransport"))
                            object.dapTransport = message.dapTransport;
                        if (message.dapConnectTimeout != null && message.hasOwnProperty("dapConnectTimeout"))
                            if (typeof message.dapConnectTimeout === "number")
                                object.dapConnectTimeout = options.longs === String ? String(message.dapConnectTimeout) : message.dapConnectTimeout;
                            else
                                object.dapConnectTimeout = options.longs === String ? $util.Long.prototype.toString.call(message.dapConnectTimeout) : options.longs === Number ? new $util.LongBits(message.dapConnectTimeout.low >>> 0, message.dapConnectTimeout.high >>> 0).toNumber() : message.dapConnectTimeout;
                        if (message.dapIntegratedAdapter != null && message.hasOwnProperty("dapIntegratedAdapter"))
                            object.dapIntegratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.toObject(message.dapIntegratedAdapter, options);
                        if (message.dapStartCommand != null && message.hasOwnProperty("dapStartCommand"))
                            object.dapStartCommand = $root.replit.goval.api.Exec.toObject(message.dapStartCommand, options);
                        if (message.dapInitializeMessage != null && message.hasOwnProperty("dapInitializeMessage"))
                            object.dapInitializeMessage = $root.google.protobuf.Struct.toObject(message.dapInitializeMessage, options);
                        if (message.dapLaunchMessage != null && message.hasOwnProperty("dapLaunchMessage"))
                            object.dapLaunchMessage = $root.google.protobuf.Struct.toObject(message.dapLaunchMessage, options);
                        return object;
                    };
    
                    /**
                     * Converts this DebuggerConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DebuggerConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DebuggerConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DebuggerConfig;
                })();
    
                api.CompileConfig = (function() {
    
                    /**
                     * Properties of a CompileConfig.
                     * @memberof replit.goval.api
                     * @interface ICompileConfig
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [command] CompileConfig command
                     * @property {boolean|null} [onlyMain] CompileConfig onlyMain
                     * @property {boolean|null} [noFileArgs] CompileConfig noFileArgs
                     */
    
                    /**
                     * Constructs a new CompileConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a CompileConfig.
                     * @constructor
                     * @param {replit.goval.api.ICompileConfig=} [properties] Properties to set
                     */
                    function CompileConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CompileConfig command.
                     * @member {replit.goval.api.Exec|null|undefined} command
                     * @memberof replit.goval.api.CompileConfig
                     * @instance
                     */
                    CompileConfig.prototype.command = null;
    
                    /**
                     * CompileConfig onlyMain.
                     * @member {boolean} onlyMain
                     * @memberof replit.goval.api.CompileConfig
                     * @instance
                     */
                    CompileConfig.prototype.onlyMain = false;
    
                    /**
                     * CompileConfig noFileArgs.
                     * @member {boolean} noFileArgs
                     * @memberof replit.goval.api.CompileConfig
                     * @instance
                     */
                    CompileConfig.prototype.noFileArgs = false;
    
                    /**
                     * Creates a new CompileConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {replit.goval.api.ICompileConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.CompileConfig} CompileConfig instance
                     */
                    CompileConfig.create = function create(properties) {
                        return CompileConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified CompileConfig message. Does not implicitly {@link replit.goval.api.CompileConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {replit.goval.api.CompileConfig} message CompileConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompileConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                            $root.replit.goval.api.Exec.encode(message.command, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.onlyMain != null && Object.hasOwnProperty.call(message, "onlyMain"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.onlyMain);
                        if (message.noFileArgs != null && Object.hasOwnProperty.call(message, "noFileArgs"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.noFileArgs);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CompileConfig message, length delimited. Does not implicitly {@link replit.goval.api.CompileConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {replit.goval.api.CompileConfig} message CompileConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CompileConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CompileConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.CompileConfig} CompileConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompileConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.CompileConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.command = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.onlyMain = reader.bool();
                                break;
                            case 3:
                                message.noFileArgs = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CompileConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.CompileConfig} CompileConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CompileConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CompileConfig message.
                     * @function verify
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CompileConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.command != null && message.hasOwnProperty("command")) {
                            var error = $root.replit.goval.api.Exec.verify(message.command);
                            if (error)
                                return "command." + error;
                        }
                        if (message.onlyMain != null && message.hasOwnProperty("onlyMain"))
                            if (typeof message.onlyMain !== "boolean")
                                return "onlyMain: boolean expected";
                        if (message.noFileArgs != null && message.hasOwnProperty("noFileArgs"))
                            if (typeof message.noFileArgs !== "boolean")
                                return "noFileArgs: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a CompileConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.CompileConfig} CompileConfig
                     */
                    CompileConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.CompileConfig)
                            return object;
                        var message = new $root.replit.goval.api.CompileConfig();
                        if (object.command != null) {
                            if (typeof object.command !== "object")
                                throw TypeError(".replit.goval.api.CompileConfig.command: object expected");
                            message.command = $root.replit.goval.api.Exec.fromObject(object.command);
                        }
                        if (object.onlyMain != null)
                            message.onlyMain = Boolean(object.onlyMain);
                        if (object.noFileArgs != null)
                            message.noFileArgs = Boolean(object.noFileArgs);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CompileConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.CompileConfig
                     * @static
                     * @param {replit.goval.api.CompileConfig} message CompileConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CompileConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.command = null;
                            object.onlyMain = false;
                            object.noFileArgs = false;
                        }
                        if (message.command != null && message.hasOwnProperty("command"))
                            object.command = $root.replit.goval.api.Exec.toObject(message.command, options);
                        if (message.onlyMain != null && message.hasOwnProperty("onlyMain"))
                            object.onlyMain = message.onlyMain;
                        if (message.noFileArgs != null && message.hasOwnProperty("noFileArgs"))
                            object.noFileArgs = message.noFileArgs;
                        return object;
                    };
    
                    /**
                     * Converts this CompileConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.CompileConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CompileConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CompileConfig;
                })();
    
                api.DapConfig = (function() {
    
                    /**
                     * Properties of a DapConfig.
                     * @memberof replit.goval.api
                     * @interface IDapConfig
                     * @property {string|null} [transport] DapConfig transport
                     * @property {number|null} [connectTimeout] DapConfig connectTimeout
                     * @property {replit.goval.api.DapIntegratedAdapterConfig|replit.goval.api.IDapIntegratedAdapterConfig|null} [integratedAdapter] DapConfig integratedAdapter
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [startCommand] DapConfig startCommand
                     * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [initializeMessage] DapConfig initializeMessage
                     * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [launchMessage] DapConfig launchMessage
                     */
    
                    /**
                     * Constructs a new DapConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DapConfig.
                     * @constructor
                     * @param {replit.goval.api.IDapConfig=} [properties] Properties to set
                     */
                    function DapConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DapConfig transport.
                     * @member {string} transport
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.transport = "";
    
                    /**
                     * DapConfig connectTimeout.
                     * @member {number} connectTimeout
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.connectTimeout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * DapConfig integratedAdapter.
                     * @member {replit.goval.api.DapIntegratedAdapterConfig|null|undefined} integratedAdapter
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.integratedAdapter = null;
    
                    /**
                     * DapConfig startCommand.
                     * @member {replit.goval.api.Exec|null|undefined} startCommand
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.startCommand = null;
    
                    /**
                     * DapConfig initializeMessage.
                     * @member {google.protobuf.Struct|null|undefined} initializeMessage
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.initializeMessage = null;
    
                    /**
                     * DapConfig launchMessage.
                     * @member {google.protobuf.Struct|null|undefined} launchMessage
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     */
                    DapConfig.prototype.launchMessage = null;
    
                    /**
                     * Creates a new DapConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {replit.goval.api.IDapConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.DapConfig} DapConfig instance
                     */
                    DapConfig.create = function create(properties) {
                        return DapConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DapConfig message. Does not implicitly {@link replit.goval.api.DapConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {replit.goval.api.DapConfig} message DapConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DapConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.transport != null && Object.hasOwnProperty.call(message, "transport"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.transport);
                        if (message.connectTimeout != null && Object.hasOwnProperty.call(message, "connectTimeout"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.connectTimeout);
                        if (message.integratedAdapter != null && Object.hasOwnProperty.call(message, "integratedAdapter"))
                            $root.replit.goval.api.DapIntegratedAdapterConfig.encode(message.integratedAdapter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.startCommand != null && Object.hasOwnProperty.call(message, "startCommand"))
                            $root.replit.goval.api.Exec.encode(message.startCommand, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.initializeMessage != null && Object.hasOwnProperty.call(message, "initializeMessage"))
                            $root.google.protobuf.Struct.encode(message.initializeMessage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.launchMessage != null && Object.hasOwnProperty.call(message, "launchMessage"))
                            $root.google.protobuf.Struct.encode(message.launchMessage, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DapConfig message, length delimited. Does not implicitly {@link replit.goval.api.DapConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {replit.goval.api.DapConfig} message DapConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DapConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DapConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DapConfig} DapConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DapConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DapConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.transport = reader.string();
                                break;
                            case 2:
                                message.connectTimeout = reader.int64();
                                break;
                            case 3:
                                message.integratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.startCommand = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.initializeMessage = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.launchMessage = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DapConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DapConfig} DapConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DapConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DapConfig message.
                     * @function verify
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DapConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.transport != null && message.hasOwnProperty("transport"))
                            if (!$util.isString(message.transport))
                                return "transport: string expected";
                        if (message.connectTimeout != null && message.hasOwnProperty("connectTimeout"))
                            if (!$util.isInteger(message.connectTimeout) && !(message.connectTimeout && $util.isInteger(message.connectTimeout.low) && $util.isInteger(message.connectTimeout.high)))
                                return "connectTimeout: integer|Long expected";
                        if (message.integratedAdapter != null && message.hasOwnProperty("integratedAdapter")) {
                            var error = $root.replit.goval.api.DapIntegratedAdapterConfig.verify(message.integratedAdapter);
                            if (error)
                                return "integratedAdapter." + error;
                        }
                        if (message.startCommand != null && message.hasOwnProperty("startCommand")) {
                            var error = $root.replit.goval.api.Exec.verify(message.startCommand);
                            if (error)
                                return "startCommand." + error;
                        }
                        if (message.initializeMessage != null && message.hasOwnProperty("initializeMessage")) {
                            var error = $root.google.protobuf.Struct.verify(message.initializeMessage);
                            if (error)
                                return "initializeMessage." + error;
                        }
                        if (message.launchMessage != null && message.hasOwnProperty("launchMessage")) {
                            var error = $root.google.protobuf.Struct.verify(message.launchMessage);
                            if (error)
                                return "launchMessage." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DapConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DapConfig} DapConfig
                     */
                    DapConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DapConfig)
                            return object;
                        var message = new $root.replit.goval.api.DapConfig();
                        if (object.transport != null)
                            message.transport = String(object.transport);
                        if (object.connectTimeout != null)
                            if ($util.Long)
                                (message.connectTimeout = $util.Long.fromValue(object.connectTimeout)).unsigned = false;
                            else if (typeof object.connectTimeout === "string")
                                message.connectTimeout = parseInt(object.connectTimeout, 10);
                            else if (typeof object.connectTimeout === "number")
                                message.connectTimeout = object.connectTimeout;
                            else if (typeof object.connectTimeout === "object")
                                message.connectTimeout = new $util.LongBits(object.connectTimeout.low >>> 0, object.connectTimeout.high >>> 0).toNumber();
                        if (object.integratedAdapter != null) {
                            if (typeof object.integratedAdapter !== "object")
                                throw TypeError(".replit.goval.api.DapConfig.integratedAdapter: object expected");
                            message.integratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.fromObject(object.integratedAdapter);
                        }
                        if (object.startCommand != null) {
                            if (typeof object.startCommand !== "object")
                                throw TypeError(".replit.goval.api.DapConfig.startCommand: object expected");
                            message.startCommand = $root.replit.goval.api.Exec.fromObject(object.startCommand);
                        }
                        if (object.initializeMessage != null) {
                            if (typeof object.initializeMessage !== "object")
                                throw TypeError(".replit.goval.api.DapConfig.initializeMessage: object expected");
                            message.initializeMessage = $root.google.protobuf.Struct.fromObject(object.initializeMessage);
                        }
                        if (object.launchMessage != null) {
                            if (typeof object.launchMessage !== "object")
                                throw TypeError(".replit.goval.api.DapConfig.launchMessage: object expected");
                            message.launchMessage = $root.google.protobuf.Struct.fromObject(object.launchMessage);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DapConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DapConfig
                     * @static
                     * @param {replit.goval.api.DapConfig} message DapConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DapConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.transport = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.connectTimeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.connectTimeout = options.longs === String ? "0" : 0;
                            object.integratedAdapter = null;
                            object.startCommand = null;
                            object.initializeMessage = null;
                            object.launchMessage = null;
                        }
                        if (message.transport != null && message.hasOwnProperty("transport"))
                            object.transport = message.transport;
                        if (message.connectTimeout != null && message.hasOwnProperty("connectTimeout"))
                            if (typeof message.connectTimeout === "number")
                                object.connectTimeout = options.longs === String ? String(message.connectTimeout) : message.connectTimeout;
                            else
                                object.connectTimeout = options.longs === String ? $util.Long.prototype.toString.call(message.connectTimeout) : options.longs === Number ? new $util.LongBits(message.connectTimeout.low >>> 0, message.connectTimeout.high >>> 0).toNumber() : message.connectTimeout;
                        if (message.integratedAdapter != null && message.hasOwnProperty("integratedAdapter"))
                            object.integratedAdapter = $root.replit.goval.api.DapIntegratedAdapterConfig.toObject(message.integratedAdapter, options);
                        if (message.startCommand != null && message.hasOwnProperty("startCommand"))
                            object.startCommand = $root.replit.goval.api.Exec.toObject(message.startCommand, options);
                        if (message.initializeMessage != null && message.hasOwnProperty("initializeMessage"))
                            object.initializeMessage = $root.google.protobuf.Struct.toObject(message.initializeMessage, options);
                        if (message.launchMessage != null && message.hasOwnProperty("launchMessage"))
                            object.launchMessage = $root.google.protobuf.Struct.toObject(message.launchMessage, options);
                        return object;
                    };
    
                    /**
                     * Converts this DapConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DapConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DapConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DapConfig;
                })();
    
                api.TimeTravelConfig = (function() {
    
                    /**
                     * Properties of a TimeTravelConfig.
                     * @memberof replit.goval.api
                     * @interface ITimeTravelConfig
                     * @property {replit.goval.api.Exec|replit.goval.api.IExec|null} [record] TimeTravelConfig record
                     * @property {replit.goval.api.DapConfig|replit.goval.api.IDapConfig|null} [debug] TimeTravelConfig debug
                     */
    
                    /**
                     * Constructs a new TimeTravelConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TimeTravelConfig.
                     * @constructor
                     * @param {replit.goval.api.ITimeTravelConfig=} [properties] Properties to set
                     */
                    function TimeTravelConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TimeTravelConfig record.
                     * @member {replit.goval.api.Exec|null|undefined} record
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @instance
                     */
                    TimeTravelConfig.prototype.record = null;
    
                    /**
                     * TimeTravelConfig debug.
                     * @member {replit.goval.api.DapConfig|null|undefined} debug
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @instance
                     */
                    TimeTravelConfig.prototype.debug = null;
    
                    /**
                     * Creates a new TimeTravelConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {replit.goval.api.ITimeTravelConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.TimeTravelConfig} TimeTravelConfig instance
                     */
                    TimeTravelConfig.create = function create(properties) {
                        return TimeTravelConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TimeTravelConfig message. Does not implicitly {@link replit.goval.api.TimeTravelConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {replit.goval.api.TimeTravelConfig} message TimeTravelConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimeTravelConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.record != null && Object.hasOwnProperty.call(message, "record"))
                            $root.replit.goval.api.Exec.encode(message.record, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                            $root.replit.goval.api.DapConfig.encode(message.debug, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TimeTravelConfig message, length delimited. Does not implicitly {@link replit.goval.api.TimeTravelConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {replit.goval.api.TimeTravelConfig} message TimeTravelConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimeTravelConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TimeTravelConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TimeTravelConfig} TimeTravelConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimeTravelConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TimeTravelConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.record = $root.replit.goval.api.Exec.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.debug = $root.replit.goval.api.DapConfig.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TimeTravelConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TimeTravelConfig} TimeTravelConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimeTravelConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TimeTravelConfig message.
                     * @function verify
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimeTravelConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.record != null && message.hasOwnProperty("record")) {
                            var error = $root.replit.goval.api.Exec.verify(message.record);
                            if (error)
                                return "record." + error;
                        }
                        if (message.debug != null && message.hasOwnProperty("debug")) {
                            var error = $root.replit.goval.api.DapConfig.verify(message.debug);
                            if (error)
                                return "debug." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TimeTravelConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TimeTravelConfig} TimeTravelConfig
                     */
                    TimeTravelConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TimeTravelConfig)
                            return object;
                        var message = new $root.replit.goval.api.TimeTravelConfig();
                        if (object.record != null) {
                            if (typeof object.record !== "object")
                                throw TypeError(".replit.goval.api.TimeTravelConfig.record: object expected");
                            message.record = $root.replit.goval.api.Exec.fromObject(object.record);
                        }
                        if (object.debug != null) {
                            if (typeof object.debug !== "object")
                                throw TypeError(".replit.goval.api.TimeTravelConfig.debug: object expected");
                            message.debug = $root.replit.goval.api.DapConfig.fromObject(object.debug);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TimeTravelConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @static
                     * @param {replit.goval.api.TimeTravelConfig} message TimeTravelConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimeTravelConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.record = null;
                            object.debug = null;
                        }
                        if (message.record != null && message.hasOwnProperty("record"))
                            object.record = $root.replit.goval.api.Exec.toObject(message.record, options);
                        if (message.debug != null && message.hasOwnProperty("debug"))
                            object.debug = $root.replit.goval.api.DapConfig.toObject(message.debug, options);
                        return object;
                    };
    
                    /**
                     * Converts this TimeTravelConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TimeTravelConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimeTravelConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TimeTravelConfig;
                })();
    
                api.DapIntegratedAdapterConfig = (function() {
    
                    /**
                     * Properties of a DapIntegratedAdapterConfig.
                     * @memberof replit.goval.api
                     * @interface IDapIntegratedAdapterConfig
                     * @property {string|null} [dapTcpAddress] DapIntegratedAdapterConfig dapTcpAddress
                     */
    
                    /**
                     * Constructs a new DapIntegratedAdapterConfig.
                     * @memberof replit.goval.api
                     * @classdesc Represents a DapIntegratedAdapterConfig.
                     * @constructor
                     * @param {replit.goval.api.IDapIntegratedAdapterConfig=} [properties] Properties to set
                     */
                    function DapIntegratedAdapterConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DapIntegratedAdapterConfig dapTcpAddress.
                     * @member {string} dapTcpAddress
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @instance
                     */
                    DapIntegratedAdapterConfig.prototype.dapTcpAddress = "";
    
                    /**
                     * Creates a new DapIntegratedAdapterConfig instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {replit.goval.api.IDapIntegratedAdapterConfig=} [properties] Properties to set
                     * @returns {replit.goval.api.DapIntegratedAdapterConfig} DapIntegratedAdapterConfig instance
                     */
                    DapIntegratedAdapterConfig.create = function create(properties) {
                        return DapIntegratedAdapterConfig.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified DapIntegratedAdapterConfig message. Does not implicitly {@link replit.goval.api.DapIntegratedAdapterConfig.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {replit.goval.api.DapIntegratedAdapterConfig} message DapIntegratedAdapterConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DapIntegratedAdapterConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dapTcpAddress != null && Object.hasOwnProperty.call(message, "dapTcpAddress"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dapTcpAddress);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DapIntegratedAdapterConfig message, length delimited. Does not implicitly {@link replit.goval.api.DapIntegratedAdapterConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {replit.goval.api.DapIntegratedAdapterConfig} message DapIntegratedAdapterConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DapIntegratedAdapterConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DapIntegratedAdapterConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.DapIntegratedAdapterConfig} DapIntegratedAdapterConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DapIntegratedAdapterConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.DapIntegratedAdapterConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.dapTcpAddress = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DapIntegratedAdapterConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.DapIntegratedAdapterConfig} DapIntegratedAdapterConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DapIntegratedAdapterConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DapIntegratedAdapterConfig message.
                     * @function verify
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DapIntegratedAdapterConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.dapTcpAddress != null && message.hasOwnProperty("dapTcpAddress"))
                            if (!$util.isString(message.dapTcpAddress))
                                return "dapTcpAddress: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DapIntegratedAdapterConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.DapIntegratedAdapterConfig} DapIntegratedAdapterConfig
                     */
                    DapIntegratedAdapterConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.DapIntegratedAdapterConfig)
                            return object;
                        var message = new $root.replit.goval.api.DapIntegratedAdapterConfig();
                        if (object.dapTcpAddress != null)
                            message.dapTcpAddress = String(object.dapTcpAddress);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DapIntegratedAdapterConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @static
                     * @param {replit.goval.api.DapIntegratedAdapterConfig} message DapIntegratedAdapterConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DapIntegratedAdapterConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.dapTcpAddress = "";
                        if (message.dapTcpAddress != null && message.hasOwnProperty("dapTcpAddress"))
                            object.dapTcpAddress = message.dapTcpAddress;
                        return object;
                    };
    
                    /**
                     * Converts this DapIntegratedAdapterConfig to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.DapIntegratedAdapterConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DapIntegratedAdapterConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DapIntegratedAdapterConfig;
                })();
    
                api.ProxyGoingAway = (function() {
    
                    /**
                     * Properties of a ProxyGoingAway.
                     * @memberof replit.goval.api
                     * @interface IProxyGoingAway
                     */
    
                    /**
                     * Constructs a new ProxyGoingAway.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ProxyGoingAway.
                     * @constructor
                     * @param {replit.goval.api.IProxyGoingAway=} [properties] Properties to set
                     */
                    function ProxyGoingAway(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new ProxyGoingAway instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {replit.goval.api.IProxyGoingAway=} [properties] Properties to set
                     * @returns {replit.goval.api.ProxyGoingAway} ProxyGoingAway instance
                     */
                    ProxyGoingAway.create = function create(properties) {
                        return ProxyGoingAway.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ProxyGoingAway message. Does not implicitly {@link replit.goval.api.ProxyGoingAway.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {replit.goval.api.ProxyGoingAway} message ProxyGoingAway message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProxyGoingAway.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ProxyGoingAway message, length delimited. Does not implicitly {@link replit.goval.api.ProxyGoingAway.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {replit.goval.api.ProxyGoingAway} message ProxyGoingAway message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProxyGoingAway.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ProxyGoingAway message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ProxyGoingAway} ProxyGoingAway
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProxyGoingAway.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ProxyGoingAway();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ProxyGoingAway message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ProxyGoingAway} ProxyGoingAway
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProxyGoingAway.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ProxyGoingAway message.
                     * @function verify
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProxyGoingAway.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a ProxyGoingAway message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ProxyGoingAway} ProxyGoingAway
                     */
                    ProxyGoingAway.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ProxyGoingAway)
                            return object;
                        return new $root.replit.goval.api.ProxyGoingAway();
                    };
    
                    /**
                     * Creates a plain object from a ProxyGoingAway message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @static
                     * @param {replit.goval.api.ProxyGoingAway} message ProxyGoingAway
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProxyGoingAway.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this ProxyGoingAway to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ProxyGoingAway
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProxyGoingAway.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ProxyGoingAway;
                })();
    
                api.FirewallDenied = (function() {
    
                    /**
                     * Properties of a FirewallDenied.
                     * @memberof replit.goval.api
                     * @interface IFirewallDenied
                     */
    
                    /**
                     * Constructs a new FirewallDenied.
                     * @memberof replit.goval.api
                     * @classdesc Represents a FirewallDenied.
                     * @constructor
                     * @param {replit.goval.api.IFirewallDenied=} [properties] Properties to set
                     */
                    function FirewallDenied(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new FirewallDenied instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {replit.goval.api.IFirewallDenied=} [properties] Properties to set
                     * @returns {replit.goval.api.FirewallDenied} FirewallDenied instance
                     */
                    FirewallDenied.create = function create(properties) {
                        return FirewallDenied.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified FirewallDenied message. Does not implicitly {@link replit.goval.api.FirewallDenied.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {replit.goval.api.FirewallDenied} message FirewallDenied message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FirewallDenied.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified FirewallDenied message, length delimited. Does not implicitly {@link replit.goval.api.FirewallDenied.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {replit.goval.api.FirewallDenied} message FirewallDenied message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FirewallDenied.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a FirewallDenied message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.FirewallDenied} FirewallDenied
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FirewallDenied.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.FirewallDenied();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a FirewallDenied message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.FirewallDenied} FirewallDenied
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FirewallDenied.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a FirewallDenied message.
                     * @function verify
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FirewallDenied.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a FirewallDenied message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.FirewallDenied} FirewallDenied
                     */
                    FirewallDenied.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.FirewallDenied)
                            return object;
                        return new $root.replit.goval.api.FirewallDenied();
                    };
    
                    /**
                     * Creates a plain object from a FirewallDenied message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.FirewallDenied
                     * @static
                     * @param {replit.goval.api.FirewallDenied} message FirewallDenied
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FirewallDenied.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this FirewallDenied to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.FirewallDenied
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FirewallDenied.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return FirewallDenied;
                })();
    
                api.ReplLogMessage = (function() {
    
                    /**
                     * Properties of a ReplLogMessage.
                     * @memberof replit.goval.api
                     * @interface IReplLogMessage
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [timestamp] ReplLogMessage timestamp
                     * @property {string|null} [replId] ReplLogMessage replId
                     * @property {string|null} [logLine] ReplLogMessage logLine
                     * @property {string|null} [userName] ReplLogMessage userName
                     */
    
                    /**
                     * Constructs a new ReplLogMessage.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplLogMessage.
                     * @constructor
                     * @param {replit.goval.api.IReplLogMessage=} [properties] Properties to set
                     */
                    function ReplLogMessage(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplLogMessage timestamp.
                     * @member {google.protobuf.Timestamp|null|undefined} timestamp
                     * @memberof replit.goval.api.ReplLogMessage
                     * @instance
                     */
                    ReplLogMessage.prototype.timestamp = null;
    
                    /**
                     * ReplLogMessage replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.ReplLogMessage
                     * @instance
                     */
                    ReplLogMessage.prototype.replId = "";
    
                    /**
                     * ReplLogMessage logLine.
                     * @member {string} logLine
                     * @memberof replit.goval.api.ReplLogMessage
                     * @instance
                     */
                    ReplLogMessage.prototype.logLine = "";
    
                    /**
                     * ReplLogMessage userName.
                     * @member {string} userName
                     * @memberof replit.goval.api.ReplLogMessage
                     * @instance
                     */
                    ReplLogMessage.prototype.userName = "";
    
                    /**
                     * Creates a new ReplLogMessage instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {replit.goval.api.IReplLogMessage=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplLogMessage} ReplLogMessage instance
                     */
                    ReplLogMessage.create = function create(properties) {
                        return ReplLogMessage.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplLogMessage message. Does not implicitly {@link replit.goval.api.ReplLogMessage.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {replit.goval.api.ReplLogMessage} message ReplLogMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplLogMessage.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.replId);
                        if (message.logLine != null && Object.hasOwnProperty.call(message, "logLine"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.logLine);
                        if (message.userName != null && Object.hasOwnProperty.call(message, "userName"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.userName);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplLogMessage message, length delimited. Does not implicitly {@link replit.goval.api.ReplLogMessage.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {replit.goval.api.ReplLogMessage} message ReplLogMessage message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplLogMessage.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplLogMessage message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplLogMessage} ReplLogMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplLogMessage.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplLogMessage();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.replId = reader.string();
                                break;
                            case 3:
                                message.logLine = reader.string();
                                break;
                            case 4:
                                message.userName = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplLogMessage message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplLogMessage} ReplLogMessage
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplLogMessage.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplLogMessage message.
                     * @function verify
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplLogMessage.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.logLine != null && message.hasOwnProperty("logLine"))
                            if (!$util.isString(message.logLine))
                                return "logLine: string expected";
                        if (message.userName != null && message.hasOwnProperty("userName"))
                            if (!$util.isString(message.userName))
                                return "userName: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReplLogMessage message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplLogMessage} ReplLogMessage
                     */
                    ReplLogMessage.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplLogMessage)
                            return object;
                        var message = new $root.replit.goval.api.ReplLogMessage();
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".replit.goval.api.ReplLogMessage.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.logLine != null)
                            message.logLine = String(object.logLine);
                        if (object.userName != null)
                            message.userName = String(object.userName);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplLogMessage message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplLogMessage
                     * @static
                     * @param {replit.goval.api.ReplLogMessage} message ReplLogMessage
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplLogMessage.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.timestamp = null;
                            object.replId = "";
                            object.logLine = "";
                            object.userName = "";
                        }
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.logLine != null && message.hasOwnProperty("logLine"))
                            object.logLine = message.logLine;
                        if (message.userName != null && message.hasOwnProperty("userName"))
                            object.userName = message.userName;
                        return object;
                    };
    
                    /**
                     * Converts this ReplLogMessage to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplLogMessage
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplLogMessage.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplLogMessage;
                })();
    
                api.UserEvent = (function() {
    
                    /**
                     * Properties of a UserEvent.
                     * @memberof replit.goval.api
                     * @interface IUserEvent
                     * @property {string|null} [eventName] UserEvent eventName
                     * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [eventData] UserEvent eventData
                     * @property {number|null} [version] UserEvent version
                     */
    
                    /**
                     * Constructs a new UserEvent.
                     * @memberof replit.goval.api
                     * @classdesc Represents a UserEvent.
                     * @constructor
                     * @param {replit.goval.api.IUserEvent=} [properties] Properties to set
                     */
                    function UserEvent(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UserEvent eventName.
                     * @member {string} eventName
                     * @memberof replit.goval.api.UserEvent
                     * @instance
                     */
                    UserEvent.prototype.eventName = "";
    
                    /**
                     * UserEvent eventData.
                     * @member {google.protobuf.Struct|null|undefined} eventData
                     * @memberof replit.goval.api.UserEvent
                     * @instance
                     */
                    UserEvent.prototype.eventData = null;
    
                    /**
                     * UserEvent version.
                     * @member {number} version
                     * @memberof replit.goval.api.UserEvent
                     * @instance
                     */
                    UserEvent.prototype.version = 0;
    
                    /**
                     * Creates a new UserEvent instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {replit.goval.api.IUserEvent=} [properties] Properties to set
                     * @returns {replit.goval.api.UserEvent} UserEvent instance
                     */
                    UserEvent.create = function create(properties) {
                        return UserEvent.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified UserEvent message. Does not implicitly {@link replit.goval.api.UserEvent.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {replit.goval.api.UserEvent} message UserEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UserEvent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.eventName != null && Object.hasOwnProperty.call(message, "eventName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventName);
                        if (message.eventData != null && Object.hasOwnProperty.call(message, "eventData"))
                            $root.google.protobuf.Struct.encode(message.eventData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.version);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UserEvent message, length delimited. Does not implicitly {@link replit.goval.api.UserEvent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {replit.goval.api.UserEvent} message UserEvent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UserEvent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a UserEvent message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.UserEvent} UserEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UserEvent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.UserEvent();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.eventName = reader.string();
                                break;
                            case 2:
                                message.eventData = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.version = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a UserEvent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.UserEvent} UserEvent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UserEvent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a UserEvent message.
                     * @function verify
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UserEvent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.eventName != null && message.hasOwnProperty("eventName"))
                            if (!$util.isString(message.eventName))
                                return "eventName: string expected";
                        if (message.eventData != null && message.hasOwnProperty("eventData")) {
                            var error = $root.google.protobuf.Struct.verify(message.eventData);
                            if (error)
                                return "eventData." + error;
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version))
                                return "version: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a UserEvent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.UserEvent} UserEvent
                     */
                    UserEvent.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.UserEvent)
                            return object;
                        var message = new $root.replit.goval.api.UserEvent();
                        if (object.eventName != null)
                            message.eventName = String(object.eventName);
                        if (object.eventData != null) {
                            if (typeof object.eventData !== "object")
                                throw TypeError(".replit.goval.api.UserEvent.eventData: object expected");
                            message.eventData = $root.google.protobuf.Struct.fromObject(object.eventData);
                        }
                        if (object.version != null)
                            message.version = object.version | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a UserEvent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.UserEvent
                     * @static
                     * @param {replit.goval.api.UserEvent} message UserEvent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UserEvent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.eventName = "";
                            object.eventData = null;
                            object.version = 0;
                        }
                        if (message.eventName != null && message.hasOwnProperty("eventName"))
                            object.eventName = message.eventName;
                        if (message.eventData != null && message.hasOwnProperty("eventData"))
                            object.eventData = $root.google.protobuf.Struct.toObject(message.eventData, options);
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        return object;
                    };
    
                    /**
                     * Converts this UserEvent to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.UserEvent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UserEvent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UserEvent;
                })();
    
                api.ReplToken = (function() {
    
                    /**
                     * Properties of a ReplToken.
                     * @memberof replit.goval.api
                     * @interface IReplToken
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [iat] ReplToken iat
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [exp] ReplToken exp
                     * @property {string|null} [salt] ReplToken salt
                     * @property {string|null} [cluster] ReplToken cluster
                     * @property {replit.goval.api.repl.Persistence|null} [persistence] ReplToken persistence
                     * @property {replit.goval.api.repl.Repl|replit.goval.api.repl.IRepl|null} [repl] ReplToken repl
                     * @property {replit.goval.api.ReplToken.ReplID|replit.goval.api.ReplToken.IReplID|null} [id] ReplToken id
                     * @property {replit.goval.api.ReplToken.ClassroomMetadata|replit.goval.api.ReplToken.IClassroomMetadata|null} [classroom] ReplToken classroom
                     * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [resourceLimits] ReplToken resourceLimits
                     * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [interactiveResourceLimits] ReplToken interactiveResourceLimits
                     * @property {replit.goval.api.ReplToken.WireFormat|null} [format] ReplToken format
                     * @property {replit.goval.api.ReplToken.Presenced|replit.goval.api.ReplToken.IPresenced|null} [presenced] ReplToken presenced
                     * @property {Array.<string>|null} [flags] ReplToken flags
                     * @property {replit.goval.api.repl.Permissions|replit.goval.api.repl.IPermissions|null} [permissions] ReplToken permissions
                     * @property {Array.<replit.goval.api.features.Feature|replit.goval.api.features.IFeature>|null} [features] ReplToken features
                     */
    
                    /**
                     * Constructs a new ReplToken.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplToken.
                     * @constructor
                     * @param {replit.goval.api.IReplToken=} [properties] Properties to set
                     */
                    function ReplToken(properties) {
                        this.flags = [];
                        this.features = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplToken iat.
                     * @member {google.protobuf.Timestamp|null|undefined} iat
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.iat = null;
    
                    /**
                     * ReplToken exp.
                     * @member {google.protobuf.Timestamp|null|undefined} exp
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.exp = null;
    
                    /**
                     * ReplToken salt.
                     * @member {string} salt
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.salt = "";
    
                    /**
                     * ReplToken cluster.
                     * @member {string} cluster
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.cluster = "";
    
                    /**
                     * ReplToken persistence.
                     * @member {replit.goval.api.repl.Persistence} persistence
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.persistence = 0;
    
                    /**
                     * ReplToken repl.
                     * @member {replit.goval.api.repl.Repl|null|undefined} repl
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.repl = null;
    
                    /**
                     * ReplToken id.
                     * @member {replit.goval.api.ReplToken.ReplID|null|undefined} id
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.id = null;
    
                    /**
                     * ReplToken classroom.
                     * @member {replit.goval.api.ReplToken.ClassroomMetadata|null|undefined} classroom
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.classroom = null;
    
                    /**
                     * ReplToken resourceLimits.
                     * @member {replit.goval.api.repl.ResourceLimits|null|undefined} resourceLimits
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.resourceLimits = null;
    
                    /**
                     * ReplToken interactiveResourceLimits.
                     * @member {replit.goval.api.repl.ResourceLimits|null|undefined} interactiveResourceLimits
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.interactiveResourceLimits = null;
    
                    /**
                     * ReplToken format.
                     * @member {replit.goval.api.ReplToken.WireFormat} format
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.format = 0;
    
                    /**
                     * ReplToken presenced.
                     * @member {replit.goval.api.ReplToken.Presenced|null|undefined} presenced
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.presenced = null;
    
                    /**
                     * ReplToken flags.
                     * @member {Array.<string>} flags
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.flags = $util.emptyArray;
    
                    /**
                     * ReplToken permissions.
                     * @member {replit.goval.api.repl.Permissions|null|undefined} permissions
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.permissions = null;
    
                    /**
                     * ReplToken features.
                     * @member {Array.<replit.goval.api.features.Feature>} features
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    ReplToken.prototype.features = $util.emptyArray;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ReplToken metadata.
                     * @member {"repl"|"id"|"classroom"|undefined} metadata
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     */
                    Object.defineProperty(ReplToken.prototype, "metadata", {
                        get: $util.oneOfGetter($oneOfFields = ["repl", "id", "classroom"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ReplToken instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {replit.goval.api.IReplToken=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplToken} ReplToken instance
                     */
                    ReplToken.create = function create(properties) {
                        return ReplToken.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplToken message. Does not implicitly {@link replit.goval.api.ReplToken.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {replit.goval.api.ReplToken} message ReplToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplToken.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.iat != null && Object.hasOwnProperty.call(message, "iat"))
                            $root.google.protobuf.Timestamp.encode(message.iat, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.exp != null && Object.hasOwnProperty.call(message, "exp"))
                            $root.google.protobuf.Timestamp.encode(message.exp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.salt != null && Object.hasOwnProperty.call(message, "salt"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.salt);
                        if (message.cluster != null && Object.hasOwnProperty.call(message, "cluster"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cluster);
                        if (message.persistence != null && Object.hasOwnProperty.call(message, "persistence"))
                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.persistence);
                        if (message.repl != null && Object.hasOwnProperty.call(message, "repl"))
                            $root.replit.goval.api.repl.Repl.encode(message.repl, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            $root.replit.goval.api.ReplToken.ReplID.encode(message.id, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.classroom != null && Object.hasOwnProperty.call(message, "classroom"))
                            $root.replit.goval.api.ReplToken.ClassroomMetadata.encode(message.classroom, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.resourceLimits != null && Object.hasOwnProperty.call(message, "resourceLimits"))
                            $root.replit.goval.api.repl.ResourceLimits.encode(message.resourceLimits, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.format);
                        if (message.presenced != null && Object.hasOwnProperty.call(message, "presenced"))
                            $root.replit.goval.api.ReplToken.Presenced.encode(message.presenced, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                        if (message.flags != null && message.flags.length)
                            for (var i = 0; i < message.flags.length; ++i)
                                writer.uint32(/* id 14, wireType 2 =*/114).string(message.flags[i]);
                        if (message.permissions != null && Object.hasOwnProperty.call(message, "permissions"))
                            $root.replit.goval.api.repl.Permissions.encode(message.permissions, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                        if (message.features != null && message.features.length)
                            for (var i = 0; i < message.features.length; ++i)
                                $root.replit.goval.api.features.Feature.encode(message.features[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                        if (message.interactiveResourceLimits != null && Object.hasOwnProperty.call(message, "interactiveResourceLimits"))
                            $root.replit.goval.api.repl.ResourceLimits.encode(message.interactiveResourceLimits, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplToken message, length delimited. Does not implicitly {@link replit.goval.api.ReplToken.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {replit.goval.api.ReplToken} message ReplToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplToken.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplToken message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplToken} ReplToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplToken.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplToken();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.iat = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.exp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.salt = reader.string();
                                break;
                            case 4:
                                message.cluster = reader.string();
                                break;
                            case 6:
                                message.persistence = reader.int32();
                                break;
                            case 7:
                                message.repl = $root.replit.goval.api.repl.Repl.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.id = $root.replit.goval.api.ReplToken.ReplID.decode(reader, reader.uint32());
                                break;
                            case 9:
                                message.classroom = $root.replit.goval.api.ReplToken.ClassroomMetadata.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                break;
                            case 17:
                                message.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.format = reader.int32();
                                break;
                            case 13:
                                message.presenced = $root.replit.goval.api.ReplToken.Presenced.decode(reader, reader.uint32());
                                break;
                            case 14:
                                if (!(message.flags && message.flags.length))
                                    message.flags = [];
                                message.flags.push(reader.string());
                                break;
                            case 15:
                                message.permissions = $root.replit.goval.api.repl.Permissions.decode(reader, reader.uint32());
                                break;
                            case 16:
                                if (!(message.features && message.features.length))
                                    message.features = [];
                                message.features.push($root.replit.goval.api.features.Feature.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplToken message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplToken} ReplToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplToken.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplToken message.
                     * @function verify
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplToken.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.iat != null && message.hasOwnProperty("iat")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.iat);
                            if (error)
                                return "iat." + error;
                        }
                        if (message.exp != null && message.hasOwnProperty("exp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.exp);
                            if (error)
                                return "exp." + error;
                        }
                        if (message.salt != null && message.hasOwnProperty("salt"))
                            if (!$util.isString(message.salt))
                                return "salt: string expected";
                        if (message.cluster != null && message.hasOwnProperty("cluster"))
                            if (!$util.isString(message.cluster))
                                return "cluster: string expected";
                        if (message.persistence != null && message.hasOwnProperty("persistence"))
                            switch (message.persistence) {
                            default:
                                return "persistence: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.repl != null && message.hasOwnProperty("repl")) {
                            properties.metadata = 1;
                            {
                                var error = $root.replit.goval.api.repl.Repl.verify(message.repl);
                                if (error)
                                    return "repl." + error;
                            }
                        }
                        if (message.id != null && message.hasOwnProperty("id")) {
                            if (properties.metadata === 1)
                                return "metadata: multiple values";
                            properties.metadata = 1;
                            {
                                var error = $root.replit.goval.api.ReplToken.ReplID.verify(message.id);
                                if (error)
                                    return "id." + error;
                            }
                        }
                        if (message.classroom != null && message.hasOwnProperty("classroom")) {
                            if (properties.metadata === 1)
                                return "metadata: multiple values";
                            properties.metadata = 1;
                            {
                                var error = $root.replit.goval.api.ReplToken.ClassroomMetadata.verify(message.classroom);
                                if (error)
                                    return "classroom." + error;
                            }
                        }
                        if (message.resourceLimits != null && message.hasOwnProperty("resourceLimits")) {
                            var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.resourceLimits);
                            if (error)
                                return "resourceLimits." + error;
                        }
                        if (message.interactiveResourceLimits != null && message.hasOwnProperty("interactiveResourceLimits")) {
                            var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.interactiveResourceLimits);
                            if (error)
                                return "interactiveResourceLimits." + error;
                        }
                        if (message.format != null && message.hasOwnProperty("format"))
                            switch (message.format) {
                            default:
                                return "format: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.presenced != null && message.hasOwnProperty("presenced")) {
                            var error = $root.replit.goval.api.ReplToken.Presenced.verify(message.presenced);
                            if (error)
                                return "presenced." + error;
                        }
                        if (message.flags != null && message.hasOwnProperty("flags")) {
                            if (!Array.isArray(message.flags))
                                return "flags: array expected";
                            for (var i = 0; i < message.flags.length; ++i)
                                if (!$util.isString(message.flags[i]))
                                    return "flags: string[] expected";
                        }
                        if (message.permissions != null && message.hasOwnProperty("permissions")) {
                            var error = $root.replit.goval.api.repl.Permissions.verify(message.permissions);
                            if (error)
                                return "permissions." + error;
                        }
                        if (message.features != null && message.hasOwnProperty("features")) {
                            if (!Array.isArray(message.features))
                                return "features: array expected";
                            for (var i = 0; i < message.features.length; ++i) {
                                var error = $root.replit.goval.api.features.Feature.verify(message.features[i]);
                                if (error)
                                    return "features." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReplToken message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplToken} ReplToken
                     */
                    ReplToken.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplToken)
                            return object;
                        var message = new $root.replit.goval.api.ReplToken();
                        if (object.iat != null) {
                            if (typeof object.iat !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.iat: object expected");
                            message.iat = $root.google.protobuf.Timestamp.fromObject(object.iat);
                        }
                        if (object.exp != null) {
                            if (typeof object.exp !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.exp: object expected");
                            message.exp = $root.google.protobuf.Timestamp.fromObject(object.exp);
                        }
                        if (object.salt != null)
                            message.salt = String(object.salt);
                        if (object.cluster != null)
                            message.cluster = String(object.cluster);
                        switch (object.persistence) {
                        case "PERSISTENT":
                        case 0:
                            message.persistence = 0;
                            break;
                        case "EPHEMERAL":
                        case 1:
                            message.persistence = 1;
                            break;
                        case "NONE":
                        case 2:
                            message.persistence = 2;
                            break;
                        case "READ_ONLY":
                        case 3:
                            message.persistence = 3;
                            break;
                        }
                        if (object.repl != null) {
                            if (typeof object.repl !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.repl: object expected");
                            message.repl = $root.replit.goval.api.repl.Repl.fromObject(object.repl);
                        }
                        if (object.id != null) {
                            if (typeof object.id !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.id: object expected");
                            message.id = $root.replit.goval.api.ReplToken.ReplID.fromObject(object.id);
                        }
                        if (object.classroom != null) {
                            if (typeof object.classroom !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.classroom: object expected");
                            message.classroom = $root.replit.goval.api.ReplToken.ClassroomMetadata.fromObject(object.classroom);
                        }
                        if (object.resourceLimits != null) {
                            if (typeof object.resourceLimits !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.resourceLimits: object expected");
                            message.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.resourceLimits);
                        }
                        if (object.interactiveResourceLimits != null) {
                            if (typeof object.interactiveResourceLimits !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.interactiveResourceLimits: object expected");
                            message.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.interactiveResourceLimits);
                        }
                        switch (object.format) {
                        case "PROTOBUF":
                        case 0:
                            message.format = 0;
                            break;
                        case "JSON":
                        case 1:
                            message.format = 1;
                            break;
                        }
                        if (object.presenced != null) {
                            if (typeof object.presenced !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.presenced: object expected");
                            message.presenced = $root.replit.goval.api.ReplToken.Presenced.fromObject(object.presenced);
                        }
                        if (object.flags) {
                            if (!Array.isArray(object.flags))
                                throw TypeError(".replit.goval.api.ReplToken.flags: array expected");
                            message.flags = [];
                            for (var i = 0; i < object.flags.length; ++i)
                                message.flags[i] = String(object.flags[i]);
                        }
                        if (object.permissions != null) {
                            if (typeof object.permissions !== "object")
                                throw TypeError(".replit.goval.api.ReplToken.permissions: object expected");
                            message.permissions = $root.replit.goval.api.repl.Permissions.fromObject(object.permissions);
                        }
                        if (object.features) {
                            if (!Array.isArray(object.features))
                                throw TypeError(".replit.goval.api.ReplToken.features: array expected");
                            message.features = [];
                            for (var i = 0; i < object.features.length; ++i) {
                                if (typeof object.features[i] !== "object")
                                    throw TypeError(".replit.goval.api.ReplToken.features: object expected");
                                message.features[i] = $root.replit.goval.api.features.Feature.fromObject(object.features[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplToken message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplToken
                     * @static
                     * @param {replit.goval.api.ReplToken} message ReplToken
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplToken.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.flags = [];
                            object.features = [];
                        }
                        if (options.defaults) {
                            object.iat = null;
                            object.exp = null;
                            object.salt = "";
                            object.cluster = "";
                            object.persistence = options.enums === String ? "PERSISTENT" : 0;
                            object.resourceLimits = null;
                            object.format = options.enums === String ? "PROTOBUF" : 0;
                            object.presenced = null;
                            object.permissions = null;
                            object.interactiveResourceLimits = null;
                        }
                        if (message.iat != null && message.hasOwnProperty("iat"))
                            object.iat = $root.google.protobuf.Timestamp.toObject(message.iat, options);
                        if (message.exp != null && message.hasOwnProperty("exp"))
                            object.exp = $root.google.protobuf.Timestamp.toObject(message.exp, options);
                        if (message.salt != null && message.hasOwnProperty("salt"))
                            object.salt = message.salt;
                        if (message.cluster != null && message.hasOwnProperty("cluster"))
                            object.cluster = message.cluster;
                        if (message.persistence != null && message.hasOwnProperty("persistence"))
                            object.persistence = options.enums === String ? $root.replit.goval.api.repl.Persistence[message.persistence] : message.persistence;
                        if (message.repl != null && message.hasOwnProperty("repl")) {
                            object.repl = $root.replit.goval.api.repl.Repl.toObject(message.repl, options);
                            if (options.oneofs)
                                object.metadata = "repl";
                        }
                        if (message.id != null && message.hasOwnProperty("id")) {
                            object.id = $root.replit.goval.api.ReplToken.ReplID.toObject(message.id, options);
                            if (options.oneofs)
                                object.metadata = "id";
                        }
                        if (message.classroom != null && message.hasOwnProperty("classroom")) {
                            object.classroom = $root.replit.goval.api.ReplToken.ClassroomMetadata.toObject(message.classroom, options);
                            if (options.oneofs)
                                object.metadata = "classroom";
                        }
                        if (message.resourceLimits != null && message.hasOwnProperty("resourceLimits"))
                            object.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.resourceLimits, options);
                        if (message.format != null && message.hasOwnProperty("format"))
                            object.format = options.enums === String ? $root.replit.goval.api.ReplToken.WireFormat[message.format] : message.format;
                        if (message.presenced != null && message.hasOwnProperty("presenced"))
                            object.presenced = $root.replit.goval.api.ReplToken.Presenced.toObject(message.presenced, options);
                        if (message.flags && message.flags.length) {
                            object.flags = [];
                            for (var j = 0; j < message.flags.length; ++j)
                                object.flags[j] = message.flags[j];
                        }
                        if (message.permissions != null && message.hasOwnProperty("permissions"))
                            object.permissions = $root.replit.goval.api.repl.Permissions.toObject(message.permissions, options);
                        if (message.features && message.features.length) {
                            object.features = [];
                            for (var j = 0; j < message.features.length; ++j)
                                object.features[j] = $root.replit.goval.api.features.Feature.toObject(message.features[j], options);
                        }
                        if (message.interactiveResourceLimits != null && message.hasOwnProperty("interactiveResourceLimits"))
                            object.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.interactiveResourceLimits, options);
                        return object;
                    };
    
                    /**
                     * Converts this ReplToken to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplToken
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplToken.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    ReplToken.ClassroomMetadata = (function() {
    
                        /**
                         * Properties of a ClassroomMetadata.
                         * @memberof replit.goval.api.ReplToken
                         * @interface IClassroomMetadata
                         * @property {string|null} [id] ClassroomMetadata id
                         * @property {string|null} [language] ClassroomMetadata language
                         */
    
                        /**
                         * Constructs a new ClassroomMetadata.
                         * @memberof replit.goval.api.ReplToken
                         * @classdesc Represents a ClassroomMetadata.
                         * @constructor
                         * @param {replit.goval.api.ReplToken.IClassroomMetadata=} [properties] Properties to set
                         */
                        function ClassroomMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClassroomMetadata id.
                         * @member {string} id
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @instance
                         */
                        ClassroomMetadata.prototype.id = "";
    
                        /**
                         * ClassroomMetadata language.
                         * @member {string} language
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @instance
                         */
                        ClassroomMetadata.prototype.language = "";
    
                        /**
                         * Creates a new ClassroomMetadata instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {replit.goval.api.ReplToken.IClassroomMetadata=} [properties] Properties to set
                         * @returns {replit.goval.api.ReplToken.ClassroomMetadata} ClassroomMetadata instance
                         */
                        ClassroomMetadata.create = function create(properties) {
                            return ClassroomMetadata.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified ClassroomMetadata message. Does not implicitly {@link replit.goval.api.ReplToken.ClassroomMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {replit.goval.api.ReplToken.ClassroomMetadata} message ClassroomMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassroomMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClassroomMetadata message, length delimited. Does not implicitly {@link replit.goval.api.ReplToken.ClassroomMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {replit.goval.api.ReplToken.ClassroomMetadata} message ClassroomMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClassroomMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClassroomMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.ReplToken.ClassroomMetadata} ClassroomMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassroomMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplToken.ClassroomMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.language = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClassroomMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.ReplToken.ClassroomMetadata} ClassroomMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClassroomMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClassroomMetadata message.
                         * @function verify
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClassroomMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ClassroomMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.ReplToken.ClassroomMetadata} ClassroomMetadata
                         */
                        ClassroomMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.ReplToken.ClassroomMetadata)
                                return object;
                            var message = new $root.replit.goval.api.ReplToken.ClassroomMetadata();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.language != null)
                                message.language = String(object.language);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClassroomMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @static
                         * @param {replit.goval.api.ReplToken.ClassroomMetadata} message ClassroomMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClassroomMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.language = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            return object;
                        };
    
                        /**
                         * Converts this ClassroomMetadata to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.ReplToken.ClassroomMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClassroomMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ClassroomMetadata;
                    })();
    
                    ReplToken.ReplID = (function() {
    
                        /**
                         * Properties of a ReplID.
                         * @memberof replit.goval.api.ReplToken
                         * @interface IReplID
                         * @property {string|null} [id] ReplID id
                         * @property {string|null} [sourceRepl] ReplID sourceRepl
                         */
    
                        /**
                         * Constructs a new ReplID.
                         * @memberof replit.goval.api.ReplToken
                         * @classdesc Represents a ReplID.
                         * @constructor
                         * @param {replit.goval.api.ReplToken.IReplID=} [properties] Properties to set
                         */
                        function ReplID(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReplID id.
                         * @member {string} id
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @instance
                         */
                        ReplID.prototype.id = "";
    
                        /**
                         * ReplID sourceRepl.
                         * @member {string} sourceRepl
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @instance
                         */
                        ReplID.prototype.sourceRepl = "";
    
                        /**
                         * Creates a new ReplID instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {replit.goval.api.ReplToken.IReplID=} [properties] Properties to set
                         * @returns {replit.goval.api.ReplToken.ReplID} ReplID instance
                         */
                        ReplID.create = function create(properties) {
                            return ReplID.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified ReplID message. Does not implicitly {@link replit.goval.api.ReplToken.ReplID.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {replit.goval.api.ReplToken.ReplID} message ReplID message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplID.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.sourceRepl != null && Object.hasOwnProperty.call(message, "sourceRepl"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceRepl);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReplID message, length delimited. Does not implicitly {@link replit.goval.api.ReplToken.ReplID.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {replit.goval.api.ReplToken.ReplID} message ReplID message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReplID.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReplID message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.ReplToken.ReplID} ReplID
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplID.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplToken.ReplID();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.sourceRepl = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReplID message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.ReplToken.ReplID} ReplID
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReplID.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReplID message.
                         * @function verify
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReplID.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.sourceRepl != null && message.hasOwnProperty("sourceRepl"))
                                if (!$util.isString(message.sourceRepl))
                                    return "sourceRepl: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReplID message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.ReplToken.ReplID} ReplID
                         */
                        ReplID.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.ReplToken.ReplID)
                                return object;
                            var message = new $root.replit.goval.api.ReplToken.ReplID();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.sourceRepl != null)
                                message.sourceRepl = String(object.sourceRepl);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReplID message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @static
                         * @param {replit.goval.api.ReplToken.ReplID} message ReplID
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReplID.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.sourceRepl = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.sourceRepl != null && message.hasOwnProperty("sourceRepl"))
                                object.sourceRepl = message.sourceRepl;
                            return object;
                        };
    
                        /**
                         * Converts this ReplID to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.ReplToken.ReplID
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReplID.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ReplID;
                    })();
    
                    /**
                     * WireFormat enum.
                     * @name replit.goval.api.ReplToken.WireFormat
                     * @enum {number}
                     * @property {number} PROTOBUF=0 PROTOBUF value
                     * @property {number} JSON=1 JSON value
                     */
                    ReplToken.WireFormat = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PROTOBUF"] = 0;
                        values[valuesById[1] = "JSON"] = 1;
                        return values;
                    })();
    
                    ReplToken.Presenced = (function() {
    
                        /**
                         * Properties of a Presenced.
                         * @memberof replit.goval.api.ReplToken
                         * @interface IPresenced
                         * @property {number|null} [bearerID] Presenced bearerID
                         * @property {string|null} [bearerName] Presenced bearerName
                         */
    
                        /**
                         * Constructs a new Presenced.
                         * @memberof replit.goval.api.ReplToken
                         * @classdesc Represents a Presenced.
                         * @constructor
                         * @param {replit.goval.api.ReplToken.IPresenced=} [properties] Properties to set
                         */
                        function Presenced(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Presenced bearerID.
                         * @member {number} bearerID
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @instance
                         */
                        Presenced.prototype.bearerID = 0;
    
                        /**
                         * Presenced bearerName.
                         * @member {string} bearerName
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @instance
                         */
                        Presenced.prototype.bearerName = "";
    
                        /**
                         * Creates a new Presenced instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {replit.goval.api.ReplToken.IPresenced=} [properties] Properties to set
                         * @returns {replit.goval.api.ReplToken.Presenced} Presenced instance
                         */
                        Presenced.create = function create(properties) {
                            return Presenced.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Presenced message. Does not implicitly {@link replit.goval.api.ReplToken.Presenced.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {replit.goval.api.ReplToken.Presenced} message Presenced message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Presenced.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.bearerID != null && Object.hasOwnProperty.call(message, "bearerID"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bearerID);
                            if (message.bearerName != null && Object.hasOwnProperty.call(message, "bearerName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.bearerName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Presenced message, length delimited. Does not implicitly {@link replit.goval.api.ReplToken.Presenced.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {replit.goval.api.ReplToken.Presenced} message Presenced message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Presenced.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Presenced message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.ReplToken.Presenced} Presenced
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Presenced.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplToken.Presenced();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.bearerID = reader.uint32();
                                    break;
                                case 2:
                                    message.bearerName = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Presenced message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.ReplToken.Presenced} Presenced
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Presenced.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Presenced message.
                         * @function verify
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Presenced.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.bearerID != null && message.hasOwnProperty("bearerID"))
                                if (!$util.isInteger(message.bearerID))
                                    return "bearerID: integer expected";
                            if (message.bearerName != null && message.hasOwnProperty("bearerName"))
                                if (!$util.isString(message.bearerName))
                                    return "bearerName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Presenced message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.ReplToken.Presenced} Presenced
                         */
                        Presenced.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.ReplToken.Presenced)
                                return object;
                            var message = new $root.replit.goval.api.ReplToken.Presenced();
                            if (object.bearerID != null)
                                message.bearerID = object.bearerID >>> 0;
                            if (object.bearerName != null)
                                message.bearerName = String(object.bearerName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Presenced message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @static
                         * @param {replit.goval.api.ReplToken.Presenced} message Presenced
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Presenced.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.bearerID = 0;
                                object.bearerName = "";
                            }
                            if (message.bearerID != null && message.hasOwnProperty("bearerID"))
                                object.bearerID = message.bearerID;
                            if (message.bearerName != null && message.hasOwnProperty("bearerName"))
                                object.bearerName = message.bearerName;
                            return object;
                        };
    
                        /**
                         * Converts this Presenced to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.ReplToken.Presenced
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Presenced.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Presenced;
                    })();
    
                    return ReplToken;
                })();
    
                api.TLSCertificate = (function() {
    
                    /**
                     * Properties of a TLSCertificate.
                     * @memberof replit.goval.api
                     * @interface ITLSCertificate
                     * @property {string|null} [domain] TLSCertificate domain
                     * @property {Uint8Array|null} [cert] TLSCertificate cert
                     */
    
                    /**
                     * Constructs a new TLSCertificate.
                     * @memberof replit.goval.api
                     * @classdesc Represents a TLSCertificate.
                     * @constructor
                     * @param {replit.goval.api.ITLSCertificate=} [properties] Properties to set
                     */
                    function TLSCertificate(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TLSCertificate domain.
                     * @member {string} domain
                     * @memberof replit.goval.api.TLSCertificate
                     * @instance
                     */
                    TLSCertificate.prototype.domain = "";
    
                    /**
                     * TLSCertificate cert.
                     * @member {Uint8Array} cert
                     * @memberof replit.goval.api.TLSCertificate
                     * @instance
                     */
                    TLSCertificate.prototype.cert = $util.newBuffer([]);
    
                    /**
                     * Creates a new TLSCertificate instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {replit.goval.api.ITLSCertificate=} [properties] Properties to set
                     * @returns {replit.goval.api.TLSCertificate} TLSCertificate instance
                     */
                    TLSCertificate.create = function create(properties) {
                        return TLSCertificate.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified TLSCertificate message. Does not implicitly {@link replit.goval.api.TLSCertificate.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {replit.goval.api.TLSCertificate} message TLSCertificate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TLSCertificate.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);
                        if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.cert);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TLSCertificate message, length delimited. Does not implicitly {@link replit.goval.api.TLSCertificate.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {replit.goval.api.TLSCertificate} message TLSCertificate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TLSCertificate.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TLSCertificate message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.TLSCertificate} TLSCertificate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TLSCertificate.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.TLSCertificate();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.domain = reader.string();
                                break;
                            case 2:
                                message.cert = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TLSCertificate message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.TLSCertificate} TLSCertificate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TLSCertificate.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TLSCertificate message.
                     * @function verify
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TLSCertificate.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            if (!$util.isString(message.domain))
                                return "domain: string expected";
                        if (message.cert != null && message.hasOwnProperty("cert"))
                            if (!(message.cert && typeof message.cert.length === "number" || $util.isString(message.cert)))
                                return "cert: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a TLSCertificate message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.TLSCertificate} TLSCertificate
                     */
                    TLSCertificate.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.TLSCertificate)
                            return object;
                        var message = new $root.replit.goval.api.TLSCertificate();
                        if (object.domain != null)
                            message.domain = String(object.domain);
                        if (object.cert != null)
                            if (typeof object.cert === "string")
                                $util.base64.decode(object.cert, message.cert = $util.newBuffer($util.base64.length(object.cert)), 0);
                            else if (object.cert.length)
                                message.cert = object.cert;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TLSCertificate message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.TLSCertificate
                     * @static
                     * @param {replit.goval.api.TLSCertificate} message TLSCertificate
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TLSCertificate.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.domain = "";
                            if (options.bytes === String)
                                object.cert = "";
                            else {
                                object.cert = [];
                                if (options.bytes !== Array)
                                    object.cert = $util.newBuffer(object.cert);
                            }
                        }
                        if (message.domain != null && message.hasOwnProperty("domain"))
                            object.domain = message.domain;
                        if (message.cert != null && message.hasOwnProperty("cert"))
                            object.cert = options.bytes === String ? $util.base64.encode(message.cert, 0, message.cert.length) : options.bytes === Array ? Array.prototype.slice.call(message.cert) : message.cert;
                        return object;
                    };
    
                    /**
                     * Converts this TLSCertificate to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.TLSCertificate
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TLSCertificate.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return TLSCertificate;
                })();
    
                api.ReplTransfer = (function() {
    
                    /**
                     * Properties of a ReplTransfer.
                     * @memberof replit.goval.api
                     * @interface IReplTransfer
                     * @property {replit.goval.api.repl.Repl|replit.goval.api.repl.IRepl|null} [repl] ReplTransfer repl
                     * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [replLimits] ReplTransfer replLimits
                     * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [userLimits] ReplTransfer userLimits
                     * @property {Array.<string>|null} [customDomains] ReplTransfer customDomains
                     * @property {Array.<replit.goval.api.TLSCertificate|replit.goval.api.ITLSCertificate>|null} [certificates] ReplTransfer certificates
                     * @property {Array.<string>|null} [flags] ReplTransfer flags
                     */
    
                    /**
                     * Constructs a new ReplTransfer.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ReplTransfer.
                     * @constructor
                     * @param {replit.goval.api.IReplTransfer=} [properties] Properties to set
                     */
                    function ReplTransfer(properties) {
                        this.customDomains = [];
                        this.certificates = [];
                        this.flags = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReplTransfer repl.
                     * @member {replit.goval.api.repl.Repl|null|undefined} repl
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.repl = null;
    
                    /**
                     * ReplTransfer replLimits.
                     * @member {replit.goval.api.repl.ResourceLimits|null|undefined} replLimits
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.replLimits = null;
    
                    /**
                     * ReplTransfer userLimits.
                     * @member {replit.goval.api.repl.ResourceLimits|null|undefined} userLimits
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.userLimits = null;
    
                    /**
                     * ReplTransfer customDomains.
                     * @member {Array.<string>} customDomains
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.customDomains = $util.emptyArray;
    
                    /**
                     * ReplTransfer certificates.
                     * @member {Array.<replit.goval.api.TLSCertificate>} certificates
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.certificates = $util.emptyArray;
    
                    /**
                     * ReplTransfer flags.
                     * @member {Array.<string>} flags
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     */
                    ReplTransfer.prototype.flags = $util.emptyArray;
    
                    /**
                     * Creates a new ReplTransfer instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {replit.goval.api.IReplTransfer=} [properties] Properties to set
                     * @returns {replit.goval.api.ReplTransfer} ReplTransfer instance
                     */
                    ReplTransfer.create = function create(properties) {
                        return ReplTransfer.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ReplTransfer message. Does not implicitly {@link replit.goval.api.ReplTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {replit.goval.api.ReplTransfer} message ReplTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplTransfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.repl != null && Object.hasOwnProperty.call(message, "repl"))
                            $root.replit.goval.api.repl.Repl.encode(message.repl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.replLimits != null && Object.hasOwnProperty.call(message, "replLimits"))
                            $root.replit.goval.api.repl.ResourceLimits.encode(message.replLimits, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.userLimits != null && Object.hasOwnProperty.call(message, "userLimits"))
                            $root.replit.goval.api.repl.ResourceLimits.encode(message.userLimits, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.customDomains != null && message.customDomains.length)
                            for (var i = 0; i < message.customDomains.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.customDomains[i]);
                        if (message.certificates != null && message.certificates.length)
                            for (var i = 0; i < message.certificates.length; ++i)
                                $root.replit.goval.api.TLSCertificate.encode(message.certificates[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.flags != null && message.flags.length)
                            for (var i = 0; i < message.flags.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.flags[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReplTransfer message, length delimited. Does not implicitly {@link replit.goval.api.ReplTransfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {replit.goval.api.ReplTransfer} message ReplTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReplTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReplTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ReplTransfer} ReplTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplTransfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ReplTransfer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.repl = $root.replit.goval.api.repl.Repl.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.replLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.userLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.customDomains && message.customDomains.length))
                                    message.customDomains = [];
                                message.customDomains.push(reader.string());
                                break;
                            case 5:
                                if (!(message.certificates && message.certificates.length))
                                    message.certificates = [];
                                message.certificates.push($root.replit.goval.api.TLSCertificate.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.flags && message.flags.length))
                                    message.flags = [];
                                message.flags.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReplTransfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ReplTransfer} ReplTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReplTransfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReplTransfer message.
                     * @function verify
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReplTransfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.repl != null && message.hasOwnProperty("repl")) {
                            var error = $root.replit.goval.api.repl.Repl.verify(message.repl);
                            if (error)
                                return "repl." + error;
                        }
                        if (message.replLimits != null && message.hasOwnProperty("replLimits")) {
                            var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.replLimits);
                            if (error)
                                return "replLimits." + error;
                        }
                        if (message.userLimits != null && message.hasOwnProperty("userLimits")) {
                            var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.userLimits);
                            if (error)
                                return "userLimits." + error;
                        }
                        if (message.customDomains != null && message.hasOwnProperty("customDomains")) {
                            if (!Array.isArray(message.customDomains))
                                return "customDomains: array expected";
                            for (var i = 0; i < message.customDomains.length; ++i)
                                if (!$util.isString(message.customDomains[i]))
                                    return "customDomains: string[] expected";
                        }
                        if (message.certificates != null && message.hasOwnProperty("certificates")) {
                            if (!Array.isArray(message.certificates))
                                return "certificates: array expected";
                            for (var i = 0; i < message.certificates.length; ++i) {
                                var error = $root.replit.goval.api.TLSCertificate.verify(message.certificates[i]);
                                if (error)
                                    return "certificates." + error;
                            }
                        }
                        if (message.flags != null && message.hasOwnProperty("flags")) {
                            if (!Array.isArray(message.flags))
                                return "flags: array expected";
                            for (var i = 0; i < message.flags.length; ++i)
                                if (!$util.isString(message.flags[i]))
                                    return "flags: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a ReplTransfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ReplTransfer} ReplTransfer
                     */
                    ReplTransfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ReplTransfer)
                            return object;
                        var message = new $root.replit.goval.api.ReplTransfer();
                        if (object.repl != null) {
                            if (typeof object.repl !== "object")
                                throw TypeError(".replit.goval.api.ReplTransfer.repl: object expected");
                            message.repl = $root.replit.goval.api.repl.Repl.fromObject(object.repl);
                        }
                        if (object.replLimits != null) {
                            if (typeof object.replLimits !== "object")
                                throw TypeError(".replit.goval.api.ReplTransfer.replLimits: object expected");
                            message.replLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.replLimits);
                        }
                        if (object.userLimits != null) {
                            if (typeof object.userLimits !== "object")
                                throw TypeError(".replit.goval.api.ReplTransfer.userLimits: object expected");
                            message.userLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.userLimits);
                        }
                        if (object.customDomains) {
                            if (!Array.isArray(object.customDomains))
                                throw TypeError(".replit.goval.api.ReplTransfer.customDomains: array expected");
                            message.customDomains = [];
                            for (var i = 0; i < object.customDomains.length; ++i)
                                message.customDomains[i] = String(object.customDomains[i]);
                        }
                        if (object.certificates) {
                            if (!Array.isArray(object.certificates))
                                throw TypeError(".replit.goval.api.ReplTransfer.certificates: array expected");
                            message.certificates = [];
                            for (var i = 0; i < object.certificates.length; ++i) {
                                if (typeof object.certificates[i] !== "object")
                                    throw TypeError(".replit.goval.api.ReplTransfer.certificates: object expected");
                                message.certificates[i] = $root.replit.goval.api.TLSCertificate.fromObject(object.certificates[i]);
                            }
                        }
                        if (object.flags) {
                            if (!Array.isArray(object.flags))
                                throw TypeError(".replit.goval.api.ReplTransfer.flags: array expected");
                            message.flags = [];
                            for (var i = 0; i < object.flags.length; ++i)
                                message.flags[i] = String(object.flags[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReplTransfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ReplTransfer
                     * @static
                     * @param {replit.goval.api.ReplTransfer} message ReplTransfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReplTransfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.customDomains = [];
                            object.certificates = [];
                            object.flags = [];
                        }
                        if (options.defaults) {
                            object.repl = null;
                            object.replLimits = null;
                            object.userLimits = null;
                        }
                        if (message.repl != null && message.hasOwnProperty("repl"))
                            object.repl = $root.replit.goval.api.repl.Repl.toObject(message.repl, options);
                        if (message.replLimits != null && message.hasOwnProperty("replLimits"))
                            object.replLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.replLimits, options);
                        if (message.userLimits != null && message.hasOwnProperty("userLimits"))
                            object.userLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.userLimits, options);
                        if (message.customDomains && message.customDomains.length) {
                            object.customDomains = [];
                            for (var j = 0; j < message.customDomains.length; ++j)
                                object.customDomains[j] = message.customDomains[j];
                        }
                        if (message.certificates && message.certificates.length) {
                            object.certificates = [];
                            for (var j = 0; j < message.certificates.length; ++j)
                                object.certificates[j] = $root.replit.goval.api.TLSCertificate.toObject(message.certificates[j], options);
                        }
                        if (message.flags && message.flags.length) {
                            object.flags = [];
                            for (var j = 0; j < message.flags.length; ++j)
                                object.flags[j] = message.flags[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ReplTransfer to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ReplTransfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReplTransfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReplTransfer;
                })();
    
                api.AllowReplRequest = (function() {
    
                    /**
                     * Properties of an AllowReplRequest.
                     * @memberof replit.goval.api
                     * @interface IAllowReplRequest
                     * @property {replit.goval.api.ReplTransfer|replit.goval.api.IReplTransfer|null} [replTransfer] AllowReplRequest replTransfer
                     */
    
                    /**
                     * Constructs a new AllowReplRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents an AllowReplRequest.
                     * @constructor
                     * @param {replit.goval.api.IAllowReplRequest=} [properties] Properties to set
                     */
                    function AllowReplRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AllowReplRequest replTransfer.
                     * @member {replit.goval.api.ReplTransfer|null|undefined} replTransfer
                     * @memberof replit.goval.api.AllowReplRequest
                     * @instance
                     */
                    AllowReplRequest.prototype.replTransfer = null;
    
                    /**
                     * Creates a new AllowReplRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {replit.goval.api.IAllowReplRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.AllowReplRequest} AllowReplRequest instance
                     */
                    AllowReplRequest.create = function create(properties) {
                        return AllowReplRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified AllowReplRequest message. Does not implicitly {@link replit.goval.api.AllowReplRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {replit.goval.api.AllowReplRequest} message AllowReplRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AllowReplRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replTransfer != null && Object.hasOwnProperty.call(message, "replTransfer"))
                            $root.replit.goval.api.ReplTransfer.encode(message.replTransfer, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AllowReplRequest message, length delimited. Does not implicitly {@link replit.goval.api.AllowReplRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {replit.goval.api.AllowReplRequest} message AllowReplRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AllowReplRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AllowReplRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.AllowReplRequest} AllowReplRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AllowReplRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.AllowReplRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replTransfer = $root.replit.goval.api.ReplTransfer.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AllowReplRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.AllowReplRequest} AllowReplRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AllowReplRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AllowReplRequest message.
                     * @function verify
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AllowReplRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replTransfer != null && message.hasOwnProperty("replTransfer")) {
                            var error = $root.replit.goval.api.ReplTransfer.verify(message.replTransfer);
                            if (error)
                                return "replTransfer." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AllowReplRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.AllowReplRequest} AllowReplRequest
                     */
                    AllowReplRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.AllowReplRequest)
                            return object;
                        var message = new $root.replit.goval.api.AllowReplRequest();
                        if (object.replTransfer != null) {
                            if (typeof object.replTransfer !== "object")
                                throw TypeError(".replit.goval.api.AllowReplRequest.replTransfer: object expected");
                            message.replTransfer = $root.replit.goval.api.ReplTransfer.fromObject(object.replTransfer);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AllowReplRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.AllowReplRequest
                     * @static
                     * @param {replit.goval.api.AllowReplRequest} message AllowReplRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AllowReplRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.replTransfer = null;
                        if (message.replTransfer != null && message.hasOwnProperty("replTransfer"))
                            object.replTransfer = $root.replit.goval.api.ReplTransfer.toObject(message.replTransfer, options);
                        return object;
                    };
    
                    /**
                     * Converts this AllowReplRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.AllowReplRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AllowReplRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return AllowReplRequest;
                })();
    
                api.ClusterMetadata = (function() {
    
                    /**
                     * Properties of a ClusterMetadata.
                     * @memberof replit.goval.api
                     * @interface IClusterMetadata
                     * @property {string|null} [id] ClusterMetadata id
                     * @property {string|null} [conmanURL] ClusterMetadata conmanURL
                     * @property {string|null} [gurl] ClusterMetadata gurl
                     * @property {string|null} [proxy] ClusterMetadata proxy
                     */
    
                    /**
                     * Constructs a new ClusterMetadata.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ClusterMetadata.
                     * @constructor
                     * @param {replit.goval.api.IClusterMetadata=} [properties] Properties to set
                     */
                    function ClusterMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ClusterMetadata id.
                     * @member {string} id
                     * @memberof replit.goval.api.ClusterMetadata
                     * @instance
                     */
                    ClusterMetadata.prototype.id = "";
    
                    /**
                     * ClusterMetadata conmanURL.
                     * @member {string} conmanURL
                     * @memberof replit.goval.api.ClusterMetadata
                     * @instance
                     */
                    ClusterMetadata.prototype.conmanURL = "";
    
                    /**
                     * ClusterMetadata gurl.
                     * @member {string} gurl
                     * @memberof replit.goval.api.ClusterMetadata
                     * @instance
                     */
                    ClusterMetadata.prototype.gurl = "";
    
                    /**
                     * ClusterMetadata proxy.
                     * @member {string} proxy
                     * @memberof replit.goval.api.ClusterMetadata
                     * @instance
                     */
                    ClusterMetadata.prototype.proxy = "";
    
                    /**
                     * Creates a new ClusterMetadata instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {replit.goval.api.IClusterMetadata=} [properties] Properties to set
                     * @returns {replit.goval.api.ClusterMetadata} ClusterMetadata instance
                     */
                    ClusterMetadata.create = function create(properties) {
                        return ClusterMetadata.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ClusterMetadata message. Does not implicitly {@link replit.goval.api.ClusterMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {replit.goval.api.ClusterMetadata} message ClusterMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClusterMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.conmanURL != null && Object.hasOwnProperty.call(message, "conmanURL"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.conmanURL);
                        if (message.gurl != null && Object.hasOwnProperty.call(message, "gurl"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.gurl);
                        if (message.proxy != null && Object.hasOwnProperty.call(message, "proxy"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.proxy);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ClusterMetadata message, length delimited. Does not implicitly {@link replit.goval.api.ClusterMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {replit.goval.api.ClusterMetadata} message ClusterMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClusterMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ClusterMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ClusterMetadata} ClusterMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClusterMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ClusterMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.conmanURL = reader.string();
                                break;
                            case 3:
                                message.gurl = reader.string();
                                break;
                            case 5:
                                message.proxy = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ClusterMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ClusterMetadata} ClusterMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClusterMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ClusterMetadata message.
                     * @function verify
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClusterMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.conmanURL != null && message.hasOwnProperty("conmanURL"))
                            if (!$util.isString(message.conmanURL))
                                return "conmanURL: string expected";
                        if (message.gurl != null && message.hasOwnProperty("gurl"))
                            if (!$util.isString(message.gurl))
                                return "gurl: string expected";
                        if (message.proxy != null && message.hasOwnProperty("proxy"))
                            if (!$util.isString(message.proxy))
                                return "proxy: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ClusterMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ClusterMetadata} ClusterMetadata
                     */
                    ClusterMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ClusterMetadata)
                            return object;
                        var message = new $root.replit.goval.api.ClusterMetadata();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.conmanURL != null)
                            message.conmanURL = String(object.conmanURL);
                        if (object.gurl != null)
                            message.gurl = String(object.gurl);
                        if (object.proxy != null)
                            message.proxy = String(object.proxy);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ClusterMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ClusterMetadata
                     * @static
                     * @param {replit.goval.api.ClusterMetadata} message ClusterMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClusterMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.conmanURL = "";
                            object.gurl = "";
                            object.proxy = "";
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.conmanURL != null && message.hasOwnProperty("conmanURL"))
                            object.conmanURL = message.conmanURL;
                        if (message.gurl != null && message.hasOwnProperty("gurl"))
                            object.gurl = message.gurl;
                        if (message.proxy != null && message.hasOwnProperty("proxy"))
                            object.proxy = message.proxy;
                        return object;
                    };
    
                    /**
                     * Converts this ClusterMetadata to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ClusterMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClusterMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ClusterMetadata;
                })();
    
                api.EvictReplRequest = (function() {
    
                    /**
                     * Properties of an EvictReplRequest.
                     * @memberof replit.goval.api
                     * @interface IEvictReplRequest
                     * @property {replit.goval.api.ClusterMetadata|replit.goval.api.IClusterMetadata|null} [clusterMetadata] EvictReplRequest clusterMetadata
                     * @property {string|null} [token] EvictReplRequest token
                     * @property {string|null} [user] EvictReplRequest user
                     * @property {string|null} [slug] EvictReplRequest slug
                     */
    
                    /**
                     * Constructs a new EvictReplRequest.
                     * @memberof replit.goval.api
                     * @classdesc Represents an EvictReplRequest.
                     * @constructor
                     * @param {replit.goval.api.IEvictReplRequest=} [properties] Properties to set
                     */
                    function EvictReplRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EvictReplRequest clusterMetadata.
                     * @member {replit.goval.api.ClusterMetadata|null|undefined} clusterMetadata
                     * @memberof replit.goval.api.EvictReplRequest
                     * @instance
                     */
                    EvictReplRequest.prototype.clusterMetadata = null;
    
                    /**
                     * EvictReplRequest token.
                     * @member {string} token
                     * @memberof replit.goval.api.EvictReplRequest
                     * @instance
                     */
                    EvictReplRequest.prototype.token = "";
    
                    /**
                     * EvictReplRequest user.
                     * @member {string} user
                     * @memberof replit.goval.api.EvictReplRequest
                     * @instance
                     */
                    EvictReplRequest.prototype.user = "";
    
                    /**
                     * EvictReplRequest slug.
                     * @member {string} slug
                     * @memberof replit.goval.api.EvictReplRequest
                     * @instance
                     */
                    EvictReplRequest.prototype.slug = "";
    
                    /**
                     * Creates a new EvictReplRequest instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {replit.goval.api.IEvictReplRequest=} [properties] Properties to set
                     * @returns {replit.goval.api.EvictReplRequest} EvictReplRequest instance
                     */
                    EvictReplRequest.create = function create(properties) {
                        return EvictReplRequest.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified EvictReplRequest message. Does not implicitly {@link replit.goval.api.EvictReplRequest.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {replit.goval.api.EvictReplRequest} message EvictReplRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvictReplRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.clusterMetadata != null && Object.hasOwnProperty.call(message, "clusterMetadata"))
                            $root.replit.goval.api.ClusterMetadata.encode(message.clusterMetadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.user);
                        if (message.slug != null && Object.hasOwnProperty.call(message, "slug"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.slug);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EvictReplRequest message, length delimited. Does not implicitly {@link replit.goval.api.EvictReplRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {replit.goval.api.EvictReplRequest} message EvictReplRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvictReplRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EvictReplRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.EvictReplRequest} EvictReplRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvictReplRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.EvictReplRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.clusterMetadata = $root.replit.goval.api.ClusterMetadata.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.token = reader.string();
                                break;
                            case 3:
                                message.user = reader.string();
                                break;
                            case 4:
                                message.slug = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EvictReplRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.EvictReplRequest} EvictReplRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvictReplRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EvictReplRequest message.
                     * @function verify
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EvictReplRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.clusterMetadata != null && message.hasOwnProperty("clusterMetadata")) {
                            var error = $root.replit.goval.api.ClusterMetadata.verify(message.clusterMetadata);
                            if (error)
                                return "clusterMetadata." + error;
                        }
                        if (message.token != null && message.hasOwnProperty("token"))
                            if (!$util.isString(message.token))
                                return "token: string expected";
                        if (message.user != null && message.hasOwnProperty("user"))
                            if (!$util.isString(message.user))
                                return "user: string expected";
                        if (message.slug != null && message.hasOwnProperty("slug"))
                            if (!$util.isString(message.slug))
                                return "slug: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an EvictReplRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.EvictReplRequest} EvictReplRequest
                     */
                    EvictReplRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.EvictReplRequest)
                            return object;
                        var message = new $root.replit.goval.api.EvictReplRequest();
                        if (object.clusterMetadata != null) {
                            if (typeof object.clusterMetadata !== "object")
                                throw TypeError(".replit.goval.api.EvictReplRequest.clusterMetadata: object expected");
                            message.clusterMetadata = $root.replit.goval.api.ClusterMetadata.fromObject(object.clusterMetadata);
                        }
                        if (object.token != null)
                            message.token = String(object.token);
                        if (object.user != null)
                            message.user = String(object.user);
                        if (object.slug != null)
                            message.slug = String(object.slug);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EvictReplRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.EvictReplRequest
                     * @static
                     * @param {replit.goval.api.EvictReplRequest} message EvictReplRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EvictReplRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.clusterMetadata = null;
                            object.token = "";
                            object.user = "";
                            object.slug = "";
                        }
                        if (message.clusterMetadata != null && message.hasOwnProperty("clusterMetadata"))
                            object.clusterMetadata = $root.replit.goval.api.ClusterMetadata.toObject(message.clusterMetadata, options);
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = message.token;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = message.user;
                        if (message.slug != null && message.hasOwnProperty("slug"))
                            object.slug = message.slug;
                        return object;
                    };
    
                    /**
                     * Converts this EvictReplRequest to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.EvictReplRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EvictReplRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EvictReplRequest;
                })();
    
                api.EvictReplResponse = (function() {
    
                    /**
                     * Properties of an EvictReplResponse.
                     * @memberof replit.goval.api
                     * @interface IEvictReplResponse
                     * @property {replit.goval.api.ReplTransfer|replit.goval.api.IReplTransfer|null} [replTransfer] EvictReplResponse replTransfer
                     */
    
                    /**
                     * Constructs a new EvictReplResponse.
                     * @memberof replit.goval.api
                     * @classdesc Represents an EvictReplResponse.
                     * @constructor
                     * @param {replit.goval.api.IEvictReplResponse=} [properties] Properties to set
                     */
                    function EvictReplResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EvictReplResponse replTransfer.
                     * @member {replit.goval.api.ReplTransfer|null|undefined} replTransfer
                     * @memberof replit.goval.api.EvictReplResponse
                     * @instance
                     */
                    EvictReplResponse.prototype.replTransfer = null;
    
                    /**
                     * Creates a new EvictReplResponse instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {replit.goval.api.IEvictReplResponse=} [properties] Properties to set
                     * @returns {replit.goval.api.EvictReplResponse} EvictReplResponse instance
                     */
                    EvictReplResponse.create = function create(properties) {
                        return EvictReplResponse.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified EvictReplResponse message. Does not implicitly {@link replit.goval.api.EvictReplResponse.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {replit.goval.api.EvictReplResponse} message EvictReplResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvictReplResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replTransfer != null && Object.hasOwnProperty.call(message, "replTransfer"))
                            $root.replit.goval.api.ReplTransfer.encode(message.replTransfer, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EvictReplResponse message, length delimited. Does not implicitly {@link replit.goval.api.EvictReplResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {replit.goval.api.EvictReplResponse} message EvictReplResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvictReplResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EvictReplResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.EvictReplResponse} EvictReplResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvictReplResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.EvictReplResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replTransfer = $root.replit.goval.api.ReplTransfer.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EvictReplResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.EvictReplResponse} EvictReplResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvictReplResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EvictReplResponse message.
                     * @function verify
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EvictReplResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replTransfer != null && message.hasOwnProperty("replTransfer")) {
                            var error = $root.replit.goval.api.ReplTransfer.verify(message.replTransfer);
                            if (error)
                                return "replTransfer." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an EvictReplResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.EvictReplResponse} EvictReplResponse
                     */
                    EvictReplResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.EvictReplResponse)
                            return object;
                        var message = new $root.replit.goval.api.EvictReplResponse();
                        if (object.replTransfer != null) {
                            if (typeof object.replTransfer !== "object")
                                throw TypeError(".replit.goval.api.EvictReplResponse.replTransfer: object expected");
                            message.replTransfer = $root.replit.goval.api.ReplTransfer.fromObject(object.replTransfer);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EvictReplResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.EvictReplResponse
                     * @static
                     * @param {replit.goval.api.EvictReplResponse} message EvictReplResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EvictReplResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.replTransfer = null;
                        if (message.replTransfer != null && message.hasOwnProperty("replTransfer"))
                            object.replTransfer = $root.replit.goval.api.ReplTransfer.toObject(message.replTransfer, options);
                        return object;
                    };
    
                    /**
                     * Converts this EvictReplResponse to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.EvictReplResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EvictReplResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return EvictReplResponse;
                })();
    
                /**
                 * TokenVersion enum.
                 * @name replit.goval.api.TokenVersion
                 * @enum {number}
                 * @property {number} BARE_REPL_TOKEN=0 BARE_REPL_TOKEN value
                 * @property {number} TYPE_AWARE_TOKEN=1 TYPE_AWARE_TOKEN value
                 */
                api.TokenVersion = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "BARE_REPL_TOKEN"] = 0;
                    values[valuesById[1] = "TYPE_AWARE_TOKEN"] = 1;
                    return values;
                })();
    
                api.GovalSigningAuthority = (function() {
    
                    /**
                     * Properties of a GovalSigningAuthority.
                     * @memberof replit.goval.api
                     * @interface IGovalSigningAuthority
                     * @property {string|null} [keyId] GovalSigningAuthority keyId
                     * @property {string|null} [signedCert] GovalSigningAuthority signedCert
                     * @property {replit.goval.api.TokenVersion|null} [version] GovalSigningAuthority version
                     * @property {string|null} [issuer] GovalSigningAuthority issuer
                     */
    
                    /**
                     * Constructs a new GovalSigningAuthority.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GovalSigningAuthority.
                     * @constructor
                     * @param {replit.goval.api.IGovalSigningAuthority=} [properties] Properties to set
                     */
                    function GovalSigningAuthority(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GovalSigningAuthority keyId.
                     * @member {string|null|undefined} keyId
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     */
                    GovalSigningAuthority.prototype.keyId = null;
    
                    /**
                     * GovalSigningAuthority signedCert.
                     * @member {string|null|undefined} signedCert
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     */
                    GovalSigningAuthority.prototype.signedCert = null;
    
                    /**
                     * GovalSigningAuthority version.
                     * @member {replit.goval.api.TokenVersion} version
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     */
                    GovalSigningAuthority.prototype.version = 0;
    
                    /**
                     * GovalSigningAuthority issuer.
                     * @member {string} issuer
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     */
                    GovalSigningAuthority.prototype.issuer = "";
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * GovalSigningAuthority cert.
                     * @member {"keyId"|"signedCert"|undefined} cert
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     */
                    Object.defineProperty(GovalSigningAuthority.prototype, "cert", {
                        get: $util.oneOfGetter($oneOfFields = ["keyId", "signedCert"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new GovalSigningAuthority instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {replit.goval.api.IGovalSigningAuthority=} [properties] Properties to set
                     * @returns {replit.goval.api.GovalSigningAuthority} GovalSigningAuthority instance
                     */
                    GovalSigningAuthority.create = function create(properties) {
                        return GovalSigningAuthority.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GovalSigningAuthority message. Does not implicitly {@link replit.goval.api.GovalSigningAuthority.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {replit.goval.api.GovalSigningAuthority} message GovalSigningAuthority message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalSigningAuthority.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keyId != null && Object.hasOwnProperty.call(message, "keyId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyId);
                        if (message.signedCert != null && Object.hasOwnProperty.call(message, "signedCert"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.signedCert);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.version);
                        if (message.issuer != null && Object.hasOwnProperty.call(message, "issuer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.issuer);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GovalSigningAuthority message, length delimited. Does not implicitly {@link replit.goval.api.GovalSigningAuthority.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {replit.goval.api.GovalSigningAuthority} message GovalSigningAuthority message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalSigningAuthority.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GovalSigningAuthority message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GovalSigningAuthority} GovalSigningAuthority
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalSigningAuthority.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GovalSigningAuthority();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.keyId = reader.string();
                                break;
                            case 2:
                                message.signedCert = reader.string();
                                break;
                            case 3:
                                message.version = reader.int32();
                                break;
                            case 4:
                                message.issuer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GovalSigningAuthority message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GovalSigningAuthority} GovalSigningAuthority
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalSigningAuthority.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GovalSigningAuthority message.
                     * @function verify
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GovalSigningAuthority.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.keyId != null && message.hasOwnProperty("keyId")) {
                            properties.cert = 1;
                            if (!$util.isString(message.keyId))
                                return "keyId: string expected";
                        }
                        if (message.signedCert != null && message.hasOwnProperty("signedCert")) {
                            if (properties.cert === 1)
                                return "cert: multiple values";
                            properties.cert = 1;
                            if (!$util.isString(message.signedCert))
                                return "signedCert: string expected";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            switch (message.version) {
                            default:
                                return "version: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        if (message.issuer != null && message.hasOwnProperty("issuer"))
                            if (!$util.isString(message.issuer))
                                return "issuer: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GovalSigningAuthority message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GovalSigningAuthority} GovalSigningAuthority
                     */
                    GovalSigningAuthority.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GovalSigningAuthority)
                            return object;
                        var message = new $root.replit.goval.api.GovalSigningAuthority();
                        if (object.keyId != null)
                            message.keyId = String(object.keyId);
                        if (object.signedCert != null)
                            message.signedCert = String(object.signedCert);
                        switch (object.version) {
                        case "BARE_REPL_TOKEN":
                        case 0:
                            message.version = 0;
                            break;
                        case "TYPE_AWARE_TOKEN":
                        case 1:
                            message.version = 1;
                            break;
                        }
                        if (object.issuer != null)
                            message.issuer = String(object.issuer);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GovalSigningAuthority message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @static
                     * @param {replit.goval.api.GovalSigningAuthority} message GovalSigningAuthority
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GovalSigningAuthority.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.version = options.enums === String ? "BARE_REPL_TOKEN" : 0;
                            object.issuer = "";
                        }
                        if (message.keyId != null && message.hasOwnProperty("keyId")) {
                            object.keyId = message.keyId;
                            if (options.oneofs)
                                object.cert = "keyId";
                        }
                        if (message.signedCert != null && message.hasOwnProperty("signedCert")) {
                            object.signedCert = message.signedCert;
                            if (options.oneofs)
                                object.cert = "signedCert";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = options.enums === String ? $root.replit.goval.api.TokenVersion[message.version] : message.version;
                        if (message.issuer != null && message.hasOwnProperty("issuer"))
                            object.issuer = message.issuer;
                        return object;
                    };
    
                    /**
                     * Converts this GovalSigningAuthority to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GovalSigningAuthority
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GovalSigningAuthority.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GovalSigningAuthority;
                })();
    
                /**
                 * FlagClaim enum.
                 * @name replit.goval.api.FlagClaim
                 * @enum {number}
                 * @property {number} MINT_GOVAL_TOKEN=0 MINT_GOVAL_TOKEN value
                 * @property {number} SIGN_INTERMEDIATE_CERT=1 SIGN_INTERMEDIATE_CERT value
                 * @property {number} IDENTITY=5 IDENTITY value
                 * @property {number} GHOSTWRITER=6 GHOSTWRITER value
                 * @property {number} ANY_REPLID=2 ANY_REPLID value
                 * @property {number} ANY_USER=3 ANY_USER value
                 * @property {number} ANY_CLUSTER=4 ANY_CLUSTER value
                 */
                api.FlagClaim = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "MINT_GOVAL_TOKEN"] = 0;
                    values[valuesById[1] = "SIGN_INTERMEDIATE_CERT"] = 1;
                    values[valuesById[5] = "IDENTITY"] = 5;
                    values[valuesById[6] = "GHOSTWRITER"] = 6;
                    values[valuesById[2] = "ANY_REPLID"] = 2;
                    values[valuesById[3] = "ANY_USER"] = 3;
                    values[valuesById[4] = "ANY_CLUSTER"] = 4;
                    return values;
                })();
    
                api.CertificateClaim = (function() {
    
                    /**
                     * Properties of a CertificateClaim.
                     * @memberof replit.goval.api
                     * @interface ICertificateClaim
                     * @property {string|null} [replid] CertificateClaim replid
                     * @property {string|null} [user] CertificateClaim user
                     * @property {string|null} [cluster] CertificateClaim cluster
                     * @property {replit.goval.api.FlagClaim|null} [flag] CertificateClaim flag
                     */
    
                    /**
                     * Constructs a new CertificateClaim.
                     * @memberof replit.goval.api
                     * @classdesc Represents a CertificateClaim.
                     * @constructor
                     * @param {replit.goval.api.ICertificateClaim=} [properties] Properties to set
                     */
                    function CertificateClaim(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CertificateClaim replid.
                     * @member {string|null|undefined} replid
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     */
                    CertificateClaim.prototype.replid = null;
    
                    /**
                     * CertificateClaim user.
                     * @member {string|null|undefined} user
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     */
                    CertificateClaim.prototype.user = null;
    
                    /**
                     * CertificateClaim cluster.
                     * @member {string|null|undefined} cluster
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     */
                    CertificateClaim.prototype.cluster = null;
    
                    /**
                     * CertificateClaim flag.
                     * @member {replit.goval.api.FlagClaim|null|undefined} flag
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     */
                    CertificateClaim.prototype.flag = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * CertificateClaim claim.
                     * @member {"replid"|"user"|"cluster"|"flag"|undefined} claim
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     */
                    Object.defineProperty(CertificateClaim.prototype, "claim", {
                        get: $util.oneOfGetter($oneOfFields = ["replid", "user", "cluster", "flag"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new CertificateClaim instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {replit.goval.api.ICertificateClaim=} [properties] Properties to set
                     * @returns {replit.goval.api.CertificateClaim} CertificateClaim instance
                     */
                    CertificateClaim.create = function create(properties) {
                        return CertificateClaim.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified CertificateClaim message. Does not implicitly {@link replit.goval.api.CertificateClaim.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {replit.goval.api.CertificateClaim} message CertificateClaim message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CertificateClaim.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replid != null && Object.hasOwnProperty.call(message, "replid"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replid);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.user);
                        if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.flag);
                        if (message.cluster != null && Object.hasOwnProperty.call(message, "cluster"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cluster);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CertificateClaim message, length delimited. Does not implicitly {@link replit.goval.api.CertificateClaim.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {replit.goval.api.CertificateClaim} message CertificateClaim message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CertificateClaim.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CertificateClaim message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.CertificateClaim} CertificateClaim
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CertificateClaim.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.CertificateClaim();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replid = reader.string();
                                break;
                            case 2:
                                message.user = reader.string();
                                break;
                            case 4:
                                message.cluster = reader.string();
                                break;
                            case 3:
                                message.flag = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CertificateClaim message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.CertificateClaim} CertificateClaim
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CertificateClaim.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CertificateClaim message.
                     * @function verify
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CertificateClaim.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.replid != null && message.hasOwnProperty("replid")) {
                            properties.claim = 1;
                            if (!$util.isString(message.replid))
                                return "replid: string expected";
                        }
                        if (message.user != null && message.hasOwnProperty("user")) {
                            if (properties.claim === 1)
                                return "claim: multiple values";
                            properties.claim = 1;
                            if (!$util.isString(message.user))
                                return "user: string expected";
                        }
                        if (message.cluster != null && message.hasOwnProperty("cluster")) {
                            if (properties.claim === 1)
                                return "claim: multiple values";
                            properties.claim = 1;
                            if (!$util.isString(message.cluster))
                                return "cluster: string expected";
                        }
                        if (message.flag != null && message.hasOwnProperty("flag")) {
                            if (properties.claim === 1)
                                return "claim: multiple values";
                            properties.claim = 1;
                            switch (message.flag) {
                            default:
                                return "flag: enum value expected";
                            case 0:
                            case 1:
                            case 5:
                            case 6:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CertificateClaim message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.CertificateClaim} CertificateClaim
                     */
                    CertificateClaim.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.CertificateClaim)
                            return object;
                        var message = new $root.replit.goval.api.CertificateClaim();
                        if (object.replid != null)
                            message.replid = String(object.replid);
                        if (object.user != null)
                            message.user = String(object.user);
                        if (object.cluster != null)
                            message.cluster = String(object.cluster);
                        switch (object.flag) {
                        case "MINT_GOVAL_TOKEN":
                        case 0:
                            message.flag = 0;
                            break;
                        case "SIGN_INTERMEDIATE_CERT":
                        case 1:
                            message.flag = 1;
                            break;
                        case "IDENTITY":
                        case 5:
                            message.flag = 5;
                            break;
                        case "GHOSTWRITER":
                        case 6:
                            message.flag = 6;
                            break;
                        case "ANY_REPLID":
                        case 2:
                            message.flag = 2;
                            break;
                        case "ANY_USER":
                        case 3:
                            message.flag = 3;
                            break;
                        case "ANY_CLUSTER":
                        case 4:
                            message.flag = 4;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CertificateClaim message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.CertificateClaim
                     * @static
                     * @param {replit.goval.api.CertificateClaim} message CertificateClaim
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CertificateClaim.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.replid != null && message.hasOwnProperty("replid")) {
                            object.replid = message.replid;
                            if (options.oneofs)
                                object.claim = "replid";
                        }
                        if (message.user != null && message.hasOwnProperty("user")) {
                            object.user = message.user;
                            if (options.oneofs)
                                object.claim = "user";
                        }
                        if (message.flag != null && message.hasOwnProperty("flag")) {
                            object.flag = options.enums === String ? $root.replit.goval.api.FlagClaim[message.flag] : message.flag;
                            if (options.oneofs)
                                object.claim = "flag";
                        }
                        if (message.cluster != null && message.hasOwnProperty("cluster")) {
                            object.cluster = message.cluster;
                            if (options.oneofs)
                                object.claim = "cluster";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CertificateClaim to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.CertificateClaim
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CertificateClaim.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CertificateClaim;
                })();
    
                api.GovalCert = (function() {
    
                    /**
                     * Properties of a GovalCert.
                     * @memberof replit.goval.api
                     * @interface IGovalCert
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [iat] GovalCert iat
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [exp] GovalCert exp
                     * @property {Array.<replit.goval.api.CertificateClaim|replit.goval.api.ICertificateClaim>|null} [claims] GovalCert claims
                     * @property {string|null} [publicKey] GovalCert publicKey
                     */
    
                    /**
                     * Constructs a new GovalCert.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GovalCert.
                     * @constructor
                     * @param {replit.goval.api.IGovalCert=} [properties] Properties to set
                     */
                    function GovalCert(properties) {
                        this.claims = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GovalCert iat.
                     * @member {google.protobuf.Timestamp|null|undefined} iat
                     * @memberof replit.goval.api.GovalCert
                     * @instance
                     */
                    GovalCert.prototype.iat = null;
    
                    /**
                     * GovalCert exp.
                     * @member {google.protobuf.Timestamp|null|undefined} exp
                     * @memberof replit.goval.api.GovalCert
                     * @instance
                     */
                    GovalCert.prototype.exp = null;
    
                    /**
                     * GovalCert claims.
                     * @member {Array.<replit.goval.api.CertificateClaim>} claims
                     * @memberof replit.goval.api.GovalCert
                     * @instance
                     */
                    GovalCert.prototype.claims = $util.emptyArray;
    
                    /**
                     * GovalCert publicKey.
                     * @member {string} publicKey
                     * @memberof replit.goval.api.GovalCert
                     * @instance
                     */
                    GovalCert.prototype.publicKey = "";
    
                    /**
                     * Creates a new GovalCert instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {replit.goval.api.IGovalCert=} [properties] Properties to set
                     * @returns {replit.goval.api.GovalCert} GovalCert instance
                     */
                    GovalCert.create = function create(properties) {
                        return GovalCert.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GovalCert message. Does not implicitly {@link replit.goval.api.GovalCert.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {replit.goval.api.GovalCert} message GovalCert message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalCert.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.iat != null && Object.hasOwnProperty.call(message, "iat"))
                            $root.google.protobuf.Timestamp.encode(message.iat, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.exp != null && Object.hasOwnProperty.call(message, "exp"))
                            $root.google.protobuf.Timestamp.encode(message.exp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.claims != null && message.claims.length)
                            for (var i = 0; i < message.claims.length; ++i)
                                $root.replit.goval.api.CertificateClaim.encode(message.claims[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.publicKey != null && Object.hasOwnProperty.call(message, "publicKey"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.publicKey);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GovalCert message, length delimited. Does not implicitly {@link replit.goval.api.GovalCert.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {replit.goval.api.GovalCert} message GovalCert message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalCert.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GovalCert message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GovalCert} GovalCert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalCert.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GovalCert();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.iat = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.exp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 3:
                                if (!(message.claims && message.claims.length))
                                    message.claims = [];
                                message.claims.push($root.replit.goval.api.CertificateClaim.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.publicKey = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GovalCert message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GovalCert} GovalCert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalCert.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GovalCert message.
                     * @function verify
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GovalCert.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.iat != null && message.hasOwnProperty("iat")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.iat);
                            if (error)
                                return "iat." + error;
                        }
                        if (message.exp != null && message.hasOwnProperty("exp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.exp);
                            if (error)
                                return "exp." + error;
                        }
                        if (message.claims != null && message.hasOwnProperty("claims")) {
                            if (!Array.isArray(message.claims))
                                return "claims: array expected";
                            for (var i = 0; i < message.claims.length; ++i) {
                                var error = $root.replit.goval.api.CertificateClaim.verify(message.claims[i]);
                                if (error)
                                    return "claims." + error;
                            }
                        }
                        if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                            if (!$util.isString(message.publicKey))
                                return "publicKey: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GovalCert message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GovalCert} GovalCert
                     */
                    GovalCert.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GovalCert)
                            return object;
                        var message = new $root.replit.goval.api.GovalCert();
                        if (object.iat != null) {
                            if (typeof object.iat !== "object")
                                throw TypeError(".replit.goval.api.GovalCert.iat: object expected");
                            message.iat = $root.google.protobuf.Timestamp.fromObject(object.iat);
                        }
                        if (object.exp != null) {
                            if (typeof object.exp !== "object")
                                throw TypeError(".replit.goval.api.GovalCert.exp: object expected");
                            message.exp = $root.google.protobuf.Timestamp.fromObject(object.exp);
                        }
                        if (object.claims) {
                            if (!Array.isArray(object.claims))
                                throw TypeError(".replit.goval.api.GovalCert.claims: array expected");
                            message.claims = [];
                            for (var i = 0; i < object.claims.length; ++i) {
                                if (typeof object.claims[i] !== "object")
                                    throw TypeError(".replit.goval.api.GovalCert.claims: object expected");
                                message.claims[i] = $root.replit.goval.api.CertificateClaim.fromObject(object.claims[i]);
                            }
                        }
                        if (object.publicKey != null)
                            message.publicKey = String(object.publicKey);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GovalCert message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GovalCert
                     * @static
                     * @param {replit.goval.api.GovalCert} message GovalCert
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GovalCert.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.claims = [];
                        if (options.defaults) {
                            object.iat = null;
                            object.exp = null;
                            object.publicKey = "";
                        }
                        if (message.iat != null && message.hasOwnProperty("iat"))
                            object.iat = $root.google.protobuf.Timestamp.toObject(message.iat, options);
                        if (message.exp != null && message.hasOwnProperty("exp"))
                            object.exp = $root.google.protobuf.Timestamp.toObject(message.exp, options);
                        if (message.claims && message.claims.length) {
                            object.claims = [];
                            for (var j = 0; j < message.claims.length; ++j)
                                object.claims[j] = $root.replit.goval.api.CertificateClaim.toObject(message.claims[j], options);
                        }
                        if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                            object.publicKey = message.publicKey;
                        return object;
                    };
    
                    /**
                     * Converts this GovalCert to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GovalCert
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GovalCert.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GovalCert;
                })();
    
                api.GovalToken = (function() {
    
                    /**
                     * Properties of a GovalToken.
                     * @memberof replit.goval.api
                     * @interface IGovalToken
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [iat] GovalToken iat
                     * @property {google.protobuf.Timestamp|google.protobuf.ITimestamp|null} [exp] GovalToken exp
                     * @property {string|null} [replid] GovalToken replid
                     * @property {replit.goval.api.ReplToken|replit.goval.api.IReplToken|null} [replToken] GovalToken replToken
                     * @property {replit.goval.api.GovalReplIdentity|replit.goval.api.IGovalReplIdentity|null} [replIdentity] GovalToken replIdentity
                     */
    
                    /**
                     * Constructs a new GovalToken.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GovalToken.
                     * @constructor
                     * @param {replit.goval.api.IGovalToken=} [properties] Properties to set
                     */
                    function GovalToken(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GovalToken iat.
                     * @member {google.protobuf.Timestamp|null|undefined} iat
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    GovalToken.prototype.iat = null;
    
                    /**
                     * GovalToken exp.
                     * @member {google.protobuf.Timestamp|null|undefined} exp
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    GovalToken.prototype.exp = null;
    
                    /**
                     * GovalToken replid.
                     * @member {string} replid
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    GovalToken.prototype.replid = "";
    
                    /**
                     * GovalToken replToken.
                     * @member {replit.goval.api.ReplToken|null|undefined} replToken
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    GovalToken.prototype.replToken = null;
    
                    /**
                     * GovalToken replIdentity.
                     * @member {replit.goval.api.GovalReplIdentity|null|undefined} replIdentity
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    GovalToken.prototype.replIdentity = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * GovalToken Token.
                     * @member {"replToken"|"replIdentity"|undefined} Token
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     */
                    Object.defineProperty(GovalToken.prototype, "Token", {
                        get: $util.oneOfGetter($oneOfFields = ["replToken", "replIdentity"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new GovalToken instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {replit.goval.api.IGovalToken=} [properties] Properties to set
                     * @returns {replit.goval.api.GovalToken} GovalToken instance
                     */
                    GovalToken.create = function create(properties) {
                        return GovalToken.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GovalToken message. Does not implicitly {@link replit.goval.api.GovalToken.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {replit.goval.api.GovalToken} message GovalToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalToken.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.iat != null && Object.hasOwnProperty.call(message, "iat"))
                            $root.google.protobuf.Timestamp.encode(message.iat, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.exp != null && Object.hasOwnProperty.call(message, "exp"))
                            $root.google.protobuf.Timestamp.encode(message.exp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.replid != null && Object.hasOwnProperty.call(message, "replid"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.replid);
                        if (message.replToken != null && Object.hasOwnProperty.call(message, "replToken"))
                            $root.replit.goval.api.ReplToken.encode(message.replToken, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.replIdentity != null && Object.hasOwnProperty.call(message, "replIdentity"))
                            $root.replit.goval.api.GovalReplIdentity.encode(message.replIdentity, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GovalToken message, length delimited. Does not implicitly {@link replit.goval.api.GovalToken.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {replit.goval.api.GovalToken} message GovalToken message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalToken.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GovalToken message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GovalToken} GovalToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalToken.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GovalToken();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.iat = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.exp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.replid = reader.string();
                                break;
                            case 4:
                                message.replToken = $root.replit.goval.api.ReplToken.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.replIdentity = $root.replit.goval.api.GovalReplIdentity.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GovalToken message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GovalToken} GovalToken
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalToken.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GovalToken message.
                     * @function verify
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GovalToken.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.iat != null && message.hasOwnProperty("iat")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.iat);
                            if (error)
                                return "iat." + error;
                        }
                        if (message.exp != null && message.hasOwnProperty("exp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.exp);
                            if (error)
                                return "exp." + error;
                        }
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            if (!$util.isString(message.replid))
                                return "replid: string expected";
                        if (message.replToken != null && message.hasOwnProperty("replToken")) {
                            properties.Token = 1;
                            {
                                var error = $root.replit.goval.api.ReplToken.verify(message.replToken);
                                if (error)
                                    return "replToken." + error;
                            }
                        }
                        if (message.replIdentity != null && message.hasOwnProperty("replIdentity")) {
                            if (properties.Token === 1)
                                return "Token: multiple values";
                            properties.Token = 1;
                            {
                                var error = $root.replit.goval.api.GovalReplIdentity.verify(message.replIdentity);
                                if (error)
                                    return "replIdentity." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GovalToken message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GovalToken} GovalToken
                     */
                    GovalToken.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GovalToken)
                            return object;
                        var message = new $root.replit.goval.api.GovalToken();
                        if (object.iat != null) {
                            if (typeof object.iat !== "object")
                                throw TypeError(".replit.goval.api.GovalToken.iat: object expected");
                            message.iat = $root.google.protobuf.Timestamp.fromObject(object.iat);
                        }
                        if (object.exp != null) {
                            if (typeof object.exp !== "object")
                                throw TypeError(".replit.goval.api.GovalToken.exp: object expected");
                            message.exp = $root.google.protobuf.Timestamp.fromObject(object.exp);
                        }
                        if (object.replid != null)
                            message.replid = String(object.replid);
                        if (object.replToken != null) {
                            if (typeof object.replToken !== "object")
                                throw TypeError(".replit.goval.api.GovalToken.replToken: object expected");
                            message.replToken = $root.replit.goval.api.ReplToken.fromObject(object.replToken);
                        }
                        if (object.replIdentity != null) {
                            if (typeof object.replIdentity !== "object")
                                throw TypeError(".replit.goval.api.GovalToken.replIdentity: object expected");
                            message.replIdentity = $root.replit.goval.api.GovalReplIdentity.fromObject(object.replIdentity);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GovalToken message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GovalToken
                     * @static
                     * @param {replit.goval.api.GovalToken} message GovalToken
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GovalToken.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.iat = null;
                            object.exp = null;
                            object.replid = "";
                        }
                        if (message.iat != null && message.hasOwnProperty("iat"))
                            object.iat = $root.google.protobuf.Timestamp.toObject(message.iat, options);
                        if (message.exp != null && message.hasOwnProperty("exp"))
                            object.exp = $root.google.protobuf.Timestamp.toObject(message.exp, options);
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            object.replid = message.replid;
                        if (message.replToken != null && message.hasOwnProperty("replToken")) {
                            object.replToken = $root.replit.goval.api.ReplToken.toObject(message.replToken, options);
                            if (options.oneofs)
                                object.Token = "replToken";
                        }
                        if (message.replIdentity != null && message.hasOwnProperty("replIdentity")) {
                            object.replIdentity = $root.replit.goval.api.GovalReplIdentity.toObject(message.replIdentity, options);
                            if (options.oneofs)
                                object.Token = "replIdentity";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GovalToken to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GovalToken
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GovalToken.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GovalToken;
                })();
    
                api.GovalReplIdentity = (function() {
    
                    /**
                     * Properties of a GovalReplIdentity.
                     * @memberof replit.goval.api
                     * @interface IGovalReplIdentity
                     * @property {string|null} [replid] GovalReplIdentity replid
                     * @property {string|null} [user] GovalReplIdentity user
                     * @property {string|null} [slug] GovalReplIdentity slug
                     * @property {string|null} [aud] GovalReplIdentity aud
                     * @property {boolean|null} [ephemeral] GovalReplIdentity ephemeral
                     * @property {string|null} [originReplid] GovalReplIdentity originReplid
                     */
    
                    /**
                     * Constructs a new GovalReplIdentity.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GovalReplIdentity.
                     * @constructor
                     * @param {replit.goval.api.IGovalReplIdentity=} [properties] Properties to set
                     */
                    function GovalReplIdentity(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GovalReplIdentity replid.
                     * @member {string} replid
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.replid = "";
    
                    /**
                     * GovalReplIdentity user.
                     * @member {string} user
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.user = "";
    
                    /**
                     * GovalReplIdentity slug.
                     * @member {string} slug
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.slug = "";
    
                    /**
                     * GovalReplIdentity aud.
                     * @member {string} aud
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.aud = "";
    
                    /**
                     * GovalReplIdentity ephemeral.
                     * @member {boolean} ephemeral
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.ephemeral = false;
    
                    /**
                     * GovalReplIdentity originReplid.
                     * @member {string} originReplid
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     */
                    GovalReplIdentity.prototype.originReplid = "";
    
                    /**
                     * Creates a new GovalReplIdentity instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {replit.goval.api.IGovalReplIdentity=} [properties] Properties to set
                     * @returns {replit.goval.api.GovalReplIdentity} GovalReplIdentity instance
                     */
                    GovalReplIdentity.create = function create(properties) {
                        return GovalReplIdentity.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GovalReplIdentity message. Does not implicitly {@link replit.goval.api.GovalReplIdentity.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {replit.goval.api.GovalReplIdentity} message GovalReplIdentity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalReplIdentity.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replid != null && Object.hasOwnProperty.call(message, "replid"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replid);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.user);
                        if (message.slug != null && Object.hasOwnProperty.call(message, "slug"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.slug);
                        if (message.aud != null && Object.hasOwnProperty.call(message, "aud"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.aud);
                        if (message.ephemeral != null && Object.hasOwnProperty.call(message, "ephemeral"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.ephemeral);
                        if (message.originReplid != null && Object.hasOwnProperty.call(message, "originReplid"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.originReplid);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GovalReplIdentity message, length delimited. Does not implicitly {@link replit.goval.api.GovalReplIdentity.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {replit.goval.api.GovalReplIdentity} message GovalReplIdentity message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalReplIdentity.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GovalReplIdentity message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GovalReplIdentity} GovalReplIdentity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalReplIdentity.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GovalReplIdentity();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replid = reader.string();
                                break;
                            case 2:
                                message.user = reader.string();
                                break;
                            case 3:
                                message.slug = reader.string();
                                break;
                            case 4:
                                message.aud = reader.string();
                                break;
                            case 5:
                                message.ephemeral = reader.bool();
                                break;
                            case 6:
                                message.originReplid = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GovalReplIdentity message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GovalReplIdentity} GovalReplIdentity
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalReplIdentity.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GovalReplIdentity message.
                     * @function verify
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GovalReplIdentity.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            if (!$util.isString(message.replid))
                                return "replid: string expected";
                        if (message.user != null && message.hasOwnProperty("user"))
                            if (!$util.isString(message.user))
                                return "user: string expected";
                        if (message.slug != null && message.hasOwnProperty("slug"))
                            if (!$util.isString(message.slug))
                                return "slug: string expected";
                        if (message.aud != null && message.hasOwnProperty("aud"))
                            if (!$util.isString(message.aud))
                                return "aud: string expected";
                        if (message.ephemeral != null && message.hasOwnProperty("ephemeral"))
                            if (typeof message.ephemeral !== "boolean")
                                return "ephemeral: boolean expected";
                        if (message.originReplid != null && message.hasOwnProperty("originReplid"))
                            if (!$util.isString(message.originReplid))
                                return "originReplid: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a GovalReplIdentity message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GovalReplIdentity} GovalReplIdentity
                     */
                    GovalReplIdentity.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GovalReplIdentity)
                            return object;
                        var message = new $root.replit.goval.api.GovalReplIdentity();
                        if (object.replid != null)
                            message.replid = String(object.replid);
                        if (object.user != null)
                            message.user = String(object.user);
                        if (object.slug != null)
                            message.slug = String(object.slug);
                        if (object.aud != null)
                            message.aud = String(object.aud);
                        if (object.ephemeral != null)
                            message.ephemeral = Boolean(object.ephemeral);
                        if (object.originReplid != null)
                            message.originReplid = String(object.originReplid);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GovalReplIdentity message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @static
                     * @param {replit.goval.api.GovalReplIdentity} message GovalReplIdentity
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GovalReplIdentity.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.replid = "";
                            object.user = "";
                            object.slug = "";
                            object.aud = "";
                            object.ephemeral = false;
                            object.originReplid = "";
                        }
                        if (message.replid != null && message.hasOwnProperty("replid"))
                            object.replid = message.replid;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = message.user;
                        if (message.slug != null && message.hasOwnProperty("slug"))
                            object.slug = message.slug;
                        if (message.aud != null && message.hasOwnProperty("aud"))
                            object.aud = message.aud;
                        if (message.ephemeral != null && message.hasOwnProperty("ephemeral"))
                            object.ephemeral = message.ephemeral;
                        if (message.originReplid != null && message.hasOwnProperty("originReplid"))
                            object.originReplid = message.originReplid;
                        return object;
                    };
    
                    /**
                     * Converts this GovalReplIdentity to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GovalReplIdentity
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GovalReplIdentity.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GovalReplIdentity;
                })();
    
                api.LoreCommand = (function() {
    
                    /**
                     * Properties of a LoreCommand.
                     * @memberof replit.goval.api
                     * @interface ILoreCommand
                     * @property {replit.goval.api.ClusterTransfer|replit.goval.api.IClusterTransfer|null} [clusterTransfer] LoreCommand clusterTransfer
                     * @property {replit.goval.api.SoftTakedown|replit.goval.api.ISoftTakedown|null} [softTakedown] LoreCommand softTakedown
                     * @property {replit.goval.api.GovalCommand|replit.goval.api.IGovalCommand|null} [govalCommand] LoreCommand govalCommand
                     * @property {replit.goval.api.MultiGovalCommand|replit.goval.api.IMultiGovalCommand|null} [multiGovalCommand] LoreCommand multiGovalCommand
                     * @property {replit.goval.api.Restore|replit.goval.api.IRestore|null} [restore] LoreCommand restore
                     */
    
                    /**
                     * Constructs a new LoreCommand.
                     * @memberof replit.goval.api
                     * @classdesc Represents a LoreCommand.
                     * @constructor
                     * @param {replit.goval.api.ILoreCommand=} [properties] Properties to set
                     */
                    function LoreCommand(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LoreCommand clusterTransfer.
                     * @member {replit.goval.api.ClusterTransfer|null|undefined} clusterTransfer
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    LoreCommand.prototype.clusterTransfer = null;
    
                    /**
                     * LoreCommand softTakedown.
                     * @member {replit.goval.api.SoftTakedown|null|undefined} softTakedown
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    LoreCommand.prototype.softTakedown = null;
    
                    /**
                     * LoreCommand govalCommand.
                     * @member {replit.goval.api.GovalCommand|null|undefined} govalCommand
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    LoreCommand.prototype.govalCommand = null;
    
                    /**
                     * LoreCommand multiGovalCommand.
                     * @member {replit.goval.api.MultiGovalCommand|null|undefined} multiGovalCommand
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    LoreCommand.prototype.multiGovalCommand = null;
    
                    /**
                     * LoreCommand restore.
                     * @member {replit.goval.api.Restore|null|undefined} restore
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    LoreCommand.prototype.restore = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * LoreCommand command.
                     * @member {"clusterTransfer"|"softTakedown"|"govalCommand"|"multiGovalCommand"|"restore"|undefined} command
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     */
                    Object.defineProperty(LoreCommand.prototype, "command", {
                        get: $util.oneOfGetter($oneOfFields = ["clusterTransfer", "softTakedown", "govalCommand", "multiGovalCommand", "restore"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new LoreCommand instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {replit.goval.api.ILoreCommand=} [properties] Properties to set
                     * @returns {replit.goval.api.LoreCommand} LoreCommand instance
                     */
                    LoreCommand.create = function create(properties) {
                        return LoreCommand.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified LoreCommand message. Does not implicitly {@link replit.goval.api.LoreCommand.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {replit.goval.api.LoreCommand} message LoreCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoreCommand.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.clusterTransfer != null && Object.hasOwnProperty.call(message, "clusterTransfer"))
                            $root.replit.goval.api.ClusterTransfer.encode(message.clusterTransfer, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.softTakedown != null && Object.hasOwnProperty.call(message, "softTakedown"))
                            $root.replit.goval.api.SoftTakedown.encode(message.softTakedown, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.govalCommand != null && Object.hasOwnProperty.call(message, "govalCommand"))
                            $root.replit.goval.api.GovalCommand.encode(message.govalCommand, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.restore != null && Object.hasOwnProperty.call(message, "restore"))
                            $root.replit.goval.api.Restore.encode(message.restore, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.multiGovalCommand != null && Object.hasOwnProperty.call(message, "multiGovalCommand"))
                            $root.replit.goval.api.MultiGovalCommand.encode(message.multiGovalCommand, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LoreCommand message, length delimited. Does not implicitly {@link replit.goval.api.LoreCommand.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {replit.goval.api.LoreCommand} message LoreCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LoreCommand.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LoreCommand message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.LoreCommand} LoreCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoreCommand.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.LoreCommand();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.clusterTransfer = $root.replit.goval.api.ClusterTransfer.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.softTakedown = $root.replit.goval.api.SoftTakedown.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.govalCommand = $root.replit.goval.api.GovalCommand.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.multiGovalCommand = $root.replit.goval.api.MultiGovalCommand.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.restore = $root.replit.goval.api.Restore.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LoreCommand message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.LoreCommand} LoreCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LoreCommand.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LoreCommand message.
                     * @function verify
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LoreCommand.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.clusterTransfer != null && message.hasOwnProperty("clusterTransfer")) {
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.ClusterTransfer.verify(message.clusterTransfer);
                                if (error)
                                    return "clusterTransfer." + error;
                            }
                        }
                        if (message.softTakedown != null && message.hasOwnProperty("softTakedown")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.SoftTakedown.verify(message.softTakedown);
                                if (error)
                                    return "softTakedown." + error;
                            }
                        }
                        if (message.govalCommand != null && message.hasOwnProperty("govalCommand")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.GovalCommand.verify(message.govalCommand);
                                if (error)
                                    return "govalCommand." + error;
                            }
                        }
                        if (message.multiGovalCommand != null && message.hasOwnProperty("multiGovalCommand")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.MultiGovalCommand.verify(message.multiGovalCommand);
                                if (error)
                                    return "multiGovalCommand." + error;
                            }
                        }
                        if (message.restore != null && message.hasOwnProperty("restore")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.Restore.verify(message.restore);
                                if (error)
                                    return "restore." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LoreCommand message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.LoreCommand} LoreCommand
                     */
                    LoreCommand.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.LoreCommand)
                            return object;
                        var message = new $root.replit.goval.api.LoreCommand();
                        if (object.clusterTransfer != null) {
                            if (typeof object.clusterTransfer !== "object")
                                throw TypeError(".replit.goval.api.LoreCommand.clusterTransfer: object expected");
                            message.clusterTransfer = $root.replit.goval.api.ClusterTransfer.fromObject(object.clusterTransfer);
                        }
                        if (object.softTakedown != null) {
                            if (typeof object.softTakedown !== "object")
                                throw TypeError(".replit.goval.api.LoreCommand.softTakedown: object expected");
                            message.softTakedown = $root.replit.goval.api.SoftTakedown.fromObject(object.softTakedown);
                        }
                        if (object.govalCommand != null) {
                            if (typeof object.govalCommand !== "object")
                                throw TypeError(".replit.goval.api.LoreCommand.govalCommand: object expected");
                            message.govalCommand = $root.replit.goval.api.GovalCommand.fromObject(object.govalCommand);
                        }
                        if (object.multiGovalCommand != null) {
                            if (typeof object.multiGovalCommand !== "object")
                                throw TypeError(".replit.goval.api.LoreCommand.multiGovalCommand: object expected");
                            message.multiGovalCommand = $root.replit.goval.api.MultiGovalCommand.fromObject(object.multiGovalCommand);
                        }
                        if (object.restore != null) {
                            if (typeof object.restore !== "object")
                                throw TypeError(".replit.goval.api.LoreCommand.restore: object expected");
                            message.restore = $root.replit.goval.api.Restore.fromObject(object.restore);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LoreCommand message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.LoreCommand
                     * @static
                     * @param {replit.goval.api.LoreCommand} message LoreCommand
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LoreCommand.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.clusterTransfer != null && message.hasOwnProperty("clusterTransfer")) {
                            object.clusterTransfer = $root.replit.goval.api.ClusterTransfer.toObject(message.clusterTransfer, options);
                            if (options.oneofs)
                                object.command = "clusterTransfer";
                        }
                        if (message.softTakedown != null && message.hasOwnProperty("softTakedown")) {
                            object.softTakedown = $root.replit.goval.api.SoftTakedown.toObject(message.softTakedown, options);
                            if (options.oneofs)
                                object.command = "softTakedown";
                        }
                        if (message.govalCommand != null && message.hasOwnProperty("govalCommand")) {
                            object.govalCommand = $root.replit.goval.api.GovalCommand.toObject(message.govalCommand, options);
                            if (options.oneofs)
                                object.command = "govalCommand";
                        }
                        if (message.restore != null && message.hasOwnProperty("restore")) {
                            object.restore = $root.replit.goval.api.Restore.toObject(message.restore, options);
                            if (options.oneofs)
                                object.command = "restore";
                        }
                        if (message.multiGovalCommand != null && message.hasOwnProperty("multiGovalCommand")) {
                            object.multiGovalCommand = $root.replit.goval.api.MultiGovalCommand.toObject(message.multiGovalCommand, options);
                            if (options.oneofs)
                                object.command = "multiGovalCommand";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this LoreCommand to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.LoreCommand
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LoreCommand.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return LoreCommand;
                })();
    
                api.ClusterTransfer = (function() {
    
                    /**
                     * Properties of a ClusterTransfer.
                     * @memberof replit.goval.api
                     * @interface IClusterTransfer
                     * @property {string|null} [replId] ClusterTransfer replId
                     * @property {string|null} [user] ClusterTransfer user
                     * @property {string|null} [newClusterId] ClusterTransfer newClusterId
                     * @property {string|null} [newContinentId] ClusterTransfer newContinentId
                     * @property {string|null} [transferId] ClusterTransfer transferId
                     */
    
                    /**
                     * Constructs a new ClusterTransfer.
                     * @memberof replit.goval.api
                     * @classdesc Represents a ClusterTransfer.
                     * @constructor
                     * @param {replit.goval.api.IClusterTransfer=} [properties] Properties to set
                     */
                    function ClusterTransfer(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ClusterTransfer replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    ClusterTransfer.prototype.replId = "";
    
                    /**
                     * ClusterTransfer user.
                     * @member {string} user
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    ClusterTransfer.prototype.user = "";
    
                    /**
                     * ClusterTransfer newClusterId.
                     * @member {string|null|undefined} newClusterId
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    ClusterTransfer.prototype.newClusterId = null;
    
                    /**
                     * ClusterTransfer newContinentId.
                     * @member {string|null|undefined} newContinentId
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    ClusterTransfer.prototype.newContinentId = null;
    
                    /**
                     * ClusterTransfer transferId.
                     * @member {string} transferId
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    ClusterTransfer.prototype.transferId = "";
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * ClusterTransfer location.
                     * @member {"newClusterId"|"newContinentId"|undefined} location
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     */
                    Object.defineProperty(ClusterTransfer.prototype, "location", {
                        get: $util.oneOfGetter($oneOfFields = ["newClusterId", "newContinentId"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new ClusterTransfer instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {replit.goval.api.IClusterTransfer=} [properties] Properties to set
                     * @returns {replit.goval.api.ClusterTransfer} ClusterTransfer instance
                     */
                    ClusterTransfer.create = function create(properties) {
                        return ClusterTransfer.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified ClusterTransfer message. Does not implicitly {@link replit.goval.api.ClusterTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {replit.goval.api.ClusterTransfer} message ClusterTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClusterTransfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.user);
                        if (message.newClusterId != null && Object.hasOwnProperty.call(message, "newClusterId"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.newClusterId);
                        if (message.transferId != null && Object.hasOwnProperty.call(message, "transferId"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.transferId);
                        if (message.newContinentId != null && Object.hasOwnProperty.call(message, "newContinentId"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.newContinentId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ClusterTransfer message, length delimited. Does not implicitly {@link replit.goval.api.ClusterTransfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {replit.goval.api.ClusterTransfer} message ClusterTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClusterTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ClusterTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.ClusterTransfer} ClusterTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClusterTransfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.ClusterTransfer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                message.user = reader.string();
                                break;
                            case 3:
                                message.newClusterId = reader.string();
                                break;
                            case 5:
                                message.newContinentId = reader.string();
                                break;
                            case 4:
                                message.transferId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ClusterTransfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.ClusterTransfer} ClusterTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClusterTransfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ClusterTransfer message.
                     * @function verify
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClusterTransfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.user != null && message.hasOwnProperty("user"))
                            if (!$util.isString(message.user))
                                return "user: string expected";
                        if (message.newClusterId != null && message.hasOwnProperty("newClusterId")) {
                            properties.location = 1;
                            if (!$util.isString(message.newClusterId))
                                return "newClusterId: string expected";
                        }
                        if (message.newContinentId != null && message.hasOwnProperty("newContinentId")) {
                            if (properties.location === 1)
                                return "location: multiple values";
                            properties.location = 1;
                            if (!$util.isString(message.newContinentId))
                                return "newContinentId: string expected";
                        }
                        if (message.transferId != null && message.hasOwnProperty("transferId"))
                            if (!$util.isString(message.transferId))
                                return "transferId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a ClusterTransfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.ClusterTransfer} ClusterTransfer
                     */
                    ClusterTransfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.ClusterTransfer)
                            return object;
                        var message = new $root.replit.goval.api.ClusterTransfer();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.user != null)
                            message.user = String(object.user);
                        if (object.newClusterId != null)
                            message.newClusterId = String(object.newClusterId);
                        if (object.newContinentId != null)
                            message.newContinentId = String(object.newContinentId);
                        if (object.transferId != null)
                            message.transferId = String(object.transferId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ClusterTransfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.ClusterTransfer
                     * @static
                     * @param {replit.goval.api.ClusterTransfer} message ClusterTransfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClusterTransfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.replId = "";
                            object.user = "";
                            object.transferId = "";
                        }
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.user != null && message.hasOwnProperty("user"))
                            object.user = message.user;
                        if (message.newClusterId != null && message.hasOwnProperty("newClusterId")) {
                            object.newClusterId = message.newClusterId;
                            if (options.oneofs)
                                object.location = "newClusterId";
                        }
                        if (message.transferId != null && message.hasOwnProperty("transferId"))
                            object.transferId = message.transferId;
                        if (message.newContinentId != null && message.hasOwnProperty("newContinentId")) {
                            object.newContinentId = message.newContinentId;
                            if (options.oneofs)
                                object.location = "newContinentId";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this ClusterTransfer to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.ClusterTransfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClusterTransfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ClusterTransfer;
                })();
    
                api.SoftTakedown = (function() {
    
                    /**
                     * Properties of a SoftTakedown.
                     * @memberof replit.goval.api
                     * @interface ISoftTakedown
                     * @property {string|null} [replId] SoftTakedown replId
                     * @property {string|null} [softTakedownId] SoftTakedown softTakedownId
                     */
    
                    /**
                     * Constructs a new SoftTakedown.
                     * @memberof replit.goval.api
                     * @classdesc Represents a SoftTakedown.
                     * @constructor
                     * @param {replit.goval.api.ISoftTakedown=} [properties] Properties to set
                     */
                    function SoftTakedown(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SoftTakedown replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.SoftTakedown
                     * @instance
                     */
                    SoftTakedown.prototype.replId = "";
    
                    /**
                     * SoftTakedown softTakedownId.
                     * @member {string} softTakedownId
                     * @memberof replit.goval.api.SoftTakedown
                     * @instance
                     */
                    SoftTakedown.prototype.softTakedownId = "";
    
                    /**
                     * Creates a new SoftTakedown instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {replit.goval.api.ISoftTakedown=} [properties] Properties to set
                     * @returns {replit.goval.api.SoftTakedown} SoftTakedown instance
                     */
                    SoftTakedown.create = function create(properties) {
                        return SoftTakedown.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified SoftTakedown message. Does not implicitly {@link replit.goval.api.SoftTakedown.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {replit.goval.api.SoftTakedown} message SoftTakedown message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SoftTakedown.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.softTakedownId != null && Object.hasOwnProperty.call(message, "softTakedownId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.softTakedownId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SoftTakedown message, length delimited. Does not implicitly {@link replit.goval.api.SoftTakedown.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {replit.goval.api.SoftTakedown} message SoftTakedown message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SoftTakedown.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SoftTakedown message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.SoftTakedown} SoftTakedown
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SoftTakedown.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.SoftTakedown();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                message.softTakedownId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SoftTakedown message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.SoftTakedown} SoftTakedown
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SoftTakedown.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SoftTakedown message.
                     * @function verify
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SoftTakedown.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.softTakedownId != null && message.hasOwnProperty("softTakedownId"))
                            if (!$util.isString(message.softTakedownId))
                                return "softTakedownId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a SoftTakedown message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.SoftTakedown} SoftTakedown
                     */
                    SoftTakedown.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.SoftTakedown)
                            return object;
                        var message = new $root.replit.goval.api.SoftTakedown();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.softTakedownId != null)
                            message.softTakedownId = String(object.softTakedownId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SoftTakedown message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.SoftTakedown
                     * @static
                     * @param {replit.goval.api.SoftTakedown} message SoftTakedown
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SoftTakedown.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.replId = "";
                            object.softTakedownId = "";
                        }
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.softTakedownId != null && message.hasOwnProperty("softTakedownId"))
                            object.softTakedownId = message.softTakedownId;
                        return object;
                    };
    
                    /**
                     * Converts this SoftTakedown to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.SoftTakedown
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SoftTakedown.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SoftTakedown;
                })();
    
                api.GovalCommand = (function() {
    
                    /**
                     * Properties of a GovalCommand.
                     * @memberof replit.goval.api
                     * @interface IGovalCommand
                     * @property {replit.goval.api.repl.Metadata|replit.goval.api.repl.IMetadata|null} [updateMetadata] GovalCommand updateMetadata
                     * @property {replit.goval.api.PartialUpdateMetadata|replit.goval.api.IPartialUpdateMetadata|null} [partialUpdateMetadata] GovalCommand partialUpdateMetadata
                     * @property {replit.goval.api.KillRepl|replit.goval.api.IKillRepl|null} [killRepl] GovalCommand killRepl
                     * @property {replit.goval.api.UpdateSourceRepl|replit.goval.api.IUpdateSourceRepl|null} [updateSourceRepl] GovalCommand updateSourceRepl
                     * @property {replit.goval.api.UpdateReplFlags|replit.goval.api.IUpdateReplFlags|null} [updateReplFlags] GovalCommand updateReplFlags
                     */
    
                    /**
                     * Constructs a new GovalCommand.
                     * @memberof replit.goval.api
                     * @classdesc Represents a GovalCommand.
                     * @constructor
                     * @param {replit.goval.api.IGovalCommand=} [properties] Properties to set
                     */
                    function GovalCommand(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GovalCommand updateMetadata.
                     * @member {replit.goval.api.repl.Metadata|null|undefined} updateMetadata
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    GovalCommand.prototype.updateMetadata = null;
    
                    /**
                     * GovalCommand partialUpdateMetadata.
                     * @member {replit.goval.api.PartialUpdateMetadata|null|undefined} partialUpdateMetadata
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    GovalCommand.prototype.partialUpdateMetadata = null;
    
                    /**
                     * GovalCommand killRepl.
                     * @member {replit.goval.api.KillRepl|null|undefined} killRepl
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    GovalCommand.prototype.killRepl = null;
    
                    /**
                     * GovalCommand updateSourceRepl.
                     * @member {replit.goval.api.UpdateSourceRepl|null|undefined} updateSourceRepl
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    GovalCommand.prototype.updateSourceRepl = null;
    
                    /**
                     * GovalCommand updateReplFlags.
                     * @member {replit.goval.api.UpdateReplFlags|null|undefined} updateReplFlags
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    GovalCommand.prototype.updateReplFlags = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * GovalCommand command.
                     * @member {"updateMetadata"|"partialUpdateMetadata"|"killRepl"|"updateSourceRepl"|"updateReplFlags"|undefined} command
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     */
                    Object.defineProperty(GovalCommand.prototype, "command", {
                        get: $util.oneOfGetter($oneOfFields = ["updateMetadata", "partialUpdateMetadata", "killRepl", "updateSourceRepl", "updateReplFlags"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new GovalCommand instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {replit.goval.api.IGovalCommand=} [properties] Properties to set
                     * @returns {replit.goval.api.GovalCommand} GovalCommand instance
                     */
                    GovalCommand.create = function create(properties) {
                        return GovalCommand.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified GovalCommand message. Does not implicitly {@link replit.goval.api.GovalCommand.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {replit.goval.api.GovalCommand} message GovalCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalCommand.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.updateMetadata != null && Object.hasOwnProperty.call(message, "updateMetadata"))
                            $root.replit.goval.api.repl.Metadata.encode(message.updateMetadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.partialUpdateMetadata != null && Object.hasOwnProperty.call(message, "partialUpdateMetadata"))
                            $root.replit.goval.api.PartialUpdateMetadata.encode(message.partialUpdateMetadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.killRepl != null && Object.hasOwnProperty.call(message, "killRepl"))
                            $root.replit.goval.api.KillRepl.encode(message.killRepl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.updateSourceRepl != null && Object.hasOwnProperty.call(message, "updateSourceRepl"))
                            $root.replit.goval.api.UpdateSourceRepl.encode(message.updateSourceRepl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.updateReplFlags != null && Object.hasOwnProperty.call(message, "updateReplFlags"))
                            $root.replit.goval.api.UpdateReplFlags.encode(message.updateReplFlags, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GovalCommand message, length delimited. Does not implicitly {@link replit.goval.api.GovalCommand.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {replit.goval.api.GovalCommand} message GovalCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GovalCommand.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GovalCommand message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.GovalCommand} GovalCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalCommand.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.GovalCommand();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.updateMetadata = $root.replit.goval.api.repl.Metadata.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.partialUpdateMetadata = $root.replit.goval.api.PartialUpdateMetadata.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.killRepl = $root.replit.goval.api.KillRepl.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.updateSourceRepl = $root.replit.goval.api.UpdateSourceRepl.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.updateReplFlags = $root.replit.goval.api.UpdateReplFlags.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GovalCommand message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.GovalCommand} GovalCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GovalCommand.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GovalCommand message.
                     * @function verify
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GovalCommand.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.updateMetadata != null && message.hasOwnProperty("updateMetadata")) {
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.repl.Metadata.verify(message.updateMetadata);
                                if (error)
                                    return "updateMetadata." + error;
                            }
                        }
                        if (message.partialUpdateMetadata != null && message.hasOwnProperty("partialUpdateMetadata")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.PartialUpdateMetadata.verify(message.partialUpdateMetadata);
                                if (error)
                                    return "partialUpdateMetadata." + error;
                            }
                        }
                        if (message.killRepl != null && message.hasOwnProperty("killRepl")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.KillRepl.verify(message.killRepl);
                                if (error)
                                    return "killRepl." + error;
                            }
                        }
                        if (message.updateSourceRepl != null && message.hasOwnProperty("updateSourceRepl")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.UpdateSourceRepl.verify(message.updateSourceRepl);
                                if (error)
                                    return "updateSourceRepl." + error;
                            }
                        }
                        if (message.updateReplFlags != null && message.hasOwnProperty("updateReplFlags")) {
                            if (properties.command === 1)
                                return "command: multiple values";
                            properties.command = 1;
                            {
                                var error = $root.replit.goval.api.UpdateReplFlags.verify(message.updateReplFlags);
                                if (error)
                                    return "updateReplFlags." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GovalCommand message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.GovalCommand} GovalCommand
                     */
                    GovalCommand.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.GovalCommand)
                            return object;
                        var message = new $root.replit.goval.api.GovalCommand();
                        if (object.updateMetadata != null) {
                            if (typeof object.updateMetadata !== "object")
                                throw TypeError(".replit.goval.api.GovalCommand.updateMetadata: object expected");
                            message.updateMetadata = $root.replit.goval.api.repl.Metadata.fromObject(object.updateMetadata);
                        }
                        if (object.partialUpdateMetadata != null) {
                            if (typeof object.partialUpdateMetadata !== "object")
                                throw TypeError(".replit.goval.api.GovalCommand.partialUpdateMetadata: object expected");
                            message.partialUpdateMetadata = $root.replit.goval.api.PartialUpdateMetadata.fromObject(object.partialUpdateMetadata);
                        }
                        if (object.killRepl != null) {
                            if (typeof object.killRepl !== "object")
                                throw TypeError(".replit.goval.api.GovalCommand.killRepl: object expected");
                            message.killRepl = $root.replit.goval.api.KillRepl.fromObject(object.killRepl);
                        }
                        if (object.updateSourceRepl != null) {
                            if (typeof object.updateSourceRepl !== "object")
                                throw TypeError(".replit.goval.api.GovalCommand.updateSourceRepl: object expected");
                            message.updateSourceRepl = $root.replit.goval.api.UpdateSourceRepl.fromObject(object.updateSourceRepl);
                        }
                        if (object.updateReplFlags != null) {
                            if (typeof object.updateReplFlags !== "object")
                                throw TypeError(".replit.goval.api.GovalCommand.updateReplFlags: object expected");
                            message.updateReplFlags = $root.replit.goval.api.UpdateReplFlags.fromObject(object.updateReplFlags);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GovalCommand message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.GovalCommand
                     * @static
                     * @param {replit.goval.api.GovalCommand} message GovalCommand
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GovalCommand.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.updateMetadata != null && message.hasOwnProperty("updateMetadata")) {
                            object.updateMetadata = $root.replit.goval.api.repl.Metadata.toObject(message.updateMetadata, options);
                            if (options.oneofs)
                                object.command = "updateMetadata";
                        }
                        if (message.partialUpdateMetadata != null && message.hasOwnProperty("partialUpdateMetadata")) {
                            object.partialUpdateMetadata = $root.replit.goval.api.PartialUpdateMetadata.toObject(message.partialUpdateMetadata, options);
                            if (options.oneofs)
                                object.command = "partialUpdateMetadata";
                        }
                        if (message.killRepl != null && message.hasOwnProperty("killRepl")) {
                            object.killRepl = $root.replit.goval.api.KillRepl.toObject(message.killRepl, options);
                            if (options.oneofs)
                                object.command = "killRepl";
                        }
                        if (message.updateSourceRepl != null && message.hasOwnProperty("updateSourceRepl")) {
                            object.updateSourceRepl = $root.replit.goval.api.UpdateSourceRepl.toObject(message.updateSourceRepl, options);
                            if (options.oneofs)
                                object.command = "updateSourceRepl";
                        }
                        if (message.updateReplFlags != null && message.hasOwnProperty("updateReplFlags")) {
                            object.updateReplFlags = $root.replit.goval.api.UpdateReplFlags.toObject(message.updateReplFlags, options);
                            if (options.oneofs)
                                object.command = "updateReplFlags";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GovalCommand to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.GovalCommand
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GovalCommand.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GovalCommand;
                })();
    
                api.PartialUpdateMetadata = (function() {
    
                    /**
                     * Properties of a PartialUpdateMetadata.
                     * @memberof replit.goval.api
                     * @interface IPartialUpdateMetadata
                     * @property {google.protobuf.FieldMask|google.protobuf.IFieldMask|null} [fieldMask] PartialUpdateMetadata fieldMask
                     * @property {replit.goval.api.repl.Metadata|replit.goval.api.repl.IMetadata|null} [updateMetadata] PartialUpdateMetadata updateMetadata
                     */
    
                    /**
                     * Constructs a new PartialUpdateMetadata.
                     * @memberof replit.goval.api
                     * @classdesc Represents a PartialUpdateMetadata.
                     * @constructor
                     * @param {replit.goval.api.IPartialUpdateMetadata=} [properties] Properties to set
                     */
                    function PartialUpdateMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PartialUpdateMetadata fieldMask.
                     * @member {google.protobuf.FieldMask|null|undefined} fieldMask
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @instance
                     */
                    PartialUpdateMetadata.prototype.fieldMask = null;
    
                    /**
                     * PartialUpdateMetadata updateMetadata.
                     * @member {replit.goval.api.repl.Metadata|null|undefined} updateMetadata
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @instance
                     */
                    PartialUpdateMetadata.prototype.updateMetadata = null;
    
                    /**
                     * Creates a new PartialUpdateMetadata instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {replit.goval.api.IPartialUpdateMetadata=} [properties] Properties to set
                     * @returns {replit.goval.api.PartialUpdateMetadata} PartialUpdateMetadata instance
                     */
                    PartialUpdateMetadata.create = function create(properties) {
                        return PartialUpdateMetadata.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified PartialUpdateMetadata message. Does not implicitly {@link replit.goval.api.PartialUpdateMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {replit.goval.api.PartialUpdateMetadata} message PartialUpdateMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartialUpdateMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.fieldMask != null && Object.hasOwnProperty.call(message, "fieldMask"))
                            $root.google.protobuf.FieldMask.encode(message.fieldMask, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.updateMetadata != null && Object.hasOwnProperty.call(message, "updateMetadata"))
                            $root.replit.goval.api.repl.Metadata.encode(message.updateMetadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PartialUpdateMetadata message, length delimited. Does not implicitly {@link replit.goval.api.PartialUpdateMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {replit.goval.api.PartialUpdateMetadata} message PartialUpdateMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PartialUpdateMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PartialUpdateMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.PartialUpdateMetadata} PartialUpdateMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartialUpdateMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.PartialUpdateMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.fieldMask = $root.google.protobuf.FieldMask.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.updateMetadata = $root.replit.goval.api.repl.Metadata.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PartialUpdateMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.PartialUpdateMetadata} PartialUpdateMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PartialUpdateMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PartialUpdateMetadata message.
                     * @function verify
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PartialUpdateMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.fieldMask != null && message.hasOwnProperty("fieldMask")) {
                            var error = $root.google.protobuf.FieldMask.verify(message.fieldMask);
                            if (error)
                                return "fieldMask." + error;
                        }
                        if (message.updateMetadata != null && message.hasOwnProperty("updateMetadata")) {
                            var error = $root.replit.goval.api.repl.Metadata.verify(message.updateMetadata);
                            if (error)
                                return "updateMetadata." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a PartialUpdateMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.PartialUpdateMetadata} PartialUpdateMetadata
                     */
                    PartialUpdateMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.PartialUpdateMetadata)
                            return object;
                        var message = new $root.replit.goval.api.PartialUpdateMetadata();
                        if (object.fieldMask != null) {
                            if (typeof object.fieldMask !== "object")
                                throw TypeError(".replit.goval.api.PartialUpdateMetadata.fieldMask: object expected");
                            message.fieldMask = $root.google.protobuf.FieldMask.fromObject(object.fieldMask);
                        }
                        if (object.updateMetadata != null) {
                            if (typeof object.updateMetadata !== "object")
                                throw TypeError(".replit.goval.api.PartialUpdateMetadata.updateMetadata: object expected");
                            message.updateMetadata = $root.replit.goval.api.repl.Metadata.fromObject(object.updateMetadata);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PartialUpdateMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @static
                     * @param {replit.goval.api.PartialUpdateMetadata} message PartialUpdateMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PartialUpdateMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.fieldMask = null;
                            object.updateMetadata = null;
                        }
                        if (message.fieldMask != null && message.hasOwnProperty("fieldMask"))
                            object.fieldMask = $root.google.protobuf.FieldMask.toObject(message.fieldMask, options);
                        if (message.updateMetadata != null && message.hasOwnProperty("updateMetadata"))
                            object.updateMetadata = $root.replit.goval.api.repl.Metadata.toObject(message.updateMetadata, options);
                        return object;
                    };
    
                    /**
                     * Converts this PartialUpdateMetadata to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.PartialUpdateMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PartialUpdateMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return PartialUpdateMetadata;
                })();
    
                api.MultiGovalCommand = (function() {
    
                    /**
                     * Properties of a MultiGovalCommand.
                     * @memberof replit.goval.api
                     * @interface IMultiGovalCommand
                     * @property {string|null} [replId] MultiGovalCommand replId
                     * @property {Array.<replit.goval.api.GovalCommand|replit.goval.api.IGovalCommand>|null} [govalCommands] MultiGovalCommand govalCommands
                     */
    
                    /**
                     * Constructs a new MultiGovalCommand.
                     * @memberof replit.goval.api
                     * @classdesc Represents a MultiGovalCommand.
                     * @constructor
                     * @param {replit.goval.api.IMultiGovalCommand=} [properties] Properties to set
                     */
                    function MultiGovalCommand(properties) {
                        this.govalCommands = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MultiGovalCommand replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @instance
                     */
                    MultiGovalCommand.prototype.replId = "";
    
                    /**
                     * MultiGovalCommand govalCommands.
                     * @member {Array.<replit.goval.api.GovalCommand>} govalCommands
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @instance
                     */
                    MultiGovalCommand.prototype.govalCommands = $util.emptyArray;
    
                    /**
                     * Creates a new MultiGovalCommand instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {replit.goval.api.IMultiGovalCommand=} [properties] Properties to set
                     * @returns {replit.goval.api.MultiGovalCommand} MultiGovalCommand instance
                     */
                    MultiGovalCommand.create = function create(properties) {
                        return MultiGovalCommand.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified MultiGovalCommand message. Does not implicitly {@link replit.goval.api.MultiGovalCommand.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {replit.goval.api.MultiGovalCommand} message MultiGovalCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiGovalCommand.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.govalCommands != null && message.govalCommands.length)
                            for (var i = 0; i < message.govalCommands.length; ++i)
                                $root.replit.goval.api.GovalCommand.encode(message.govalCommands[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MultiGovalCommand message, length delimited. Does not implicitly {@link replit.goval.api.MultiGovalCommand.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {replit.goval.api.MultiGovalCommand} message MultiGovalCommand message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MultiGovalCommand.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MultiGovalCommand message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.MultiGovalCommand} MultiGovalCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiGovalCommand.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.MultiGovalCommand();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                if (!(message.govalCommands && message.govalCommands.length))
                                    message.govalCommands = [];
                                message.govalCommands.push($root.replit.goval.api.GovalCommand.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MultiGovalCommand message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.MultiGovalCommand} MultiGovalCommand
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MultiGovalCommand.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MultiGovalCommand message.
                     * @function verify
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MultiGovalCommand.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.govalCommands != null && message.hasOwnProperty("govalCommands")) {
                            if (!Array.isArray(message.govalCommands))
                                return "govalCommands: array expected";
                            for (var i = 0; i < message.govalCommands.length; ++i) {
                                var error = $root.replit.goval.api.GovalCommand.verify(message.govalCommands[i]);
                                if (error)
                                    return "govalCommands." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MultiGovalCommand message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.MultiGovalCommand} MultiGovalCommand
                     */
                    MultiGovalCommand.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.MultiGovalCommand)
                            return object;
                        var message = new $root.replit.goval.api.MultiGovalCommand();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.govalCommands) {
                            if (!Array.isArray(object.govalCommands))
                                throw TypeError(".replit.goval.api.MultiGovalCommand.govalCommands: array expected");
                            message.govalCommands = [];
                            for (var i = 0; i < object.govalCommands.length; ++i) {
                                if (typeof object.govalCommands[i] !== "object")
                                    throw TypeError(".replit.goval.api.MultiGovalCommand.govalCommands: object expected");
                                message.govalCommands[i] = $root.replit.goval.api.GovalCommand.fromObject(object.govalCommands[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MultiGovalCommand message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @static
                     * @param {replit.goval.api.MultiGovalCommand} message MultiGovalCommand
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MultiGovalCommand.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.govalCommands = [];
                        if (options.defaults)
                            object.replId = "";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.govalCommands && message.govalCommands.length) {
                            object.govalCommands = [];
                            for (var j = 0; j < message.govalCommands.length; ++j)
                                object.govalCommands[j] = $root.replit.goval.api.GovalCommand.toObject(message.govalCommands[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this MultiGovalCommand to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.MultiGovalCommand
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MultiGovalCommand.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MultiGovalCommand;
                })();
    
                api.KillRepl = (function() {
    
                    /**
                     * Properties of a KillRepl.
                     * @memberof replit.goval.api
                     * @interface IKillRepl
                     * @property {string|null} [replId] KillRepl replId
                     */
    
                    /**
                     * Constructs a new KillRepl.
                     * @memberof replit.goval.api
                     * @classdesc Represents a KillRepl.
                     * @constructor
                     * @param {replit.goval.api.IKillRepl=} [properties] Properties to set
                     */
                    function KillRepl(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * KillRepl replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.KillRepl
                     * @instance
                     */
                    KillRepl.prototype.replId = "";
    
                    /**
                     * Creates a new KillRepl instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {replit.goval.api.IKillRepl=} [properties] Properties to set
                     * @returns {replit.goval.api.KillRepl} KillRepl instance
                     */
                    KillRepl.create = function create(properties) {
                        return KillRepl.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified KillRepl message. Does not implicitly {@link replit.goval.api.KillRepl.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {replit.goval.api.KillRepl} message KillRepl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KillRepl.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified KillRepl message, length delimited. Does not implicitly {@link replit.goval.api.KillRepl.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {replit.goval.api.KillRepl} message KillRepl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KillRepl.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a KillRepl message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.KillRepl} KillRepl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KillRepl.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.KillRepl();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a KillRepl message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.KillRepl} KillRepl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KillRepl.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a KillRepl message.
                     * @function verify
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    KillRepl.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a KillRepl message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.KillRepl} KillRepl
                     */
                    KillRepl.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.KillRepl)
                            return object;
                        var message = new $root.replit.goval.api.KillRepl();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a KillRepl message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.KillRepl
                     * @static
                     * @param {replit.goval.api.KillRepl} message KillRepl
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    KillRepl.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.replId = "";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        return object;
                    };
    
                    /**
                     * Converts this KillRepl to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.KillRepl
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    KillRepl.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return KillRepl;
                })();
    
                api.Restore = (function() {
    
                    /**
                     * Properties of a Restore.
                     * @memberof replit.goval.api
                     * @interface IRestore
                     * @property {string|null} [replId] Restore replId
                     * @property {string|null} [restoreReplId] Restore restoreReplId
                     */
    
                    /**
                     * Constructs a new Restore.
                     * @memberof replit.goval.api
                     * @classdesc Represents a Restore.
                     * @constructor
                     * @param {replit.goval.api.IRestore=} [properties] Properties to set
                     */
                    function Restore(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Restore replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.Restore
                     * @instance
                     */
                    Restore.prototype.replId = "";
    
                    /**
                     * Restore restoreReplId.
                     * @member {string} restoreReplId
                     * @memberof replit.goval.api.Restore
                     * @instance
                     */
                    Restore.prototype.restoreReplId = "";
    
                    /**
                     * Creates a new Restore instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {replit.goval.api.IRestore=} [properties] Properties to set
                     * @returns {replit.goval.api.Restore} Restore instance
                     */
                    Restore.create = function create(properties) {
                        return Restore.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified Restore message. Does not implicitly {@link replit.goval.api.Restore.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {replit.goval.api.Restore} message Restore message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Restore.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.restoreReplId != null && Object.hasOwnProperty.call(message, "restoreReplId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.restoreReplId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Restore message, length delimited. Does not implicitly {@link replit.goval.api.Restore.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {replit.goval.api.Restore} message Restore message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Restore.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Restore message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.Restore} Restore
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Restore.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.Restore();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                message.restoreReplId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Restore message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.Restore} Restore
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Restore.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Restore message.
                     * @function verify
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Restore.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.restoreReplId != null && message.hasOwnProperty("restoreReplId"))
                            if (!$util.isString(message.restoreReplId))
                                return "restoreReplId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Restore message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.Restore} Restore
                     */
                    Restore.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.Restore)
                            return object;
                        var message = new $root.replit.goval.api.Restore();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.restoreReplId != null)
                            message.restoreReplId = String(object.restoreReplId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Restore message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.Restore
                     * @static
                     * @param {replit.goval.api.Restore} message Restore
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Restore.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.replId = "";
                            object.restoreReplId = "";
                        }
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.restoreReplId != null && message.hasOwnProperty("restoreReplId"))
                            object.restoreReplId = message.restoreReplId;
                        return object;
                    };
    
                    /**
                     * Converts this Restore to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.Restore
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Restore.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Restore;
                })();
    
                api.UpdateSourceRepl = (function() {
    
                    /**
                     * Properties of an UpdateSourceRepl.
                     * @memberof replit.goval.api
                     * @interface IUpdateSourceRepl
                     * @property {string|null} [replId] UpdateSourceRepl replId
                     * @property {string|null} [sourceReplId] UpdateSourceRepl sourceReplId
                     */
    
                    /**
                     * Constructs a new UpdateSourceRepl.
                     * @memberof replit.goval.api
                     * @classdesc Represents an UpdateSourceRepl.
                     * @constructor
                     * @param {replit.goval.api.IUpdateSourceRepl=} [properties] Properties to set
                     */
                    function UpdateSourceRepl(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateSourceRepl replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @instance
                     */
                    UpdateSourceRepl.prototype.replId = "";
    
                    /**
                     * UpdateSourceRepl sourceReplId.
                     * @member {string} sourceReplId
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @instance
                     */
                    UpdateSourceRepl.prototype.sourceReplId = "";
    
                    /**
                     * Creates a new UpdateSourceRepl instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {replit.goval.api.IUpdateSourceRepl=} [properties] Properties to set
                     * @returns {replit.goval.api.UpdateSourceRepl} UpdateSourceRepl instance
                     */
                    UpdateSourceRepl.create = function create(properties) {
                        return UpdateSourceRepl.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateSourceRepl message. Does not implicitly {@link replit.goval.api.UpdateSourceRepl.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {replit.goval.api.UpdateSourceRepl} message UpdateSourceRepl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSourceRepl.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.sourceReplId != null && Object.hasOwnProperty.call(message, "sourceReplId"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceReplId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateSourceRepl message, length delimited. Does not implicitly {@link replit.goval.api.UpdateSourceRepl.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {replit.goval.api.UpdateSourceRepl} message UpdateSourceRepl message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateSourceRepl.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateSourceRepl message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.UpdateSourceRepl} UpdateSourceRepl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSourceRepl.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.UpdateSourceRepl();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                message.sourceReplId = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateSourceRepl message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.UpdateSourceRepl} UpdateSourceRepl
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateSourceRepl.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateSourceRepl message.
                     * @function verify
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateSourceRepl.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.sourceReplId != null && message.hasOwnProperty("sourceReplId"))
                            if (!$util.isString(message.sourceReplId))
                                return "sourceReplId: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an UpdateSourceRepl message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.UpdateSourceRepl} UpdateSourceRepl
                     */
                    UpdateSourceRepl.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.UpdateSourceRepl)
                            return object;
                        var message = new $root.replit.goval.api.UpdateSourceRepl();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.sourceReplId != null)
                            message.sourceReplId = String(object.sourceReplId);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateSourceRepl message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @static
                     * @param {replit.goval.api.UpdateSourceRepl} message UpdateSourceRepl
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateSourceRepl.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.replId = "";
                            object.sourceReplId = "";
                        }
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.sourceReplId != null && message.hasOwnProperty("sourceReplId"))
                            object.sourceReplId = message.sourceReplId;
                        return object;
                    };
    
                    /**
                     * Converts this UpdateSourceRepl to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.UpdateSourceRepl
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateSourceRepl.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateSourceRepl;
                })();
    
                api.UpdateReplFlags = (function() {
    
                    /**
                     * Properties of an UpdateReplFlags.
                     * @memberof replit.goval.api
                     * @interface IUpdateReplFlags
                     * @property {string|null} [replId] UpdateReplFlags replId
                     * @property {Array.<string>|null} [flags] UpdateReplFlags flags
                     */
    
                    /**
                     * Constructs a new UpdateReplFlags.
                     * @memberof replit.goval.api
                     * @classdesc Represents an UpdateReplFlags.
                     * @constructor
                     * @param {replit.goval.api.IUpdateReplFlags=} [properties] Properties to set
                     */
                    function UpdateReplFlags(properties) {
                        this.flags = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * UpdateReplFlags replId.
                     * @member {string} replId
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @instance
                     */
                    UpdateReplFlags.prototype.replId = "";
    
                    /**
                     * UpdateReplFlags flags.
                     * @member {Array.<string>} flags
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @instance
                     */
                    UpdateReplFlags.prototype.flags = $util.emptyArray;
    
                    /**
                     * Creates a new UpdateReplFlags instance using the specified properties.
                     * @function create
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {replit.goval.api.IUpdateReplFlags=} [properties] Properties to set
                     * @returns {replit.goval.api.UpdateReplFlags} UpdateReplFlags instance
                     */
                    UpdateReplFlags.create = function create(properties) {
                        return UpdateReplFlags.fromObject(properties);
                    };
    
                    /**
                     * Encodes the specified UpdateReplFlags message. Does not implicitly {@link replit.goval.api.UpdateReplFlags.verify|verify} messages.
                     * @function encode
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {replit.goval.api.UpdateReplFlags} message UpdateReplFlags message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateReplFlags.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.replId != null && Object.hasOwnProperty.call(message, "replId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.replId);
                        if (message.flags != null && message.flags.length)
                            for (var i = 0; i < message.flags.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.flags[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified UpdateReplFlags message, length delimited. Does not implicitly {@link replit.goval.api.UpdateReplFlags.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {replit.goval.api.UpdateReplFlags} message UpdateReplFlags message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpdateReplFlags.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an UpdateReplFlags message from the specified reader or buffer.
                     * @function decode
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {replit.goval.api.UpdateReplFlags} UpdateReplFlags
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateReplFlags.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.UpdateReplFlags();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.replId = reader.string();
                                break;
                            case 2:
                                if (!(message.flags && message.flags.length))
                                    message.flags = [];
                                message.flags.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an UpdateReplFlags message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {replit.goval.api.UpdateReplFlags} UpdateReplFlags
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpdateReplFlags.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an UpdateReplFlags message.
                     * @function verify
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpdateReplFlags.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            if (!$util.isString(message.replId))
                                return "replId: string expected";
                        if (message.flags != null && message.hasOwnProperty("flags")) {
                            if (!Array.isArray(message.flags))
                                return "flags: array expected";
                            for (var i = 0; i < message.flags.length; ++i)
                                if (!$util.isString(message.flags[i]))
                                    return "flags: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an UpdateReplFlags message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {replit.goval.api.UpdateReplFlags} UpdateReplFlags
                     */
                    UpdateReplFlags.fromObject = function fromObject(object) {
                        if (object instanceof $root.replit.goval.api.UpdateReplFlags)
                            return object;
                        var message = new $root.replit.goval.api.UpdateReplFlags();
                        if (object.replId != null)
                            message.replId = String(object.replId);
                        if (object.flags) {
                            if (!Array.isArray(object.flags))
                                throw TypeError(".replit.goval.api.UpdateReplFlags.flags: array expected");
                            message.flags = [];
                            for (var i = 0; i < object.flags.length; ++i)
                                message.flags[i] = String(object.flags[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an UpdateReplFlags message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @static
                     * @param {replit.goval.api.UpdateReplFlags} message UpdateReplFlags
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpdateReplFlags.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.flags = [];
                        if (options.defaults)
                            object.replId = "";
                        if (message.replId != null && message.hasOwnProperty("replId"))
                            object.replId = message.replId;
                        if (message.flags && message.flags.length) {
                            object.flags = [];
                            for (var j = 0; j < message.flags.length; ++j)
                                object.flags[j] = message.flags[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this UpdateReplFlags to JSON.
                     * @function toJSON
                     * @memberof replit.goval.api.UpdateReplFlags
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpdateReplFlags.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return UpdateReplFlags;
                })();
    
                api.features = (function() {
    
                    /**
                     * Namespace features.
                     * @memberof replit.goval.api
                     * @namespace
                     */
                    var features = {};
    
                    features.Gpu = (function() {
    
                        /**
                         * Properties of a Gpu.
                         * @memberof replit.goval.api.features
                         * @interface IGpu
                         */
    
                        /**
                         * Constructs a new Gpu.
                         * @memberof replit.goval.api.features
                         * @classdesc Represents a Gpu.
                         * @constructor
                         * @param {replit.goval.api.features.IGpu=} [properties] Properties to set
                         */
                        function Gpu(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new Gpu instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {replit.goval.api.features.IGpu=} [properties] Properties to set
                         * @returns {replit.goval.api.features.Gpu} Gpu instance
                         */
                        Gpu.create = function create(properties) {
                            return Gpu.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Gpu message. Does not implicitly {@link replit.goval.api.features.Gpu.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {replit.goval.api.features.Gpu} message Gpu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Gpu.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Gpu message, length delimited. Does not implicitly {@link replit.goval.api.features.Gpu.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {replit.goval.api.features.Gpu} message Gpu message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Gpu.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Gpu message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.features.Gpu} Gpu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Gpu.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.features.Gpu();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Gpu message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.features.Gpu} Gpu
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Gpu.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Gpu message.
                         * @function verify
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Gpu.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a Gpu message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.features.Gpu} Gpu
                         */
                        Gpu.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.features.Gpu)
                                return object;
                            return new $root.replit.goval.api.features.Gpu();
                        };
    
                        /**
                         * Creates a plain object from a Gpu message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.features.Gpu
                         * @static
                         * @param {replit.goval.api.features.Gpu} message Gpu
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Gpu.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this Gpu to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.features.Gpu
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Gpu.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Gpu;
                    })();
    
                    features.Boosted = (function() {
    
                        /**
                         * Properties of a Boosted.
                         * @memberof replit.goval.api.features
                         * @interface IBoosted
                         */
    
                        /**
                         * Constructs a new Boosted.
                         * @memberof replit.goval.api.features
                         * @classdesc Represents a Boosted.
                         * @constructor
                         * @param {replit.goval.api.features.IBoosted=} [properties] Properties to set
                         */
                        function Boosted(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new Boosted instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {replit.goval.api.features.IBoosted=} [properties] Properties to set
                         * @returns {replit.goval.api.features.Boosted} Boosted instance
                         */
                        Boosted.create = function create(properties) {
                            return Boosted.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Boosted message. Does not implicitly {@link replit.goval.api.features.Boosted.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {replit.goval.api.features.Boosted} message Boosted message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Boosted.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Boosted message, length delimited. Does not implicitly {@link replit.goval.api.features.Boosted.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {replit.goval.api.features.Boosted} message Boosted message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Boosted.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Boosted message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.features.Boosted} Boosted
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Boosted.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.features.Boosted();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Boosted message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.features.Boosted} Boosted
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Boosted.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Boosted message.
                         * @function verify
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Boosted.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a Boosted message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.features.Boosted} Boosted
                         */
                        Boosted.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.features.Boosted)
                                return object;
                            return new $root.replit.goval.api.features.Boosted();
                        };
    
                        /**
                         * Creates a plain object from a Boosted message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.features.Boosted
                         * @static
                         * @param {replit.goval.api.features.Boosted} message Boosted
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Boosted.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this Boosted to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.features.Boosted
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Boosted.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Boosted;
                    })();
    
                    features.Feature = (function() {
    
                        /**
                         * Properties of a Feature.
                         * @memberof replit.goval.api.features
                         * @interface IFeature
                         * @property {replit.goval.api.features.Gpu|replit.goval.api.features.IGpu|null} [gpu] Feature gpu
                         * @property {replit.goval.api.features.Boosted|replit.goval.api.features.IBoosted|null} [boosted] Feature boosted
                         * @property {boolean|null} [required] Feature required
                         */
    
                        /**
                         * Constructs a new Feature.
                         * @memberof replit.goval.api.features
                         * @classdesc Represents a Feature.
                         * @constructor
                         * @param {replit.goval.api.features.IFeature=} [properties] Properties to set
                         */
                        function Feature(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Feature gpu.
                         * @member {replit.goval.api.features.Gpu|null|undefined} gpu
                         * @memberof replit.goval.api.features.Feature
                         * @instance
                         */
                        Feature.prototype.gpu = null;
    
                        /**
                         * Feature boosted.
                         * @member {replit.goval.api.features.Boosted|null|undefined} boosted
                         * @memberof replit.goval.api.features.Feature
                         * @instance
                         */
                        Feature.prototype.boosted = null;
    
                        /**
                         * Feature required.
                         * @member {boolean} required
                         * @memberof replit.goval.api.features.Feature
                         * @instance
                         */
                        Feature.prototype.required = false;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Feature feature.
                         * @member {"gpu"|"boosted"|undefined} feature
                         * @memberof replit.goval.api.features.Feature
                         * @instance
                         */
                        Object.defineProperty(Feature.prototype, "feature", {
                            get: $util.oneOfGetter($oneOfFields = ["gpu", "boosted"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Feature instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {replit.goval.api.features.IFeature=} [properties] Properties to set
                         * @returns {replit.goval.api.features.Feature} Feature instance
                         */
                        Feature.create = function create(properties) {
                            return Feature.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Feature message. Does not implicitly {@link replit.goval.api.features.Feature.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {replit.goval.api.features.Feature} message Feature message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Feature.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.gpu != null && Object.hasOwnProperty.call(message, "gpu"))
                                $root.replit.goval.api.features.Gpu.encode(message.gpu, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.boosted != null && Object.hasOwnProperty.call(message, "boosted"))
                                $root.replit.goval.api.features.Boosted.encode(message.boosted, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.required != null && Object.hasOwnProperty.call(message, "required"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.required);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Feature message, length delimited. Does not implicitly {@link replit.goval.api.features.Feature.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {replit.goval.api.features.Feature} message Feature message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Feature.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Feature message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.features.Feature} Feature
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Feature.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.features.Feature();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.gpu = $root.replit.goval.api.features.Gpu.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.boosted = $root.replit.goval.api.features.Boosted.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.required = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Feature message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.features.Feature} Feature
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Feature.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Feature message.
                         * @function verify
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Feature.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.gpu != null && message.hasOwnProperty("gpu")) {
                                properties.feature = 1;
                                {
                                    var error = $root.replit.goval.api.features.Gpu.verify(message.gpu);
                                    if (error)
                                        return "gpu." + error;
                                }
                            }
                            if (message.boosted != null && message.hasOwnProperty("boosted")) {
                                if (properties.feature === 1)
                                    return "feature: multiple values";
                                properties.feature = 1;
                                {
                                    var error = $root.replit.goval.api.features.Boosted.verify(message.boosted);
                                    if (error)
                                        return "boosted." + error;
                                }
                            }
                            if (message.required != null && message.hasOwnProperty("required"))
                                if (typeof message.required !== "boolean")
                                    return "required: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a Feature message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.features.Feature} Feature
                         */
                        Feature.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.features.Feature)
                                return object;
                            var message = new $root.replit.goval.api.features.Feature();
                            if (object.gpu != null) {
                                if (typeof object.gpu !== "object")
                                    throw TypeError(".replit.goval.api.features.Feature.gpu: object expected");
                                message.gpu = $root.replit.goval.api.features.Gpu.fromObject(object.gpu);
                            }
                            if (object.boosted != null) {
                                if (typeof object.boosted !== "object")
                                    throw TypeError(".replit.goval.api.features.Feature.boosted: object expected");
                                message.boosted = $root.replit.goval.api.features.Boosted.fromObject(object.boosted);
                            }
                            if (object.required != null)
                                message.required = Boolean(object.required);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Feature message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.features.Feature
                         * @static
                         * @param {replit.goval.api.features.Feature} message Feature
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Feature.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.required = false;
                            if (message.gpu != null && message.hasOwnProperty("gpu")) {
                                object.gpu = $root.replit.goval.api.features.Gpu.toObject(message.gpu, options);
                                if (options.oneofs)
                                    object.feature = "gpu";
                            }
                            if (message.boosted != null && message.hasOwnProperty("boosted")) {
                                object.boosted = $root.replit.goval.api.features.Boosted.toObject(message.boosted, options);
                                if (options.oneofs)
                                    object.feature = "boosted";
                            }
                            if (message.required != null && message.hasOwnProperty("required"))
                                object.required = message.required;
                            return object;
                        };
    
                        /**
                         * Converts this Feature to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.features.Feature
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Feature.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Feature;
                    })();
    
                    return features;
                })();
    
                api.repl = (function() {
    
                    /**
                     * Namespace repl.
                     * @memberof replit.goval.api
                     * @namespace
                     */
                    var repl = {};
    
                    repl.Buckets = (function() {
    
                        /**
                         * Properties of a Buckets.
                         * @memberof replit.goval.api.repl
                         * @interface IBuckets
                         * @property {string|null} [snapshots] Buckets snapshots
                         * @property {string|null} [metadata] Buckets metadata
                         */
    
                        /**
                         * Constructs a new Buckets.
                         * @memberof replit.goval.api.repl
                         * @classdesc Represents a Buckets.
                         * @constructor
                         * @param {replit.goval.api.repl.IBuckets=} [properties] Properties to set
                         */
                        function Buckets(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Buckets snapshots.
                         * @member {string} snapshots
                         * @memberof replit.goval.api.repl.Buckets
                         * @instance
                         */
                        Buckets.prototype.snapshots = "";
    
                        /**
                         * Buckets metadata.
                         * @member {string} metadata
                         * @memberof replit.goval.api.repl.Buckets
                         * @instance
                         */
                        Buckets.prototype.metadata = "";
    
                        /**
                         * Creates a new Buckets instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {replit.goval.api.repl.IBuckets=} [properties] Properties to set
                         * @returns {replit.goval.api.repl.Buckets} Buckets instance
                         */
                        Buckets.create = function create(properties) {
                            return Buckets.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Buckets message. Does not implicitly {@link replit.goval.api.repl.Buckets.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {replit.goval.api.repl.Buckets} message Buckets message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buckets.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.snapshots != null && Object.hasOwnProperty.call(message, "snapshots"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.snapshots);
                            if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadata);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link replit.goval.api.repl.Buckets.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {replit.goval.api.repl.Buckets} message Buckets message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Buckets message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.repl.Buckets} Buckets
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buckets.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.repl.Buckets();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.snapshots = reader.string();
                                    break;
                                case 2:
                                    message.metadata = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Buckets message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.repl.Buckets} Buckets
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buckets.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Buckets message.
                         * @function verify
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Buckets.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.snapshots != null && message.hasOwnProperty("snapshots"))
                                if (!$util.isString(message.snapshots))
                                    return "snapshots: string expected";
                            if (message.metadata != null && message.hasOwnProperty("metadata"))
                                if (!$util.isString(message.metadata))
                                    return "metadata: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.repl.Buckets} Buckets
                         */
                        Buckets.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.repl.Buckets)
                                return object;
                            var message = new $root.replit.goval.api.repl.Buckets();
                            if (object.snapshots != null)
                                message.snapshots = String(object.snapshots);
                            if (object.metadata != null)
                                message.metadata = String(object.metadata);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.repl.Buckets
                         * @static
                         * @param {replit.goval.api.repl.Buckets} message Buckets
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Buckets.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.snapshots = "";
                                object.metadata = "";
                            }
                            if (message.snapshots != null && message.hasOwnProperty("snapshots"))
                                object.snapshots = message.snapshots;
                            if (message.metadata != null && message.hasOwnProperty("metadata"))
                                object.metadata = message.metadata;
                            return object;
                        };
    
                        /**
                         * Converts this Buckets to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.repl.Buckets
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Buckets.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Buckets;
                    })();
    
                    repl.Repl = (function() {
    
                        /**
                         * Properties of a Repl.
                         * @memberof replit.goval.api.repl
                         * @interface IRepl
                         * @property {string|null} [id] Repl id
                         * @property {string|null} [language] Repl language
                         * @property {string|null} [bucket] Repl bucket
                         * @property {string|null} [slug] Repl slug
                         * @property {string|null} [user] Repl user
                         * @property {string|null} [sourceRepl] Repl sourceRepl
                         * @property {string|null} [database] Repl database
                         * @property {replit.goval.api.repl.Buckets|replit.goval.api.repl.IBuckets|null} [buckets] Repl buckets
                         */
    
                        /**
                         * Constructs a new Repl.
                         * @memberof replit.goval.api.repl
                         * @classdesc Represents a Repl.
                         * @constructor
                         * @param {replit.goval.api.repl.IRepl=} [properties] Properties to set
                         */
                        function Repl(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Repl id.
                         * @member {string} id
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.id = "";
    
                        /**
                         * Repl language.
                         * @member {string} language
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.language = "";
    
                        /**
                         * Repl bucket.
                         * @member {string} bucket
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.bucket = "";
    
                        /**
                         * Repl slug.
                         * @member {string} slug
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.slug = "";
    
                        /**
                         * Repl user.
                         * @member {string} user
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.user = "";
    
                        /**
                         * Repl sourceRepl.
                         * @member {string} sourceRepl
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.sourceRepl = "";
    
                        /**
                         * Repl database.
                         * @member {string} database
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.database = "";
    
                        /**
                         * Repl buckets.
                         * @member {replit.goval.api.repl.Buckets|null|undefined} buckets
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         */
                        Repl.prototype.buckets = null;
    
                        /**
                         * Creates a new Repl instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {replit.goval.api.repl.IRepl=} [properties] Properties to set
                         * @returns {replit.goval.api.repl.Repl} Repl instance
                         */
                        Repl.create = function create(properties) {
                            return Repl.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Repl message. Does not implicitly {@link replit.goval.api.repl.Repl.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {replit.goval.api.repl.Repl} message Repl message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Repl.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.language != null && Object.hasOwnProperty.call(message, "language"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.language);
                            if (message.bucket != null && Object.hasOwnProperty.call(message, "bucket"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.bucket);
                            if (message.slug != null && Object.hasOwnProperty.call(message, "slug"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.slug);
                            if (message.user != null && Object.hasOwnProperty.call(message, "user"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.user);
                            if (message.sourceRepl != null && Object.hasOwnProperty.call(message, "sourceRepl"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.sourceRepl);
                            if (message.database != null && Object.hasOwnProperty.call(message, "database"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.database);
                            if (message.buckets != null && Object.hasOwnProperty.call(message, "buckets"))
                                $root.replit.goval.api.repl.Buckets.encode(message.buckets, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Repl message, length delimited. Does not implicitly {@link replit.goval.api.repl.Repl.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {replit.goval.api.repl.Repl} message Repl message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Repl.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Repl message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.repl.Repl} Repl
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Repl.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.repl.Repl();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.string();
                                    break;
                                case 2:
                                    message.language = reader.string();
                                    break;
                                case 3:
                                    message.bucket = reader.string();
                                    break;
                                case 4:
                                    message.slug = reader.string();
                                    break;
                                case 5:
                                    message.user = reader.string();
                                    break;
                                case 6:
                                    message.sourceRepl = reader.string();
                                    break;
                                case 7:
                                    message.database = reader.string();
                                    break;
                                case 8:
                                    message.buckets = $root.replit.goval.api.repl.Buckets.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Repl message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.repl.Repl} Repl
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Repl.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Repl message.
                         * @function verify
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Repl.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.language != null && message.hasOwnProperty("language"))
                                if (!$util.isString(message.language))
                                    return "language: string expected";
                            if (message.bucket != null && message.hasOwnProperty("bucket"))
                                if (!$util.isString(message.bucket))
                                    return "bucket: string expected";
                            if (message.slug != null && message.hasOwnProperty("slug"))
                                if (!$util.isString(message.slug))
                                    return "slug: string expected";
                            if (message.user != null && message.hasOwnProperty("user"))
                                if (!$util.isString(message.user))
                                    return "user: string expected";
                            if (message.sourceRepl != null && message.hasOwnProperty("sourceRepl"))
                                if (!$util.isString(message.sourceRepl))
                                    return "sourceRepl: string expected";
                            if (message.database != null && message.hasOwnProperty("database"))
                                if (!$util.isString(message.database))
                                    return "database: string expected";
                            if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                var error = $root.replit.goval.api.repl.Buckets.verify(message.buckets);
                                if (error)
                                    return "buckets." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Repl message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.repl.Repl} Repl
                         */
                        Repl.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.repl.Repl)
                                return object;
                            var message = new $root.replit.goval.api.repl.Repl();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.language != null)
                                message.language = String(object.language);
                            if (object.bucket != null)
                                message.bucket = String(object.bucket);
                            if (object.slug != null)
                                message.slug = String(object.slug);
                            if (object.user != null)
                                message.user = String(object.user);
                            if (object.sourceRepl != null)
                                message.sourceRepl = String(object.sourceRepl);
                            if (object.database != null)
                                message.database = String(object.database);
                            if (object.buckets != null) {
                                if (typeof object.buckets !== "object")
                                    throw TypeError(".replit.goval.api.repl.Repl.buckets: object expected");
                                message.buckets = $root.replit.goval.api.repl.Buckets.fromObject(object.buckets);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Repl message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.repl.Repl
                         * @static
                         * @param {replit.goval.api.repl.Repl} message Repl
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Repl.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.language = "";
                                object.bucket = "";
                                object.slug = "";
                                object.user = "";
                                object.sourceRepl = "";
                                object.database = "";
                                object.buckets = null;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.language != null && message.hasOwnProperty("language"))
                                object.language = message.language;
                            if (message.bucket != null && message.hasOwnProperty("bucket"))
                                object.bucket = message.bucket;
                            if (message.slug != null && message.hasOwnProperty("slug"))
                                object.slug = message.slug;
                            if (message.user != null && message.hasOwnProperty("user"))
                                object.user = message.user;
                            if (message.sourceRepl != null && message.hasOwnProperty("sourceRepl"))
                                object.sourceRepl = message.sourceRepl;
                            if (message.database != null && message.hasOwnProperty("database"))
                                object.database = message.database;
                            if (message.buckets != null && message.hasOwnProperty("buckets"))
                                object.buckets = $root.replit.goval.api.repl.Buckets.toObject(message.buckets, options);
                            return object;
                        };
    
                        /**
                         * Converts this Repl to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.repl.Repl
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Repl.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Repl;
                    })();
    
                    repl.ResourceLimits = (function() {
    
                        /**
                         * Properties of a ResourceLimits.
                         * @memberof replit.goval.api.repl
                         * @interface IResourceLimits
                         * @property {boolean|null} [net] ResourceLimits net
                         * @property {number|null} [memory] ResourceLimits memory
                         * @property {number|null} [threads] ResourceLimits threads
                         * @property {number|null} [shares] ResourceLimits shares
                         * @property {number|null} [disk] ResourceLimits disk
                         * @property {replit.goval.api.repl.ResourceLimits.Cachability|null} [cache] ResourceLimits cache
                         * @property {boolean|null} [restrictNetwork] ResourceLimits restrictNetwork
                         * @property {boolean|null} [preventWakeup] ResourceLimits preventWakeup
                         */
    
                        /**
                         * Constructs a new ResourceLimits.
                         * @memberof replit.goval.api.repl
                         * @classdesc Represents a ResourceLimits.
                         * @constructor
                         * @param {replit.goval.api.repl.IResourceLimits=} [properties] Properties to set
                         */
                        function ResourceLimits(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ResourceLimits net.
                         * @member {boolean} net
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.net = false;
    
                        /**
                         * ResourceLimits memory.
                         * @member {number} memory
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.memory = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ResourceLimits threads.
                         * @member {number} threads
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.threads = 0;
    
                        /**
                         * ResourceLimits shares.
                         * @member {number} shares
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.shares = 0;
    
                        /**
                         * ResourceLimits disk.
                         * @member {number} disk
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.disk = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ResourceLimits cache.
                         * @member {replit.goval.api.repl.ResourceLimits.Cachability} cache
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.cache = 0;
    
                        /**
                         * ResourceLimits restrictNetwork.
                         * @member {boolean} restrictNetwork
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.restrictNetwork = false;
    
                        /**
                         * ResourceLimits preventWakeup.
                         * @member {boolean} preventWakeup
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         */
                        ResourceLimits.prototype.preventWakeup = false;
    
                        /**
                         * Creates a new ResourceLimits instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {replit.goval.api.repl.IResourceLimits=} [properties] Properties to set
                         * @returns {replit.goval.api.repl.ResourceLimits} ResourceLimits instance
                         */
                        ResourceLimits.create = function create(properties) {
                            return ResourceLimits.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified ResourceLimits message. Does not implicitly {@link replit.goval.api.repl.ResourceLimits.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {replit.goval.api.repl.ResourceLimits} message ResourceLimits message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceLimits.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.net != null && Object.hasOwnProperty.call(message, "net"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.net);
                            if (message.memory != null && Object.hasOwnProperty.call(message, "memory"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.memory);
                            if (message.threads != null && Object.hasOwnProperty.call(message, "threads"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.threads);
                            if (message.shares != null && Object.hasOwnProperty.call(message, "shares"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.shares);
                            if (message.disk != null && Object.hasOwnProperty.call(message, "disk"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.disk);
                            if (message.cache != null && Object.hasOwnProperty.call(message, "cache"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cache);
                            if (message.restrictNetwork != null && Object.hasOwnProperty.call(message, "restrictNetwork"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.restrictNetwork);
                            if (message.preventWakeup != null && Object.hasOwnProperty.call(message, "preventWakeup"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.preventWakeup);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ResourceLimits message, length delimited. Does not implicitly {@link replit.goval.api.repl.ResourceLimits.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {replit.goval.api.repl.ResourceLimits} message ResourceLimits message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceLimits.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ResourceLimits message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.repl.ResourceLimits} ResourceLimits
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceLimits.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.repl.ResourceLimits();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.net = reader.bool();
                                    break;
                                case 2:
                                    message.memory = reader.int64();
                                    break;
                                case 3:
                                    message.threads = reader.double();
                                    break;
                                case 4:
                                    message.shares = reader.double();
                                    break;
                                case 5:
                                    message.disk = reader.int64();
                                    break;
                                case 6:
                                    message.cache = reader.int32();
                                    break;
                                case 7:
                                    message.restrictNetwork = reader.bool();
                                    break;
                                case 8:
                                    message.preventWakeup = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ResourceLimits message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.repl.ResourceLimits} ResourceLimits
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceLimits.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ResourceLimits message.
                         * @function verify
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ResourceLimits.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.net != null && message.hasOwnProperty("net"))
                                if (typeof message.net !== "boolean")
                                    return "net: boolean expected";
                            if (message.memory != null && message.hasOwnProperty("memory"))
                                if (!$util.isInteger(message.memory) && !(message.memory && $util.isInteger(message.memory.low) && $util.isInteger(message.memory.high)))
                                    return "memory: integer|Long expected";
                            if (message.threads != null && message.hasOwnProperty("threads"))
                                if (typeof message.threads !== "number")
                                    return "threads: number expected";
                            if (message.shares != null && message.hasOwnProperty("shares"))
                                if (typeof message.shares !== "number")
                                    return "shares: number expected";
                            if (message.disk != null && message.hasOwnProperty("disk"))
                                if (!$util.isInteger(message.disk) && !(message.disk && $util.isInteger(message.disk.low) && $util.isInteger(message.disk.high)))
                                    return "disk: integer|Long expected";
                            if (message.cache != null && message.hasOwnProperty("cache"))
                                switch (message.cache) {
                                default:
                                    return "cache: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.restrictNetwork != null && message.hasOwnProperty("restrictNetwork"))
                                if (typeof message.restrictNetwork !== "boolean")
                                    return "restrictNetwork: boolean expected";
                            if (message.preventWakeup != null && message.hasOwnProperty("preventWakeup"))
                                if (typeof message.preventWakeup !== "boolean")
                                    return "preventWakeup: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a ResourceLimits message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.repl.ResourceLimits} ResourceLimits
                         */
                        ResourceLimits.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.repl.ResourceLimits)
                                return object;
                            var message = new $root.replit.goval.api.repl.ResourceLimits();
                            if (object.net != null)
                                message.net = Boolean(object.net);
                            if (object.memory != null)
                                if ($util.Long)
                                    (message.memory = $util.Long.fromValue(object.memory)).unsigned = false;
                                else if (typeof object.memory === "string")
                                    message.memory = parseInt(object.memory, 10);
                                else if (typeof object.memory === "number")
                                    message.memory = object.memory;
                                else if (typeof object.memory === "object")
                                    message.memory = new $util.LongBits(object.memory.low >>> 0, object.memory.high >>> 0).toNumber();
                            if (object.threads != null)
                                message.threads = Number(object.threads);
                            if (object.shares != null)
                                message.shares = Number(object.shares);
                            if (object.disk != null)
                                if ($util.Long)
                                    (message.disk = $util.Long.fromValue(object.disk)).unsigned = false;
                                else if (typeof object.disk === "string")
                                    message.disk = parseInt(object.disk, 10);
                                else if (typeof object.disk === "number")
                                    message.disk = object.disk;
                                else if (typeof object.disk === "object")
                                    message.disk = new $util.LongBits(object.disk.low >>> 0, object.disk.high >>> 0).toNumber();
                            switch (object.cache) {
                            case "NONE":
                            case 0:
                                message.cache = 0;
                                break;
                            case "USER":
                            case 1:
                                message.cache = 1;
                                break;
                            case "REPL":
                            case 2:
                                message.cache = 2;
                                break;
                            }
                            if (object.restrictNetwork != null)
                                message.restrictNetwork = Boolean(object.restrictNetwork);
                            if (object.preventWakeup != null)
                                message.preventWakeup = Boolean(object.preventWakeup);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ResourceLimits message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @static
                         * @param {replit.goval.api.repl.ResourceLimits} message ResourceLimits
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ResourceLimits.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.net = false;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.memory = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.memory = options.longs === String ? "0" : 0;
                                object.threads = 0;
                                object.shares = 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.disk = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.disk = options.longs === String ? "0" : 0;
                                object.cache = options.enums === String ? "NONE" : 0;
                                object.restrictNetwork = false;
                                object.preventWakeup = false;
                            }
                            if (message.net != null && message.hasOwnProperty("net"))
                                object.net = message.net;
                            if (message.memory != null && message.hasOwnProperty("memory"))
                                if (typeof message.memory === "number")
                                    object.memory = options.longs === String ? String(message.memory) : message.memory;
                                else
                                    object.memory = options.longs === String ? $util.Long.prototype.toString.call(message.memory) : options.longs === Number ? new $util.LongBits(message.memory.low >>> 0, message.memory.high >>> 0).toNumber() : message.memory;
                            if (message.threads != null && message.hasOwnProperty("threads"))
                                object.threads = options.json && !isFinite(message.threads) ? String(message.threads) : message.threads;
                            if (message.shares != null && message.hasOwnProperty("shares"))
                                object.shares = options.json && !isFinite(message.shares) ? String(message.shares) : message.shares;
                            if (message.disk != null && message.hasOwnProperty("disk"))
                                if (typeof message.disk === "number")
                                    object.disk = options.longs === String ? String(message.disk) : message.disk;
                                else
                                    object.disk = options.longs === String ? $util.Long.prototype.toString.call(message.disk) : options.longs === Number ? new $util.LongBits(message.disk.low >>> 0, message.disk.high >>> 0).toNumber() : message.disk;
                            if (message.cache != null && message.hasOwnProperty("cache"))
                                object.cache = options.enums === String ? $root.replit.goval.api.repl.ResourceLimits.Cachability[message.cache] : message.cache;
                            if (message.restrictNetwork != null && message.hasOwnProperty("restrictNetwork"))
                                object.restrictNetwork = message.restrictNetwork;
                            if (message.preventWakeup != null && message.hasOwnProperty("preventWakeup"))
                                object.preventWakeup = message.preventWakeup;
                            return object;
                        };
    
                        /**
                         * Converts this ResourceLimits to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.repl.ResourceLimits
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ResourceLimits.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Cachability enum.
                         * @name replit.goval.api.repl.ResourceLimits.Cachability
                         * @enum {number}
                         * @property {number} NONE=0 NONE value
                         * @property {number} USER=1 USER value
                         * @property {number} REPL=2 REPL value
                         */
                        ResourceLimits.Cachability = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "NONE"] = 0;
                            values[valuesById[1] = "USER"] = 1;
                            values[valuesById[2] = "REPL"] = 2;
                            return values;
                        })();
    
                        return ResourceLimits;
                    })();
    
                    repl.Permissions = (function() {
    
                        /**
                         * Properties of a Permissions.
                         * @memberof replit.goval.api.repl
                         * @interface IPermissions
                         * @property {boolean|null} [toggleAlwaysOn] Permissions toggleAlwaysOn
                         */
    
                        /**
                         * Constructs a new Permissions.
                         * @memberof replit.goval.api.repl
                         * @classdesc Represents a Permissions.
                         * @constructor
                         * @param {replit.goval.api.repl.IPermissions=} [properties] Properties to set
                         */
                        function Permissions(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Permissions toggleAlwaysOn.
                         * @member {boolean} toggleAlwaysOn
                         * @memberof replit.goval.api.repl.Permissions
                         * @instance
                         */
                        Permissions.prototype.toggleAlwaysOn = false;
    
                        /**
                         * Creates a new Permissions instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {replit.goval.api.repl.IPermissions=} [properties] Properties to set
                         * @returns {replit.goval.api.repl.Permissions} Permissions instance
                         */
                        Permissions.create = function create(properties) {
                            return Permissions.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Permissions message. Does not implicitly {@link replit.goval.api.repl.Permissions.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {replit.goval.api.repl.Permissions} message Permissions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Permissions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.toggleAlwaysOn != null && Object.hasOwnProperty.call(message, "toggleAlwaysOn"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.toggleAlwaysOn);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Permissions message, length delimited. Does not implicitly {@link replit.goval.api.repl.Permissions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {replit.goval.api.repl.Permissions} message Permissions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Permissions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Permissions message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.repl.Permissions} Permissions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Permissions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.repl.Permissions();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.toggleAlwaysOn = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Permissions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.repl.Permissions} Permissions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Permissions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Permissions message.
                         * @function verify
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Permissions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.toggleAlwaysOn != null && message.hasOwnProperty("toggleAlwaysOn"))
                                if (typeof message.toggleAlwaysOn !== "boolean")
                                    return "toggleAlwaysOn: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a Permissions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.repl.Permissions} Permissions
                         */
                        Permissions.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.repl.Permissions)
                                return object;
                            var message = new $root.replit.goval.api.repl.Permissions();
                            if (object.toggleAlwaysOn != null)
                                message.toggleAlwaysOn = Boolean(object.toggleAlwaysOn);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Permissions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.repl.Permissions
                         * @static
                         * @param {replit.goval.api.repl.Permissions} message Permissions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Permissions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.toggleAlwaysOn = false;
                            if (message.toggleAlwaysOn != null && message.hasOwnProperty("toggleAlwaysOn"))
                                object.toggleAlwaysOn = message.toggleAlwaysOn;
                            return object;
                        };
    
                        /**
                         * Converts this Permissions to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.repl.Permissions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Permissions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Permissions;
                    })();
    
                    /**
                     * Persistence enum.
                     * @name replit.goval.api.repl.Persistence
                     * @enum {number}
                     * @property {number} PERSISTENT=0 PERSISTENT value
                     * @property {number} EPHEMERAL=1 EPHEMERAL value
                     * @property {number} NONE=2 NONE value
                     * @property {number} READ_ONLY=3 READ_ONLY value
                     */
                    repl.Persistence = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PERSISTENT"] = 0;
                        values[valuesById[1] = "EPHEMERAL"] = 1;
                        values[valuesById[2] = "NONE"] = 2;
                        values[valuesById[3] = "READ_ONLY"] = 3;
                        return values;
                    })();
    
                    repl.Metadata = (function() {
    
                        /**
                         * Properties of a Metadata.
                         * @memberof replit.goval.api.repl
                         * @interface IMetadata
                         * @property {replit.goval.api.repl.Repl|replit.goval.api.repl.IRepl|null} [repl] Metadata repl
                         * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [resourceLimits] Metadata resourceLimits
                         * @property {replit.goval.api.repl.ResourceLimits|replit.goval.api.repl.IResourceLimits|null} [interactiveResourceLimits] Metadata interactiveResourceLimits
                         * @property {replit.goval.api.repl.Persistence|null} [persistence] Metadata persistence
                         * @property {Array.<string>|null} [flags] Metadata flags
                         * @property {replit.goval.api.repl.Permissions|replit.goval.api.repl.IPermissions|null} [permissions] Metadata permissions
                         * @property {Array.<replit.goval.api.features.Feature|replit.goval.api.features.IFeature>|null} [features] Metadata features
                         */
    
                        /**
                         * Constructs a new Metadata.
                         * @memberof replit.goval.api.repl
                         * @classdesc Represents a Metadata.
                         * @constructor
                         * @param {replit.goval.api.repl.IMetadata=} [properties] Properties to set
                         */
                        function Metadata(properties) {
                            this.flags = [];
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Metadata repl.
                         * @member {replit.goval.api.repl.Repl|null|undefined} repl
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.repl = null;
    
                        /**
                         * Metadata resourceLimits.
                         * @member {replit.goval.api.repl.ResourceLimits|null|undefined} resourceLimits
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.resourceLimits = null;
    
                        /**
                         * Metadata interactiveResourceLimits.
                         * @member {replit.goval.api.repl.ResourceLimits|null|undefined} interactiveResourceLimits
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.interactiveResourceLimits = null;
    
                        /**
                         * Metadata persistence.
                         * @member {replit.goval.api.repl.Persistence} persistence
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.persistence = 0;
    
                        /**
                         * Metadata flags.
                         * @member {Array.<string>} flags
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.flags = $util.emptyArray;
    
                        /**
                         * Metadata permissions.
                         * @member {replit.goval.api.repl.Permissions|null|undefined} permissions
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.permissions = null;
    
                        /**
                         * Metadata features.
                         * @member {Array.<replit.goval.api.features.Feature>} features
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         */
                        Metadata.prototype.features = $util.emptyArray;
    
                        /**
                         * Creates a new Metadata instance using the specified properties.
                         * @function create
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {replit.goval.api.repl.IMetadata=} [properties] Properties to set
                         * @returns {replit.goval.api.repl.Metadata} Metadata instance
                         */
                        Metadata.create = function create(properties) {
                            return Metadata.fromObject(properties);
                        };
    
                        /**
                         * Encodes the specified Metadata message. Does not implicitly {@link replit.goval.api.repl.Metadata.verify|verify} messages.
                         * @function encode
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {replit.goval.api.repl.Metadata} message Metadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.persistence != null && Object.hasOwnProperty.call(message, "persistence"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.persistence);
                            if (message.repl != null && Object.hasOwnProperty.call(message, "repl"))
                                $root.replit.goval.api.repl.Repl.encode(message.repl, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.resourceLimits != null && Object.hasOwnProperty.call(message, "resourceLimits"))
                                $root.replit.goval.api.repl.ResourceLimits.encode(message.resourceLimits, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.flags != null && message.flags.length)
                                for (var i = 0; i < message.flags.length; ++i)
                                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.flags[i]);
                            if (message.permissions != null && Object.hasOwnProperty.call(message, "permissions"))
                                $root.replit.goval.api.repl.Permissions.encode(message.permissions, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                            if (message.features != null && message.features.length)
                                for (var i = 0; i < message.features.length; ++i)
                                    $root.replit.goval.api.features.Feature.encode(message.features[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                            if (message.interactiveResourceLimits != null && Object.hasOwnProperty.call(message, "interactiveResourceLimits"))
                                $root.replit.goval.api.repl.ResourceLimits.encode(message.interactiveResourceLimits, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Metadata message, length delimited. Does not implicitly {@link replit.goval.api.repl.Metadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {replit.goval.api.repl.Metadata} message Metadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Metadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {replit.goval.api.repl.Metadata} Metadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.replit.goval.api.repl.Metadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 7:
                                    message.repl = $root.replit.goval.api.repl.Repl.decode(reader, reader.uint32());
                                    break;
                                case 10:
                                    message.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                    break;
                                case 17:
                                    message.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.persistence = reader.int32();
                                    break;
                                case 14:
                                    if (!(message.flags && message.flags.length))
                                        message.flags = [];
                                    message.flags.push(reader.string());
                                    break;
                                case 15:
                                    message.permissions = $root.replit.goval.api.repl.Permissions.decode(reader, reader.uint32());
                                    break;
                                case 16:
                                    if (!(message.features && message.features.length))
                                        message.features = [];
                                    message.features.push($root.replit.goval.api.features.Feature.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Metadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {replit.goval.api.repl.Metadata} Metadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Metadata message.
                         * @function verify
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Metadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.repl != null && message.hasOwnProperty("repl")) {
                                var error = $root.replit.goval.api.repl.Repl.verify(message.repl);
                                if (error)
                                    return "repl." + error;
                            }
                            if (message.resourceLimits != null && message.hasOwnProperty("resourceLimits")) {
                                var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.resourceLimits);
                                if (error)
                                    return "resourceLimits." + error;
                            }
                            if (message.interactiveResourceLimits != null && message.hasOwnProperty("interactiveResourceLimits")) {
                                var error = $root.replit.goval.api.repl.ResourceLimits.verify(message.interactiveResourceLimits);
                                if (error)
                                    return "interactiveResourceLimits." + error;
                            }
                            if (message.persistence != null && message.hasOwnProperty("persistence"))
                                switch (message.persistence) {
                                default:
                                    return "persistence: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.flags != null && message.hasOwnProperty("flags")) {
                                if (!Array.isArray(message.flags))
                                    return "flags: array expected";
                                for (var i = 0; i < message.flags.length; ++i)
                                    if (!$util.isString(message.flags[i]))
                                        return "flags: string[] expected";
                            }
                            if (message.permissions != null && message.hasOwnProperty("permissions")) {
                                var error = $root.replit.goval.api.repl.Permissions.verify(message.permissions);
                                if (error)
                                    return "permissions." + error;
                            }
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i) {
                                    var error = $root.replit.goval.api.features.Feature.verify(message.features[i]);
                                    if (error)
                                        return "features." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {replit.goval.api.repl.Metadata} Metadata
                         */
                        Metadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.replit.goval.api.repl.Metadata)
                                return object;
                            var message = new $root.replit.goval.api.repl.Metadata();
                            if (object.repl != null) {
                                if (typeof object.repl !== "object")
                                    throw TypeError(".replit.goval.api.repl.Metadata.repl: object expected");
                                message.repl = $root.replit.goval.api.repl.Repl.fromObject(object.repl);
                            }
                            if (object.resourceLimits != null) {
                                if (typeof object.resourceLimits !== "object")
                                    throw TypeError(".replit.goval.api.repl.Metadata.resourceLimits: object expected");
                                message.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.resourceLimits);
                            }
                            if (object.interactiveResourceLimits != null) {
                                if (typeof object.interactiveResourceLimits !== "object")
                                    throw TypeError(".replit.goval.api.repl.Metadata.interactiveResourceLimits: object expected");
                                message.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.fromObject(object.interactiveResourceLimits);
                            }
                            switch (object.persistence) {
                            case "PERSISTENT":
                            case 0:
                                message.persistence = 0;
                                break;
                            case "EPHEMERAL":
                            case 1:
                                message.persistence = 1;
                                break;
                            case "NONE":
                            case 2:
                                message.persistence = 2;
                                break;
                            case "READ_ONLY":
                            case 3:
                                message.persistence = 3;
                                break;
                            }
                            if (object.flags) {
                                if (!Array.isArray(object.flags))
                                    throw TypeError(".replit.goval.api.repl.Metadata.flags: array expected");
                                message.flags = [];
                                for (var i = 0; i < object.flags.length; ++i)
                                    message.flags[i] = String(object.flags[i]);
                            }
                            if (object.permissions != null) {
                                if (typeof object.permissions !== "object")
                                    throw TypeError(".replit.goval.api.repl.Metadata.permissions: object expected");
                                message.permissions = $root.replit.goval.api.repl.Permissions.fromObject(object.permissions);
                            }
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".replit.goval.api.repl.Metadata.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i) {
                                    if (typeof object.features[i] !== "object")
                                        throw TypeError(".replit.goval.api.repl.Metadata.features: object expected");
                                    message.features[i] = $root.replit.goval.api.features.Feature.fromObject(object.features[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof replit.goval.api.repl.Metadata
                         * @static
                         * @param {replit.goval.api.repl.Metadata} message Metadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Metadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.flags = [];
                                object.features = [];
                            }
                            if (options.defaults) {
                                object.persistence = options.enums === String ? "PERSISTENT" : 0;
                                object.repl = null;
                                object.resourceLimits = null;
                                object.permissions = null;
                                object.interactiveResourceLimits = null;
                            }
                            if (message.persistence != null && message.hasOwnProperty("persistence"))
                                object.persistence = options.enums === String ? $root.replit.goval.api.repl.Persistence[message.persistence] : message.persistence;
                            if (message.repl != null && message.hasOwnProperty("repl"))
                                object.repl = $root.replit.goval.api.repl.Repl.toObject(message.repl, options);
                            if (message.resourceLimits != null && message.hasOwnProperty("resourceLimits"))
                                object.resourceLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.resourceLimits, options);
                            if (message.flags && message.flags.length) {
                                object.flags = [];
                                for (var j = 0; j < message.flags.length; ++j)
                                    object.flags[j] = message.flags[j];
                            }
                            if (message.permissions != null && message.hasOwnProperty("permissions"))
                                object.permissions = $root.replit.goval.api.repl.Permissions.toObject(message.permissions, options);
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = $root.replit.goval.api.features.Feature.toObject(message.features[j], options);
                            }
                            if (message.interactiveResourceLimits != null && message.hasOwnProperty("interactiveResourceLimits"))
                                object.interactiveResourceLimits = $root.replit.goval.api.repl.ResourceLimits.toObject(message.interactiveResourceLimits, options);
                            return object;
                        };
    
                        /**
                         * Converts this Metadata to JSON.
                         * @function toJSON
                         * @memberof replit.goval.api.repl.Metadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Metadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Metadata;
                    })();
    
                    return repl;
                })();
    
                return api;
            })();
    
            return goval;
        })();
    
        return replit;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return Timestamp.fromObject(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Struct = (function() {
    
                /**
                 * Properties of a Struct.
                 * @memberof google.protobuf
                 * @interface IStruct
                 * @property {Object.<string,google.protobuf.Value|google.protobuf.IValue>|null} [fields] Struct fields
                 */
    
                /**
                 * Constructs a new Struct.
                 * @memberof google.protobuf
                 * @classdesc Represents a Struct.
                 * @constructor
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 */
                function Struct(properties) {
                    this.fields = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Struct fields.
                 * @member {Object.<string,google.protobuf.Value>} fields
                 * @memberof google.protobuf.Struct
                 * @instance
                 */
                Struct.prototype.fields = $util.emptyObject;
    
                /**
                 * Creates a new Struct instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 * @returns {google.protobuf.Struct} Struct instance
                 */
                Struct.create = function create(properties) {
                    return Struct.fromObject(properties);
                };
    
                /**
                 * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && Object.hasOwnProperty.call(message, "fields"))
                        for (var keys = Object.keys(message.fields), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.google.protobuf.Value.encode(message.fields[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Struct(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (message.fields === $util.emptyObject)
                                message.fields = {};
                            var end2 = reader.uint32() + reader.pos;
                            key = "";
                            value = null;
                            while (reader.pos < end2) {
                                var tag2 = reader.uint32();
                                switch (tag2 >>> 3) {
                                case 1:
                                    key = reader.string();
                                    break;
                                case 2:
                                    value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag2 & 7);
                                    break;
                                }
                            }
                            message.fields[key] = value;
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Struct message.
                 * @function verify
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Struct.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!$util.isObject(message.fields))
                            return "fields: object expected";
                        var key = Object.keys(message.fields);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.fields[key[i]]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Struct message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Struct} Struct
                 */
                Struct.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Struct)
                        return object;
                    var message = new $root.google.protobuf.Struct();
                    if (object.fields) {
                        if (typeof object.fields !== "object")
                            throw TypeError(".google.protobuf.Struct.fields: object expected");
                        message.fields = {};
                        for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                            if (typeof object.fields[keys[i]] !== "object")
                                throw TypeError(".google.protobuf.Struct.fields: object expected");
                            message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Struct message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Struct.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.fields = {};
                    var keys2;
                    if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                        object.fields = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Struct to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Struct
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Struct.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Struct;
            })();
    
            protobuf.Value = (function() {
    
                /**
                 * Properties of a Value.
                 * @memberof google.protobuf
                 * @interface IValue
                 * @property {google.protobuf.NullValue|null} [nullValue] Value nullValue
                 * @property {number|null} [numberValue] Value numberValue
                 * @property {string|null} [stringValue] Value stringValue
                 * @property {boolean|null} [boolValue] Value boolValue
                 * @property {google.protobuf.Struct|google.protobuf.IStruct|null} [structValue] Value structValue
                 * @property {google.protobuf.ListValue|google.protobuf.IListValue|null} [listValue] Value listValue
                 */
    
                /**
                 * Constructs a new Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a Value.
                 * @constructor
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 */
                function Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Value nullValue.
                 * @member {google.protobuf.NullValue|null|undefined} nullValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.nullValue = null;
    
                /**
                 * Value numberValue.
                 * @member {number|null|undefined} numberValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.numberValue = null;
    
                /**
                 * Value stringValue.
                 * @member {string|null|undefined} stringValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.stringValue = null;
    
                /**
                 * Value boolValue.
                 * @member {boolean|null|undefined} boolValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.boolValue = null;
    
                /**
                 * Value structValue.
                 * @member {google.protobuf.Struct|null|undefined} structValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.structValue = null;
    
                /**
                 * Value listValue.
                 * @member {google.protobuf.ListValue|null|undefined} listValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.listValue = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Value kind.
                 * @member {"nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue"|undefined} kind
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Object.defineProperty(Value.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 * @returns {google.protobuf.Value} Value instance
                 */
                Value.create = function create(properties) {
                    return Value.fromObject(properties);
                };
    
                /**
                 * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nullValue != null && Object.hasOwnProperty.call(message, "nullValue"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nullValue);
                    if (message.numberValue != null && Object.hasOwnProperty.call(message, "numberValue"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.numberValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                    if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                    if (message.structValue != null && Object.hasOwnProperty.call(message, "structValue"))
                        $root.google.protobuf.Struct.encode(message.structValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.listValue != null && Object.hasOwnProperty.call(message, "listValue"))
                        $root.google.protobuf.ListValue.encode(message.listValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.nullValue = reader.int32();
                            break;
                        case 2:
                            message.numberValue = reader.double();
                            break;
                        case 3:
                            message.stringValue = reader.string();
                            break;
                        case 4:
                            message.boolValue = reader.bool();
                            break;
                        case 5:
                            message.structValue = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.listValue = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Value message.
                 * @function verify
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        properties.kind = 1;
                        switch (message.nullValue) {
                        default:
                            return "nullValue: enum value expected";
                        case 0:
                            break;
                        }
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.numberValue !== "number")
                            return "numberValue: number expected";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (!$util.isString(message.stringValue))
                            return "stringValue: string expected";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.boolValue !== "boolean")
                            return "boolValue: boolean expected";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.Struct.verify(message.structValue);
                            if (error)
                                return "structValue." + error;
                        }
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.ListValue.verify(message.listValue);
                            if (error)
                                return "listValue." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Value} Value
                 */
                Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Value)
                        return object;
                    var message = new $root.google.protobuf.Value();
                    switch (object.nullValue) {
                    case "NULL_VALUE":
                    case 0:
                        message.nullValue = 0;
                        break;
                    }
                    if (object.numberValue != null)
                        message.numberValue = Number(object.numberValue);
                    if (object.stringValue != null)
                        message.stringValue = String(object.stringValue);
                    if (object.boolValue != null)
                        message.boolValue = Boolean(object.boolValue);
                    if (object.structValue != null) {
                        if (typeof object.structValue !== "object")
                            throw TypeError(".google.protobuf.Value.structValue: object expected");
                        message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
                    }
                    if (object.listValue != null) {
                        if (typeof object.listValue !== "object")
                            throw TypeError(".google.protobuf.Value.listValue: object expected");
                        message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                        if (options.oneofs)
                            object.kind = "nullValue";
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                        if (options.oneofs)
                            object.kind = "numberValue";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        object.stringValue = message.stringValue;
                        if (options.oneofs)
                            object.kind = "stringValue";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        object.boolValue = message.boolValue;
                        if (options.oneofs)
                            object.kind = "boolValue";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                        if (options.oneofs)
                            object.kind = "structValue";
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                        if (options.oneofs)
                            object.kind = "listValue";
                    }
                    return object;
                };
    
                /**
                 * Converts this Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Value;
            })();
    
            /**
             * NullValue enum.
             * @name google.protobuf.NullValue
             * @enum {number}
             * @property {number} NULL_VALUE=0 NULL_VALUE value
             */
            protobuf.NullValue = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NULL_VALUE"] = 0;
                return values;
            })();
    
            protobuf.ListValue = (function() {
    
                /**
                 * Properties of a ListValue.
                 * @memberof google.protobuf
                 * @interface IListValue
                 * @property {Array.<google.protobuf.Value|google.protobuf.IValue>|null} [values] ListValue values
                 */
    
                /**
                 * Constructs a new ListValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a ListValue.
                 * @constructor
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 */
                function ListValue(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListValue values.
                 * @member {Array.<google.protobuf.Value>} values
                 * @memberof google.protobuf.ListValue
                 * @instance
                 */
                ListValue.prototype.values = $util.emptyArray;
    
                /**
                 * Creates a new ListValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 * @returns {google.protobuf.ListValue} ListValue instance
                 */
                ListValue.create = function create(properties) {
                    return ListValue.fromObject(properties);
                };
    
                /**
                 * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ListValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.values && message.values.length))
                                message.values = [];
                            message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListValue message.
                 * @function verify
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.values[i]);
                            if (error)
                                return "values." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ListValue} ListValue
                 */
                ListValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ListValue)
                        return object;
                    var message = new $root.google.protobuf.ListValue();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".google.protobuf.ListValue.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i) {
                            if (typeof object.values[i] !== "object")
                                throw TypeError(".google.protobuf.ListValue.values: object expected");
                            message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ListValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ListValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ListValue;
            })();
    
            protobuf.FieldMask = (function() {
    
                /**
                 * Properties of a FieldMask.
                 * @memberof google.protobuf
                 * @interface IFieldMask
                 * @property {Array.<string>|null} [paths] FieldMask paths
                 */
    
                /**
                 * Constructs a new FieldMask.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldMask.
                 * @constructor
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 */
                function FieldMask(properties) {
                    this.paths = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldMask paths.
                 * @member {Array.<string>} paths
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 */
                FieldMask.prototype.paths = $util.emptyArray;
    
                /**
                 * Creates a new FieldMask instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.IFieldMask=} [properties] Properties to set
                 * @returns {google.protobuf.FieldMask} FieldMask instance
                 */
                FieldMask.create = function create(properties) {
                    return FieldMask.fromObject(properties);
                };
    
                /**
                 * Encodes the specified FieldMask message. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.paths != null && message.paths.length)
                        for (var i = 0; i < message.paths.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldMask message, length delimited. Does not implicitly {@link google.protobuf.FieldMask.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldMask.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldMask();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.paths && message.paths.length))
                                message.paths = [];
                            message.paths.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldMask message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldMask} FieldMask
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldMask.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldMask message.
                 * @function verify
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldMask.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.paths != null && message.hasOwnProperty("paths")) {
                        if (!Array.isArray(message.paths))
                            return "paths: array expected";
                        for (var i = 0; i < message.paths.length; ++i)
                            if (!$util.isString(message.paths[i]))
                                return "paths: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldMask message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldMask} FieldMask
                 */
                FieldMask.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldMask)
                        return object;
                    var message = new $root.google.protobuf.FieldMask();
                    if (object.paths) {
                        if (!Array.isArray(object.paths))
                            throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                        message.paths = [];
                        for (var i = 0; i < object.paths.length; ++i)
                            message.paths[i] = String(object.paths[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldMask message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldMask
                 * @static
                 * @param {google.protobuf.FieldMask} message FieldMask
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldMask.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.paths = [];
                    if (message.paths && message.paths.length) {
                        object.paths = [];
                        for (var j = 0; j < message.paths.length; ++j)
                            object.paths[j] = message.paths[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldMask to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldMask
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldMask.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FieldMask;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();

    $root.api = $root.replit.goval.api; return $root;
});
