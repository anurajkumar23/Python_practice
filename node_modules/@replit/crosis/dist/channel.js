"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
var protocol_1 = require("@replit/protocol");
var Channel = (function () {
    function Channel(_a) {
        var _this = this;
        var id = _a.id, send = _a.send, onUnrecoverableError = _a.onUnrecoverableError;
        this.onCommand = function (listener) {
            if (_this.status === 'closed') {
                var e = new Error('Trying to listen to commands on a closed channel');
                _this.onUnrecoverableError(e);
                throw e;
            }
            _this.onCommandListeners.push(listener);
            return function () {
                _this.onCommandListeners = _this.onCommandListeners.filter(function (l) { return l !== listener; });
            };
        };
        this.send = function (cmdJson) {
            if (_this.status === 'closed') {
                var e = new Error('Calling send on closed channel');
                _this.onUnrecoverableError(e);
                throw e;
            }
            if (_this.status === 'closing') {
                var e = new Error('Cannot send any more commands after a close request');
                _this.onUnrecoverableError(e);
                throw e;
            }
            cmdJson.channel = _this.id;
            _this.sendToContainer(protocol_1.api.Command.create(cmdJson));
        };
        this.request = function (cmdJson) { return __awaiter(_this, void 0, void 0, function () {
            var ref;
            var _this = this;
            return __generator(this, function (_a) {
                ref = Number(Math.random().toString().split('.')[1]).toString(36);
                cmdJson.ref = ref;
                return [2, new Promise(function (resolve, reject) {
                        _this.requestMap[ref] = resolve;
                        try {
                            _this.send(cmdJson);
                        }
                        catch (e) {
                            delete _this.requestMap[ref];
                            reject(e);
                        }
                    })];
            });
        }); };
        this.handleCommand = function (cmd) {
            _this.onCommandListeners.forEach(function (l) { return l(cmd); });
            if (cmd.ref && _this.requestMap[cmd.ref]) {
                _this.requestMap[cmd.ref](cmd);
                delete _this.requestMap[cmd.ref];
            }
        };
        this.handleClose = function (reason) {
            Object.keys(_this.requestMap).forEach(function (ref) {
                var requestResult = protocol_1.api.Command.fromObject({});
                requestResult.channelClosed = reason;
                _this.requestMap[ref](requestResult);
                delete _this.requestMap[ref];
            });
            _this.status = 'closed';
            _this.onCommandListeners = [];
        };
        this.id = id;
        this.sendToContainer = send;
        this.onUnrecoverableError = onUnrecoverableError;
        this.status = 'open';
        this.requestMap = {};
        this.onCommandListeners = [];
    }
    return Channel;
}());
exports.Channel = Channel;
//# sourceMappingURL=channel.js.map